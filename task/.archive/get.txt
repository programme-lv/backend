package task

import (
	"fmt"
	"strings"
)

// func (s *TaskService) GetTask(ctx context.Context, taskId string) (res *Task, err error) {
// 	row, err := s.ddbTaskTable.Get(ctx, taskId)
// 	if err != nil {
// 		return nil, fmt.Errorf("could not get task: %w", err)
// 	}
// 	if row == nil {
// 		return nil, newErrTaskNotFound()
// 	}

// 	return ddbTaskRowToResponse(row)
// }

func ddbTaskRowToResponse(row *TaskRow) (res *Task, err error) {
	taskManifest, err := ParseTaskTomlManifest(row.TomlManifest)
	if err != nil {
		return nil, fmt.Errorf("could not parse task toml manifest: %w", err)
	}

	mds := taskManifest.Statement.MDs
	var responseDefaulMdStatement *MarkdownStatement = nil
	if len(mds) > 0 {
		defaultMd := mds[0]
		resolveImgsToUrls := func(mdSection string) string {
			for uuid, key := range defaultMd.ImgUuidToS3Key {
				url := fmt.Sprintf("https://dvhk4hiwp1rmf.cloudfront.net/%s", key)
				mdSection = strings.Replace(mdSection, uuid, url, 1)
			}
			return mdSection
		}
		var notes *string = nil
		if defaultMd.Notes.Content != "" {
			notesStr := resolveImgsToUrls(defaultMd.Notes.Content)
			notes = &notesStr
		}
		var scoring *string = nil
		if defaultMd.Scoring.Content != "" {
			scoringStr := resolveImgsToUrls(defaultMd.Scoring.Content)
			scoring = &scoringStr
		}

		responseDefaulMdStatement = &MarkdownStatement{
			Story:   resolveImgsToUrls(defaultMd.Story.Content),
			Input:   resolveImgsToUrls(defaultMd.Input.Content),
			Output:  resolveImgsToUrls(defaultMd.Output.Content),
			Notes:   notes,
			Scoring: scoring,
		}
	}

	var illustrationImgUrl *string = nil
	if taskManifest.Statement.IllustrationImg.S3ObjKey != "" {
		illustrationImgUrlStrl := fmt.Sprintf("https://dvhk4hiwp1rmf.cloudfront.net/%s", taskManifest.Statement.IllustrationImg.S3ObjKey)
		illustrationImgUrl = &illustrationImgUrlStrl
	}

	var examples []*Example = make([]*Example, 0)
	for _, example := range taskManifest.Statement.Examples {
		examples = append(examples, &Example{
			Input:  example.Input,
			Output: example.Output,
			MdNote: example.MdNote,
		})
	}

	var stInputs []*StInputs = make([]*StInputs, 0)
	for _, st := range taskManifest.Statement.VisInpSTs {
		stInputs = append(stInputs, &StInputs{
			Subtask: st.Subtask,
			Inputs:  st.Inputs,
		})
	}

	var defaultPdfStatementURL *string = nil
	if len(taskManifest.Statement.PDFs) > 0 {
		pdf := taskManifest.Statement.PDFs[0]
		defaultPdfStatementURLStr := fmt.Sprintf("https://dvhk4hiwp1rmf.cloudfront.net/task-pdf-statements/%s.pdf", pdf.SHA256)
		defaultPdfStatementURL = &defaultPdfStatementURLStr
	}

	res = &Task{
		PublishedTaskID:        row.Id,
		TaskFullName:           taskManifest.FullName,
		MemoryLimitMegabytes:   taskManifest.Contraints.MemoryLimMB,
		CPUTimeLimitSeconds:    taskManifest.Contraints.CpuTimeInSecs,
		OriginOlympiad:         taskManifest.Metadata.OriginOlympiad,
		IllustrationImgURL:     illustrationImgUrl,
		DifficultyRating:       taskManifest.Metadata.Difficulty,
		DefaultMdStatement:     responseDefaulMdStatement,
		Examples:               examples,
		DefaultPdfStatementURL: defaultPdfStatementURL,
		OriginNotes:            taskManifest.Metadata.OriginNotes,
		VisibleInputSubtasks:   stInputs,
	}

	return
}
