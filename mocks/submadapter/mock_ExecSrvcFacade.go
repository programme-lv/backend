// Code generated by mockery v2.52.1. DO NOT EDIT.

package submadapter

import (
	context "context"

	execsrvc "github.com/programme-lv/backend/execsrvc"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockExecSrvcFacade is an autogenerated mock type for the ExecSrvcFacade type
type MockExecSrvcFacade struct {
	mock.Mock
}

type MockExecSrvcFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecSrvcFacade) EXPECT() *MockExecSrvcFacade_Expecter {
	return &MockExecSrvcFacade_Expecter{mock: &_m.Mock}
}

// Enqueue provides a mock function with given fields: ctx, execUuid, srcCode, prLangId, tests, params
func (_m *MockExecSrvcFacade) Enqueue(ctx context.Context, execUuid uuid.UUID, srcCode string, prLangId string, tests []execsrvc.TestFile, params execsrvc.TestingParams) error {
	ret := _m.Called(ctx, execUuid, srcCode, prLangId, tests, params)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string, []execsrvc.TestFile, execsrvc.TestingParams) error); ok {
		r0 = rf(ctx, execUuid, srcCode, prLangId, tests, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecSrvcFacade_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockExecSrvcFacade_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - execUuid uuid.UUID
//   - srcCode string
//   - prLangId string
//   - tests []execsrvc.TestFile
//   - params execsrvc.TestingParams
func (_e *MockExecSrvcFacade_Expecter) Enqueue(ctx interface{}, execUuid interface{}, srcCode interface{}, prLangId interface{}, tests interface{}, params interface{}) *MockExecSrvcFacade_Enqueue_Call {
	return &MockExecSrvcFacade_Enqueue_Call{Call: _e.mock.On("Enqueue", ctx, execUuid, srcCode, prLangId, tests, params)}
}

func (_c *MockExecSrvcFacade_Enqueue_Call) Run(run func(ctx context.Context, execUuid uuid.UUID, srcCode string, prLangId string, tests []execsrvc.TestFile, params execsrvc.TestingParams)) *MockExecSrvcFacade_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(string), args[4].([]execsrvc.TestFile), args[5].(execsrvc.TestingParams))
	})
	return _c
}

func (_c *MockExecSrvcFacade_Enqueue_Call) Return(_a0 error) *MockExecSrvcFacade_Enqueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecSrvcFacade_Enqueue_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, string, []execsrvc.TestFile, execsrvc.TestingParams) error) *MockExecSrvcFacade_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// Listen provides a mock function with given fields: ctx, execUuid
func (_m *MockExecSrvcFacade) Listen(ctx context.Context, execUuid uuid.UUID) (<-chan execsrvc.Event, error) {
	ret := _m.Called(ctx, execUuid)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 <-chan execsrvc.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (<-chan execsrvc.Event, error)); ok {
		return rf(ctx, execUuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) <-chan execsrvc.Event); ok {
		r0 = rf(ctx, execUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan execsrvc.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, execUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecSrvcFacade_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type MockExecSrvcFacade_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - ctx context.Context
//   - execUuid uuid.UUID
func (_e *MockExecSrvcFacade_Expecter) Listen(ctx interface{}, execUuid interface{}) *MockExecSrvcFacade_Listen_Call {
	return &MockExecSrvcFacade_Listen_Call{Call: _e.mock.On("Listen", ctx, execUuid)}
}

func (_c *MockExecSrvcFacade_Listen_Call) Run(run func(ctx context.Context, execUuid uuid.UUID)) *MockExecSrvcFacade_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockExecSrvcFacade_Listen_Call) Return(_a0 <-chan execsrvc.Event, _a1 error) *MockExecSrvcFacade_Listen_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecSrvcFacade_Listen_Call) RunAndReturn(run func(context.Context, uuid.UUID) (<-chan execsrvc.Event, error)) *MockExecSrvcFacade_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecSrvcFacade creates a new instance of MockExecSrvcFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecSrvcFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecSrvcFacade {
	mock := &MockExecSrvcFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
