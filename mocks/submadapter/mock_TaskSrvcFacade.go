// Code generated by mockery v2.53.2. DO NOT EDIT.

package submadapter

import (
	context "context"

	srvc "github.com/programme-lv/backend/task/srvc"
	mock "github.com/stretchr/testify/mock"
)

// MockTaskSrvcFacade is an autogenerated mock type for the TaskSrvcFacade type
type MockTaskSrvcFacade struct {
	mock.Mock
}

type MockTaskSrvcFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskSrvcFacade) EXPECT() *MockTaskSrvcFacade_Expecter {
	return &MockTaskSrvcFacade_Expecter{mock: &_m.Mock}
}

// GetTask provides a mock function with given fields: ctx, shortId
func (_m *MockTaskSrvcFacade) GetTask(ctx context.Context, shortId string) (srvc.Task, error) {
	ret := _m.Called(ctx, shortId)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 srvc.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (srvc.Task, error)); ok {
		return rf(ctx, shortId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) srvc.Task); ok {
		r0 = rf(ctx, shortId)
	} else {
		r0 = ret.Get(0).(srvc.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskSrvcFacade_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockTaskSrvcFacade_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - shortId string
func (_e *MockTaskSrvcFacade_Expecter) GetTask(ctx interface{}, shortId interface{}) *MockTaskSrvcFacade_GetTask_Call {
	return &MockTaskSrvcFacade_GetTask_Call{Call: _e.mock.On("GetTask", ctx, shortId)}
}

func (_c *MockTaskSrvcFacade_GetTask_Call) Run(run func(ctx context.Context, shortId string)) *MockTaskSrvcFacade_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskSrvcFacade_GetTask_Call) Return(_a0 srvc.Task, _a1 error) *MockTaskSrvcFacade_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskSrvcFacade_GetTask_Call) RunAndReturn(run func(context.Context, string) (srvc.Task, error)) *MockTaskSrvcFacade_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTestDownlUrl provides a mock function with given fields: ctx, testFileSha256
func (_m *MockTaskSrvcFacade) GetTestDownlUrl(ctx context.Context, testFileSha256 string) (string, error) {
	ret := _m.Called(ctx, testFileSha256)

	if len(ret) == 0 {
		panic("no return value specified for GetTestDownlUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, testFileSha256)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, testFileSha256)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, testFileSha256)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTaskSrvcFacade_GetTestDownlUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTestDownlUrl'
type MockTaskSrvcFacade_GetTestDownlUrl_Call struct {
	*mock.Call
}

// GetTestDownlUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - testFileSha256 string
func (_e *MockTaskSrvcFacade_Expecter) GetTestDownlUrl(ctx interface{}, testFileSha256 interface{}) *MockTaskSrvcFacade_GetTestDownlUrl_Call {
	return &MockTaskSrvcFacade_GetTestDownlUrl_Call{Call: _e.mock.On("GetTestDownlUrl", ctx, testFileSha256)}
}

func (_c *MockTaskSrvcFacade_GetTestDownlUrl_Call) Run(run func(ctx context.Context, testFileSha256 string)) *MockTaskSrvcFacade_GetTestDownlUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskSrvcFacade_GetTestDownlUrl_Call) Return(_a0 string, _a1 error) *MockTaskSrvcFacade_GetTestDownlUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTaskSrvcFacade_GetTestDownlUrl_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockTaskSrvcFacade_GetTestDownlUrl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskSrvcFacade creates a new instance of MockTaskSrvcFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskSrvcFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskSrvcFacade {
	mock := &MockTaskSrvcFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
