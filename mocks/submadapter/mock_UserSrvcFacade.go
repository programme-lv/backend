// Code generated by mockery v2.53.2. DO NOT EDIT.

package submadapter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	user "github.com/programme-lv/backend/user"

	uuid "github.com/google/uuid"
)

// MockUserSrvcFacade is an autogenerated mock type for the UserSrvcFacade type
type MockUserSrvcFacade struct {
	mock.Mock
}

type MockUserSrvcFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserSrvcFacade) EXPECT() *MockUserSrvcFacade_Expecter {
	return &MockUserSrvcFacade_Expecter{mock: &_m.Mock}
}

// GetUserByUUID provides a mock function with given fields: ctx, _a1
func (_m *MockUserSrvcFacade) GetUserByUUID(ctx context.Context, _a1 uuid.UUID) (user.User, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUUID")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (user.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) user.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserSrvcFacade_GetUserByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUUID'
type MockUserSrvcFacade_GetUserByUUID_Call struct {
	*mock.Call
}

// GetUserByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 uuid.UUID
func (_e *MockUserSrvcFacade_Expecter) GetUserByUUID(ctx interface{}, _a1 interface{}) *MockUserSrvcFacade_GetUserByUUID_Call {
	return &MockUserSrvcFacade_GetUserByUUID_Call{Call: _e.mock.On("GetUserByUUID", ctx, _a1)}
}

func (_c *MockUserSrvcFacade_GetUserByUUID_Call) Run(run func(ctx context.Context, _a1 uuid.UUID)) *MockUserSrvcFacade_GetUserByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserSrvcFacade_GetUserByUUID_Call) Return(_a0 user.User, _a1 error) *MockUserSrvcFacade_GetUserByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserSrvcFacade_GetUserByUUID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (user.User, error)) *MockUserSrvcFacade_GetUserByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserSrvcFacade creates a new instance of MockUserSrvcFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserSrvcFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserSrvcFacade {
	mock := &MockUserSrvcFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
