// Code generated by mockery v2.53.2. DO NOT EDIT.

package submadapter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	submdomain "github.com/programme-lv/backend/subm/submdomain"

	uuid "github.com/google/uuid"
)

// MockEvalRepo is an autogenerated mock type for the EvalRepo type
type MockEvalRepo struct {
	mock.Mock
}

type MockEvalRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvalRepo) EXPECT() *MockEvalRepo_Expecter {
	return &MockEvalRepo_Expecter{mock: &_m.Mock}
}

// GetEval provides a mock function with given fields: ctx, evalUUID
func (_m *MockEvalRepo) GetEval(ctx context.Context, evalUUID uuid.UUID) (submdomain.Eval, error) {
	ret := _m.Called(ctx, evalUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetEval")
	}

	var r0 submdomain.Eval
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (submdomain.Eval, error)); ok {
		return rf(ctx, evalUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) submdomain.Eval); ok {
		r0 = rf(ctx, evalUUID)
	} else {
		r0 = ret.Get(0).(submdomain.Eval)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, evalUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEvalRepo_GetEval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEval'
type MockEvalRepo_GetEval_Call struct {
	*mock.Call
}

// GetEval is a helper method to define mock.On call
//   - ctx context.Context
//   - evalUUID uuid.UUID
func (_e *MockEvalRepo_Expecter) GetEval(ctx interface{}, evalUUID interface{}) *MockEvalRepo_GetEval_Call {
	return &MockEvalRepo_GetEval_Call{Call: _e.mock.On("GetEval", ctx, evalUUID)}
}

func (_c *MockEvalRepo_GetEval_Call) Run(run func(ctx context.Context, evalUUID uuid.UUID)) *MockEvalRepo_GetEval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockEvalRepo_GetEval_Call) Return(_a0 submdomain.Eval, _a1 error) *MockEvalRepo_GetEval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEvalRepo_GetEval_Call) RunAndReturn(run func(context.Context, uuid.UUID) (submdomain.Eval, error)) *MockEvalRepo_GetEval_Call {
	_c.Call.Return(run)
	return _c
}

// StoreEval provides a mock function with given fields: ctx, eval
func (_m *MockEvalRepo) StoreEval(ctx context.Context, eval submdomain.Eval) error {
	ret := _m.Called(ctx, eval)

	if len(ret) == 0 {
		panic("no return value specified for StoreEval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, submdomain.Eval) error); ok {
		r0 = rf(ctx, eval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEvalRepo_StoreEval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreEval'
type MockEvalRepo_StoreEval_Call struct {
	*mock.Call
}

// StoreEval is a helper method to define mock.On call
//   - ctx context.Context
//   - eval submdomain.Eval
func (_e *MockEvalRepo_Expecter) StoreEval(ctx interface{}, eval interface{}) *MockEvalRepo_StoreEval_Call {
	return &MockEvalRepo_StoreEval_Call{Call: _e.mock.On("StoreEval", ctx, eval)}
}

func (_c *MockEvalRepo_StoreEval_Call) Run(run func(ctx context.Context, eval submdomain.Eval)) *MockEvalRepo_StoreEval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(submdomain.Eval))
	})
	return _c
}

func (_c *MockEvalRepo_StoreEval_Call) Return(_a0 error) *MockEvalRepo_StoreEval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvalRepo_StoreEval_Call) RunAndReturn(run func(context.Context, submdomain.Eval) error) *MockEvalRepo_StoreEval_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEvalRepo creates a new instance of MockEvalRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvalRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvalRepo {
	mock := &MockEvalRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
