// Code generated by mockery v2.52.1. DO NOT EDIT.

package submadapter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	submdomain "github.com/programme-lv/backend/subm/submdomain"

	uuid "github.com/google/uuid"
)

// MockSubmRepo is an autogenerated mock type for the SubmRepo type
type MockSubmRepo struct {
	mock.Mock
}

type MockSubmRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubmRepo) EXPECT() *MockSubmRepo_Expecter {
	return &MockSubmRepo_Expecter{mock: &_m.Mock}
}

// AssignEval provides a mock function with given fields: ctx, submUuid, evalUuid
func (_m *MockSubmRepo) AssignEval(ctx context.Context, submUuid uuid.UUID, evalUuid uuid.UUID) error {
	ret := _m.Called(ctx, submUuid, evalUuid)

	if len(ret) == 0 {
		panic("no return value specified for AssignEval")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, submUuid, evalUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubmRepo_AssignEval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignEval'
type MockSubmRepo_AssignEval_Call struct {
	*mock.Call
}

// AssignEval is a helper method to define mock.On call
//   - ctx context.Context
//   - submUuid uuid.UUID
//   - evalUuid uuid.UUID
func (_e *MockSubmRepo_Expecter) AssignEval(ctx interface{}, submUuid interface{}, evalUuid interface{}) *MockSubmRepo_AssignEval_Call {
	return &MockSubmRepo_AssignEval_Call{Call: _e.mock.On("AssignEval", ctx, submUuid, evalUuid)}
}

func (_c *MockSubmRepo_AssignEval_Call) Run(run func(ctx context.Context, submUuid uuid.UUID, evalUuid uuid.UUID)) *MockSubmRepo_AssignEval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubmRepo_AssignEval_Call) Return(_a0 error) *MockSubmRepo_AssignEval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubmRepo_AssignEval_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockSubmRepo_AssignEval_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubm provides a mock function with given fields: ctx, id
func (_m *MockSubmRepo) GetSubm(ctx context.Context, id uuid.UUID) (submdomain.Subm, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubm")
	}

	var r0 submdomain.Subm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (submdomain.Subm, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) submdomain.Subm); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(submdomain.Subm)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmRepo_GetSubm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubm'
type MockSubmRepo_GetSubm_Call struct {
	*mock.Call
}

// GetSubm is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSubmRepo_Expecter) GetSubm(ctx interface{}, id interface{}) *MockSubmRepo_GetSubm_Call {
	return &MockSubmRepo_GetSubm_Call{Call: _e.mock.On("GetSubm", ctx, id)}
}

func (_c *MockSubmRepo_GetSubm_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSubmRepo_GetSubm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSubmRepo_GetSubm_Call) Return(_a0 submdomain.Subm, _a1 error) *MockSubmRepo_GetSubm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmRepo_GetSubm_Call) RunAndReturn(run func(context.Context, uuid.UUID) (submdomain.Subm, error)) *MockSubmRepo_GetSubm_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubms provides a mock function with given fields: ctx, limit, offset
func (_m *MockSubmRepo) ListSubms(ctx context.Context, limit int, offset int) ([]submdomain.Subm, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListSubms")
	}

	var r0 []submdomain.Subm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]submdomain.Subm, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []submdomain.Subm); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]submdomain.Subm)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubmRepo_ListSubms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubms'
type MockSubmRepo_ListSubms_Call struct {
	*mock.Call
}

// ListSubms is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockSubmRepo_Expecter) ListSubms(ctx interface{}, limit interface{}, offset interface{}) *MockSubmRepo_ListSubms_Call {
	return &MockSubmRepo_ListSubms_Call{Call: _e.mock.On("ListSubms", ctx, limit, offset)}
}

func (_c *MockSubmRepo_ListSubms_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockSubmRepo_ListSubms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockSubmRepo_ListSubms_Call) Return(_a0 []submdomain.Subm, _a1 error) *MockSubmRepo_ListSubms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubmRepo_ListSubms_Call) RunAndReturn(run func(context.Context, int, int) ([]submdomain.Subm, error)) *MockSubmRepo_ListSubms_Call {
	_c.Call.Return(run)
	return _c
}

// StoreSubm provides a mock function with given fields: ctx, subm
func (_m *MockSubmRepo) StoreSubm(ctx context.Context, subm submdomain.Subm) error {
	ret := _m.Called(ctx, subm)

	if len(ret) == 0 {
		panic("no return value specified for StoreSubm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, submdomain.Subm) error); ok {
		r0 = rf(ctx, subm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubmRepo_StoreSubm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreSubm'
type MockSubmRepo_StoreSubm_Call struct {
	*mock.Call
}

// StoreSubm is a helper method to define mock.On call
//   - ctx context.Context
//   - subm submdomain.Subm
func (_e *MockSubmRepo_Expecter) StoreSubm(ctx interface{}, subm interface{}) *MockSubmRepo_StoreSubm_Call {
	return &MockSubmRepo_StoreSubm_Call{Call: _e.mock.On("StoreSubm", ctx, subm)}
}

func (_c *MockSubmRepo_StoreSubm_Call) Run(run func(ctx context.Context, subm submdomain.Subm)) *MockSubmRepo_StoreSubm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(submdomain.Subm))
	})
	return _c
}

func (_c *MockSubmRepo_StoreSubm_Call) Return(_a0 error) *MockSubmRepo_StoreSubm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubmRepo_StoreSubm_Call) RunAndReturn(run func(context.Context, submdomain.Subm) error) *MockSubmRepo_StoreSubm_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubmRepo creates a new instance of MockSubmRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubmRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubmRepo {
	mock := &MockSubmRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
