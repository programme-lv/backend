// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions endpoints
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package submissions

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "submissions" service endpoints.
type Endpoints struct {
	CreateSubmission         goa.Endpoint
	ListSubmissions          goa.Endpoint
	StreamSubmissionUpdates  goa.Endpoint
	GetSubmission            goa.Endpoint
	ListProgrammingLanguages goa.Endpoint
}

// StreamSubmissionUpdatesEndpointInput holds both the payload and the server
// stream of the "streamSubmissionUpdates" method.
type StreamSubmissionUpdatesEndpointInput struct {
	// Stream is the server stream used by the "streamSubmissionUpdates" method to
	// send data.
	Stream StreamSubmissionUpdatesServerStream
}

// NewEndpoints wraps the methods of the "submissions" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CreateSubmission:         NewCreateSubmissionEndpoint(s, a.JWTAuth),
		ListSubmissions:          NewListSubmissionsEndpoint(s),
		StreamSubmissionUpdates:  NewStreamSubmissionUpdatesEndpoint(s),
		GetSubmission:            NewGetSubmissionEndpoint(s),
		ListProgrammingLanguages: NewListProgrammingLanguagesEndpoint(s),
	}
}

// Use applies the given middleware to all the "submissions" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateSubmission = m(e.CreateSubmission)
	e.ListSubmissions = m(e.ListSubmissions)
	e.StreamSubmissionUpdates = m(e.StreamSubmissionUpdates)
	e.GetSubmission = m(e.GetSubmission)
	e.ListProgrammingLanguages = m(e.ListProgrammingLanguages)
}

// NewCreateSubmissionEndpoint returns an endpoint function that calls the
// method "createSubmission" of service "submissions".
func NewCreateSubmissionEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateSubmissionPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"users:read", "users:write"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CreateSubmission(ctx, p)
	}
}

// NewListSubmissionsEndpoint returns an endpoint function that calls the
// method "listSubmissions" of service "submissions".
func NewListSubmissionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.ListSubmissions(ctx)
	}
}

// NewStreamSubmissionUpdatesEndpoint returns an endpoint function that calls
// the method "streamSubmissionUpdates" of service "submissions".
func NewStreamSubmissionUpdatesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*StreamSubmissionUpdatesEndpointInput)
		return nil, s.StreamSubmissionUpdates(ctx, ep.Stream)
	}
}

// NewGetSubmissionEndpoint returns an endpoint function that calls the method
// "getSubmission" of service "submissions".
func NewGetSubmissionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetSubmissionPayload)
		return s.GetSubmission(ctx, p)
	}
}

// NewListProgrammingLanguagesEndpoint returns an endpoint function that calls
// the method "listProgrammingLanguages" of service "submissions".
func NewListProgrammingLanguagesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.ListProgrammingLanguages(ctx)
	}
}
