// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions service
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package submissions

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service for managing submissions
type Service interface {
	// Create a new submission
	CreateSubmission(context.Context, *CreateSubmissionPayload) (res *Submission, err error)
	// List all submissions
	ListSubmissions(context.Context) (res []*Submission, err error)
	// Stream updates to all submissions in real-time
	StreamSubmissionUpdates(context.Context, StreamSubmissionUpdatesServerStream) (err error)
	// Get a submission by UUID
	GetSubmission(context.Context, *GetSubmissionPayload) (res *Submission, err error)
	// List all available programming languages
	ListProgrammingLanguages(context.Context) (res []*ProgrammingLang, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "proglv"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "submissions"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"createSubmission", "listSubmissions", "streamSubmissionUpdates", "getSubmission", "listProgrammingLanguages"}

// StreamSubmissionUpdatesServerStream is the interface a
// "streamSubmissionUpdates" endpoint server stream must satisfy.
type StreamSubmissionUpdatesServerStream interface {
	// Send streams instances of "SubmissionListUpdate".
	Send(*SubmissionListUpdate) error
	// Close closes the stream.
	Close() error
}

// StreamSubmissionUpdatesClientStream is the interface a
// "streamSubmissionUpdates" endpoint client stream must satisfy.
type StreamSubmissionUpdatesClientStream interface {
	// Recv reads instances of "SubmissionListUpdate" from the stream.
	Recv() (*SubmissionListUpdate, error)
}

// CreateSubmissionPayload is the payload type of the submissions service
// createSubmission method.
type CreateSubmissionPayload struct {
	// The code submission
	Submission string
	// Username of the user who submitted
	Username string
	// ID of the programming language
	ProgrammingLangID string
	// ID of the task
	TaskCodeID string
	// JWT token used for authentication
	Token string
}

// GetSubmissionPayload is the payload type of the submissions service
// getSubmission method.
type GetSubmissionPayload struct {
	// UUID of the submission
	UUID string
}

// Internal server error
type InternalError string

// Invalid submission details
type InvalidSubmissionDetails string

// Submission not found
type NotFound string

// Represents a programming language
type ProgrammingLang struct {
	// ID of the programming language
	ID string
	// Full name of the programming language
	FullName string
	// Default code filename for the language
	CodeFilename *string
	// Compilation command for the language
	CompileCmd *string
	// Execution command for the language
	ExecuteCmd string
	// Command to get environment version
	EnvVersionCmd string
	// Hello World example code
	HelloWorldCode string
	// Monaco editor ID for the programming language
	MonacoID string
	// Name of the compiled output file
	CompiledFilename *string
	// Whether the language is enabled
	Enabled bool
}

// Submission is the result type of the submissions service createSubmission
// method.
type Submission struct {
	// UUID of the submission
	SubmUUID string
	// The code submission
	Submission string
	// Username of the user who submitted
	Username string
	// Creation time of the submission
	CreatedAt string
	// UUID of the evaluation
	EvalUUID string
	// Status of the current evaluation
	EvalStatus string
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResult
	// Scoring / results of the all tests
	EvalScoringTests *TestsResult
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResult
	// ID of the programming language
	PLangID string
	// Display name of the programming language
	PLangDisplayName string
	// Monaco editor ID for the programming language
	PLangMonacoID string
	// Name of the task associated with the submission
	TaskName string
	// Code of the task associated with the submission
	TaskID string
}

// SubmissionListUpdate is the result type of the submissions service
// streamSubmissionUpdates method.
type SubmissionListUpdate struct {
	// Submission that was created
	SubmCreated        *Submission
	StateUpdate        *SubmissionStateUpdate
	TestgroupResUpdate *TestgroupScoreUpdate
}

type SubmissionStateUpdate struct {
	// UUID of the submission
	SubmUUID string
	// UUID of the evaluation
	EvalUUID string
	// New state of the submission
	NewState string
}

type SubtaskResult struct {
	// ID of the subtask
	SubtaskID int
	// Score of the subtask
	SubtaskScore int
	// Number of accepted tests
	AcceptedTests int
	// Number of wrong tests
	WrongTests int
	// Number of untested tests
	UntestedTests int
}

type TestGroupResult struct {
	// ID of the test group
	TestGroupID int
	// Score of the test group
	TestGroupScore int
	// Statement subtask
	StatementSubtask int
	// Number of accepted tests
	AcceptedTests int
	// Number of wrong tests
	WrongTests int
	// Number of untested tests
	UntestedTests int
}

type TestgroupScoreUpdate struct {
	SubmUUID      string
	EvalUUID      string
	TestGroupID   int
	AcceptedTests int
	WrongTests    int
	UntestedTests int
}

type TestsResult struct {
	// Number of accepted tests
	Accepted int
	// Number of wrong tests
	Wrong int
	// Number of untested tests
	Untested int
}

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "InternalError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalError".
func (e InternalError) GoaErrorName() string {
	return "InternalError"
}

// Error returns an error description.
func (e InvalidSubmissionDetails) Error() string {
	return "Invalid submission details"
}

// ErrorName returns "InvalidSubmissionDetails".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidSubmissionDetails) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InvalidSubmissionDetails".
func (e InvalidSubmissionDetails) GoaErrorName() string {
	return "InvalidSubmissionDetails"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "Submission not found"
}

// ErrorName returns "NotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFound".
func (e NotFound) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// MakeInvalidSubmissionDetails builds a goa.ServiceError from an error.
func MakeInvalidSubmissionDetails(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InvalidSubmissionDetails", false, false, false)
}
