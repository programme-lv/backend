openapi: 3.0.3
info:
    title: Programme.lv backend
    description: Service for managing users, tasks, and submissions.
    version: 0.0.1
servers:
    - url: http://localhost:80
      description: Default server for proglv
paths:
    /auth/current/jwt:
        get:
            tags:
                - users
            summary: queryCurrentJWT users
            description: Query current JWT
            operationId: users#queryCurrentJWT
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                type: string
                                example: current_jwt_token
                            example: current_jwt_token
                "400":
                    description: 'InvalidUserDetails: Bad Request response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Maiores ea repellendus non.
                            example: Autem pariatur ea asperiores.
                "401":
                    description: 'InvalidCredentials: Unauthorized response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Ipsam sed nemo vero nostrum.
                            example: Natus qui est in et placeat accusantium.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Quo ut eos non consequatur.
                            example: Ea pariatur qui reiciendis dolorem.
                "409":
                    description: 'EmailExists: Conflict response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Voluptates beatae.
                            example: Est sunt sunt.
            security:
                - jwt_header_Authorization: []
    /auth/login:
        post:
            tags:
                - users
            summary: login users
            description: User login
            operationId: users#login
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequestBody'
                        example:
                            password: password123
                            username: johndoe
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                type: string
                                example: jwt_token
                            example: jwt_token
                "400":
                    description: 'InvalidUserDetails: Bad Request response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: jwt_token
                            example: Perferendis est asperiores et velit voluptas labore.
                "401":
                    description: 'InvalidCredentials: Unauthorized response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: jwt_token
                            example: Consectetur et nisi et earum sed.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Id modi voluptatibus eos.
                            example: Doloribus numquam in ut molestiae ut odit.
                "409":
                    description: 'EmailExists: Conflict response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Non esse incidunt quo eveniet cum consectetur.
                            example: Optio enim reprehenderit similique.
    /users:
        get:
            tags:
                - users
            summary: listUsers users
            description: List all users
            operationId: users#listUsers
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  allowEmptyValue: true
                  schema:
                    type: string
                    description: JWT token used for authentication
                    example: jwt_token
                  example: jwt_token
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                                example:
                                    - email: johndoe@example.com
                                      firstname: John
                                      lastname: Doe
                                      username: johndoe
                                      uuid: 550e8400-e29b-41d4-a716-446655440000
                                    - email: johndoe@example.com
                                      firstname: John
                                      lastname: Doe
                                      username: johndoe
                                      uuid: 550e8400-e29b-41d4-a716-446655440000
                                    - email: johndoe@example.com
                                      firstname: John
                                      lastname: Doe
                                      username: johndoe
                                      uuid: 550e8400-e29b-41d4-a716-446655440000
                                    - email: johndoe@example.com
                                      firstname: John
                                      lastname: Doe
                                      username: johndoe
                                      uuid: 550e8400-e29b-41d4-a716-446655440000
                            example:
                                - email: johndoe@example.com
                                  firstname: John
                                  lastname: Doe
                                  username: johndoe
                                  uuid: 550e8400-e29b-41d4-a716-446655440000
                                - email: johndoe@example.com
                                  firstname: John
                                  lastname: Doe
                                  username: johndoe
                                  uuid: 550e8400-e29b-41d4-a716-446655440000
                                - email: johndoe@example.com
                                  firstname: John
                                  lastname: Doe
                                  username: johndoe
                                  uuid: 550e8400-e29b-41d4-a716-446655440000
                "400":
                    description: 'InvalidUserDetails: Bad Request response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Autem et.
                            example: Est sit.
                "401":
                    description: 'InvalidCredentials: Unauthorized response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Inventore reiciendis impedit voluptatem.
                            example: Et voluptatem consequatur laboriosam alias ut.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Quia occaecati qui assumenda.
                            example: Autem maiores deleniti delectus delectus.
                "409":
                    description: 'EmailExists: Conflict response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Necessitatibus debitis illo ex et similique.
                            example: Perspiciatis hic occaecati voluptas quaerat modi.
            security:
                - jwt_query_Authorization:
                    - users:read
        post:
            tags:
                - users
            summary: createUser users
            description: Create a new user
            operationId: users#createUser
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateUserRequestBody'
                        example:
                            email: johndoe@example.com
                            firstname: John
                            lastname: Doe
                            password: password123
                            username: johndoe
            responses:
                "201":
                    description: Created response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                            example:
                                email: johndoe@example.com
                                firstname: John
                                lastname: Doe
                                username: johndoe
                                uuid: 550e8400-e29b-41d4-a716-446655440000
                "400":
                    description: 'InvalidUserDetails: Bad Request response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Dolorem autem repudiandae.
                            example: Quos aut.
                "401":
                    description: 'InvalidCredentials: Unauthorized response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Veritatis et porro officiis.
                            example: Nihil ut voluptas.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Ea dolor amet.
                            example: Autem praesentium nihil eveniet velit inventore.
                "409":
                    description: 'EmailExists: Conflict response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Sint omnis dignissimos laborum.
                            example: Suscipit quibusdam qui.
    /users/{uuid}:
        delete:
            tags:
                - users
            summary: deleteUser users
            description: Delete a user
            operationId: users#deleteUser
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: JWT token used for authentication
                    example: jwt_token
                  example: jwt_token
                - name: uuid
                  in: path
                  description: UUID of the user
                  required: true
                  schema:
                    type: string
                    description: UUID of the user
                    example: 550e8400-e29b-41d4-a716-446655440000
                  example: 550e8400-e29b-41d4-a716-446655440000
            responses:
                "204":
                    description: No Content response.
                "400":
                    description: 'InvalidUserDetails: Bad Request response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Reprehenderit itaque quia facilis odio.
                            example: Minus accusantium nulla dolor.
                "401":
                    description: 'InvalidCredentials: Unauthorized response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Ipsa minima sint.
                            example: Dolorem dolorem fugit hic.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Quos totam adipisci provident.
                            example: Voluptatem minus libero fugiat error rerum soluta.
                "409":
                    description: 'EmailExists: Conflict response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Velit rerum quisquam omnis et delectus.
                            example: Natus qui.
            security:
                - jwt_query_Authorization:
                    - users:write
        get:
            tags:
                - users
            summary: getUser users
            description: Get a user by UUID
            operationId: users#getUser
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: JWT token used for authentication
                    example: jwt_token
                  example: jwt_token
                - name: uuid
                  in: path
                  description: UUID of the user
                  required: true
                  schema:
                    type: string
                    description: UUID of the user
                    example: 550e8400-e29b-41d4-a716-446655440000
                  example: 550e8400-e29b-41d4-a716-446655440000
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                            example:
                                email: johndoe@example.com
                                firstname: John
                                lastname: Doe
                                username: johndoe
                                uuid: 550e8400-e29b-41d4-a716-446655440000
                "400":
                    description: 'InvalidUserDetails: Bad Request response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Porro minus sed voluptatum voluptas amet.
                            example: Est ullam aut odit amet molestiae.
                "401":
                    description: 'InvalidCredentials: Unauthorized response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Occaecati et et non.
                            example: Rerum aut dicta molestiae fugiat et.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Et ducimus vitae.
                            example: Deleniti sit consequatur et molestias officiis omnis.
                "409":
                    description: 'EmailExists: Conflict response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Expedita quae dicta aut iusto ut.
                            example: Id ut id molestiae illo.
            security:
                - jwt_query_Authorization:
                    - users:read
        put:
            tags:
                - users
            summary: updateUser users
            description: Update an existing user
            operationId: users#updateUser
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  allowEmptyValue: true
                  required: true
                  schema:
                    type: string
                    description: JWT token used for authentication
                    example: jwt_token
                  example: jwt_token
                - name: uuid
                  in: path
                  description: UUID of the user
                  required: true
                  schema:
                    type: string
                    description: UUID of the user
                    example: 550e8400-e29b-41d4-a716-446655440000
                  example: 550e8400-e29b-41d4-a716-446655440000
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserRequestBody'
                        example:
                            email: johndoe@example.com
                            firstname: John
                            lastname: Doe
                            password: password123
                            username: johndoe
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                            example:
                                email: johndoe@example.com
                                firstname: John
                                lastname: Doe
                                username: johndoe
                                uuid: 550e8400-e29b-41d4-a716-446655440000
                "400":
                    description: 'InvalidUserDetails: Bad Request response.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                            example: Quasi soluta quia maxime.
                "401":
                    description: 'InvalidCredentials: Unauthorized response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Cum eligendi adipisci quia tenetur.
                            example: Sed illo sunt deleniti nihil ad optio.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Aperiam tenetur enim corporis modi rerum.
                            example: Dolorum omnis eos quisquam qui sint.
                "409":
                    description: 'EmailExists: Conflict response.'
                    content:
                        application/json:
                            schema:
                                type: string
                                example: Iste enim laudantium repellat non.
                            example: Dolore molestiae voluptas qui nostrum.
            security:
                - jwt_query_Authorization:
                    - users:write
components:
    schemas:
        CreateUserRequestBody:
            type: object
            properties:
                email:
                    type: string
                    description: Email of the user
                    example: johndoe@example.com
                    format: email
                firstname:
                    type: string
                    description: First name of the user
                    example: John
                lastname:
                    type: string
                    description: Last name of the user
                    example: Doe
                password:
                    type: string
                    description: Password of the user
                    example: password123
                    minLength: 8
                username:
                    type: string
                    description: Username of the user
                    example: johndoe
                    minLength: 1
            example:
                email: johndoe@example.com
                firstname: John
                lastname: Doe
                password: password123
                username: johndoe
            required:
                - username
                - email
                - firstname
                - lastname
                - password
        LoginRequestBody:
            type: object
            properties:
                password:
                    type: string
                    description: Password of the user
                    example: password123
                    minLength: 8
                username:
                    type: string
                    description: Username of the user
                    example: johndoe
            example:
                password: password123
                username: johndoe
            required:
                - username
                - password
        UpdateUserRequestBody:
            type: object
            properties:
                email:
                    type: string
                    description: Email of the user
                    example: johndoe@example.com
                    format: email
                firstname:
                    type: string
                    description: First name of the user
                    example: John
                lastname:
                    type: string
                    description: Last name of the user
                    example: Doe
                password:
                    type: string
                    description: Password of the user
                    example: password123
                    minLength: 8
                username:
                    type: string
                    description: Username of the user
                    example: johndoe
                    minLength: 1
            example:
                email: johndoe@example.com
                firstname: John
                lastname: Doe
                password: password123
                username: johndoe
            required:
                - username
                - email
                - firstname
                - lastname
        User:
            type: object
            properties:
                email:
                    type: string
                    description: Email of the user
                    example: johndoe@example.com
                    format: email
                firstname:
                    type: string
                    description: First name of the user
                    example: John
                lastname:
                    type: string
                    description: Last name of the user
                    example: Doe
                username:
                    type: string
                    description: Username of the user
                    example: johndoe
                uuid:
                    type: string
                    description: Unique user UUID
                    example: 550e8400-e29b-41d4-a716-446655440000
            description: User representation
            example:
                email: johndoe@example.com
                firstname: John
                lastname: Doe
                username: johndoe
                uuid: 550e8400-e29b-41d4-a716-446655440000
            required:
                - uuid
                - username
                - email
                - firstname
                - lastname
    securitySchemes:
        jwt_header_Authorization:
            type: http
            scheme: bearer
        jwt_query_Authorization:
            type: http
            scheme: bearer
tags:
    - name: users
      description: Service to manage users
