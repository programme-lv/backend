// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions WebSocket client streaming
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package client

import (
	"io"

	"github.com/gorilla/websocket"
	submissions "github.com/programme-lv/backend/gen/submissions"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "submissions" service.
type ConnConfigurer struct {
	StreamSubmissionUpdatesFn goahttp.ConnConfigureFunc
}

// StreamSubmissionUpdatesClientStream implements the
// submissions.StreamSubmissionUpdatesClientStream interface.
type StreamSubmissionUpdatesClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "submissions" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		StreamSubmissionUpdatesFn: fn,
	}
}

// Recv reads instances of "submissions.SubmissionListUpdate" from the
// "streamSubmissionUpdates" endpoint websocket connection.
func (s *StreamSubmissionUpdatesClientStream) Recv() (*submissions.SubmissionListUpdate, error) {
	var (
		rv   *submissions.SubmissionListUpdate
		body StreamSubmissionUpdatesResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	err = ValidateStreamSubmissionUpdatesResponseBody(&body)
	if err != nil {
		return rv, err
	}
	res := NewStreamSubmissionUpdatesSubmissionListUpdateOK(&body)
	return res, nil
}
