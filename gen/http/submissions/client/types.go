// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions HTTP client types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package client

import (
	submissions "github.com/programme-lv/backend/gen/submissions"
	goa "goa.design/goa/v3/pkg"
)

// CreateSubmissionRequestBody is the type of the "submissions" service
// "createSubmission" endpoint HTTP request body.
type CreateSubmissionRequestBody struct {
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// ID of the programming language
	ProgrammingLangID string `form:"programming_lang_id" json:"programming_lang_id" xml:"programming_lang_id"`
	// ID of the task
	TaskCodeID string `form:"task_code_id" json:"task_code_id" xml:"task_code_id"`
}

// CreateSubmissionResponseBody is the type of the "submissions" service
// "createSubmission" endpoint HTTP response body.
type CreateSubmissionResponseBody struct {
	// UUID of the submission
	SubmUUID *string `form:"subm_uuid,omitempty" json:"subm_uuid,omitempty" xml:"subm_uuid,omitempty"`
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Creation time of the submission
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UUID of the evaluation
	EvalUUID *string `form:"eval_uuid,omitempty" json:"eval_uuid,omitempty" xml:"eval_uuid,omitempty"`
	// Status of the current evaluation
	EvalStatus *string `form:"eval_status,omitempty" json:"eval_status,omitempty" xml:"eval_status,omitempty"`
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResultResponseBody `form:"eval_scoring_testgroups,omitempty" json:"eval_scoring_testgroups,omitempty" xml:"eval_scoring_testgroups,omitempty"`
	// Scoring / results of the all tests
	EvalScoringTests *TestsResultResponseBody `form:"eval_scoring_tests,omitempty" json:"eval_scoring_tests,omitempty" xml:"eval_scoring_tests,omitempty"`
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResultResponseBody `form:"eval_scoring_subtasks,omitempty" json:"eval_scoring_subtasks,omitempty" xml:"eval_scoring_subtasks,omitempty"`
	// ID of the programming language
	PLangID *string `form:"p_lang_id,omitempty" json:"p_lang_id,omitempty" xml:"p_lang_id,omitempty"`
	// Display name of the programming language
	PLangDisplayName *string `form:"p_lang_display_name,omitempty" json:"p_lang_display_name,omitempty" xml:"p_lang_display_name,omitempty"`
	// Monaco editor ID for the programming language
	PLangMonacoID *string `form:"p_lang_monaco_id,omitempty" json:"p_lang_monaco_id,omitempty" xml:"p_lang_monaco_id,omitempty"`
	// Name of the task associated with the submission
	TaskName *string `form:"task_name,omitempty" json:"task_name,omitempty" xml:"task_name,omitempty"`
	// Code of the task associated with the submission
	TaskID *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
}

// ListSubmissionsResponseBody is the type of the "submissions" service
// "listSubmissions" endpoint HTTP response body.
type ListSubmissionsResponseBody []*SubmissionResponse

// StreamSubmissionUpdatesResponseBody is the type of the "submissions" service
// "streamSubmissionUpdates" endpoint HTTP response body.
type StreamSubmissionUpdatesResponseBody struct {
	// Submission that was created
	SubmCreated        *SubmissionResponseBody            `form:"subm_created,omitempty" json:"subm_created,omitempty" xml:"subm_created,omitempty"`
	StateUpdate        *SubmissionStateUpdateResponseBody `form:"state_update,omitempty" json:"state_update,omitempty" xml:"state_update,omitempty"`
	TestgroupResUpdate *TestgroupScoreUpdateResponseBody  `form:"testgroup_res_update,omitempty" json:"testgroup_res_update,omitempty" xml:"testgroup_res_update,omitempty"`
}

// GetSubmissionResponseBody is the type of the "submissions" service
// "getSubmission" endpoint HTTP response body.
type GetSubmissionResponseBody struct {
	// UUID of the submission
	SubmUUID *string `form:"subm_uuid,omitempty" json:"subm_uuid,omitempty" xml:"subm_uuid,omitempty"`
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Creation time of the submission
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UUID of the evaluation
	EvalUUID *string `form:"eval_uuid,omitempty" json:"eval_uuid,omitempty" xml:"eval_uuid,omitempty"`
	// Status of the current evaluation
	EvalStatus *string `form:"eval_status,omitempty" json:"eval_status,omitempty" xml:"eval_status,omitempty"`
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResultResponseBody `form:"eval_scoring_testgroups,omitempty" json:"eval_scoring_testgroups,omitempty" xml:"eval_scoring_testgroups,omitempty"`
	// Scoring / results of the all tests
	EvalScoringTests *TestsResultResponseBody `form:"eval_scoring_tests,omitempty" json:"eval_scoring_tests,omitempty" xml:"eval_scoring_tests,omitempty"`
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResultResponseBody `form:"eval_scoring_subtasks,omitempty" json:"eval_scoring_subtasks,omitempty" xml:"eval_scoring_subtasks,omitempty"`
	// ID of the programming language
	PLangID *string `form:"p_lang_id,omitempty" json:"p_lang_id,omitempty" xml:"p_lang_id,omitempty"`
	// Display name of the programming language
	PLangDisplayName *string `form:"p_lang_display_name,omitempty" json:"p_lang_display_name,omitempty" xml:"p_lang_display_name,omitempty"`
	// Monaco editor ID for the programming language
	PLangMonacoID *string `form:"p_lang_monaco_id,omitempty" json:"p_lang_monaco_id,omitempty" xml:"p_lang_monaco_id,omitempty"`
	// Name of the task associated with the submission
	TaskName *string `form:"task_name,omitempty" json:"task_name,omitempty" xml:"task_name,omitempty"`
	// Code of the task associated with the submission
	TaskID *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
}

// ListProgrammingLanguagesResponseBody is the type of the "submissions"
// service "listProgrammingLanguages" endpoint HTTP response body.
type ListProgrammingLanguagesResponseBody []*ProgrammingLangResponse

// TestGroupResultResponseBody is used to define fields on response body types.
type TestGroupResultResponseBody struct {
	// ID of the test group
	TestGroupID *int `form:"test_group_id,omitempty" json:"test_group_id,omitempty" xml:"test_group_id,omitempty"`
	// Score of the test group
	TestGroupScore *int `form:"test_group_score,omitempty" json:"test_group_score,omitempty" xml:"test_group_score,omitempty"`
	// Statement subtask
	StatementSubtask *int `form:"statement_subtask,omitempty" json:"statement_subtask,omitempty" xml:"statement_subtask,omitempty"`
	// Number of accepted tests
	AcceptedTests *int `form:"accepted_tests,omitempty" json:"accepted_tests,omitempty" xml:"accepted_tests,omitempty"`
	// Number of wrong tests
	WrongTests *int `form:"wrong_tests,omitempty" json:"wrong_tests,omitempty" xml:"wrong_tests,omitempty"`
	// Number of untested tests
	UntestedTests *int `form:"untested_tests,omitempty" json:"untested_tests,omitempty" xml:"untested_tests,omitempty"`
}

// TestsResultResponseBody is used to define fields on response body types.
type TestsResultResponseBody struct {
	// Number of accepted tests
	Accepted *int `form:"accepted,omitempty" json:"accepted,omitempty" xml:"accepted,omitempty"`
	// Number of wrong tests
	Wrong *int `form:"wrong,omitempty" json:"wrong,omitempty" xml:"wrong,omitempty"`
	// Number of untested tests
	Untested *int `form:"untested,omitempty" json:"untested,omitempty" xml:"untested,omitempty"`
}

// SubtaskResultResponseBody is used to define fields on response body types.
type SubtaskResultResponseBody struct {
	// ID of the subtask
	SubtaskID *int `form:"subtask_id,omitempty" json:"subtask_id,omitempty" xml:"subtask_id,omitempty"`
	// Score of the subtask
	SubtaskScore *int `form:"subtask_score,omitempty" json:"subtask_score,omitempty" xml:"subtask_score,omitempty"`
	// Number of accepted tests
	AcceptedTests *int `form:"accepted_tests,omitempty" json:"accepted_tests,omitempty" xml:"accepted_tests,omitempty"`
	// Number of wrong tests
	WrongTests *int `form:"wrong_tests,omitempty" json:"wrong_tests,omitempty" xml:"wrong_tests,omitempty"`
	// Number of untested tests
	UntestedTests *int `form:"untested_tests,omitempty" json:"untested_tests,omitempty" xml:"untested_tests,omitempty"`
}

// SubmissionResponse is used to define fields on response body types.
type SubmissionResponse struct {
	// UUID of the submission
	SubmUUID *string `form:"subm_uuid,omitempty" json:"subm_uuid,omitempty" xml:"subm_uuid,omitempty"`
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Creation time of the submission
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UUID of the evaluation
	EvalUUID *string `form:"eval_uuid,omitempty" json:"eval_uuid,omitempty" xml:"eval_uuid,omitempty"`
	// Status of the current evaluation
	EvalStatus *string `form:"eval_status,omitempty" json:"eval_status,omitempty" xml:"eval_status,omitempty"`
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResultResponse `form:"eval_scoring_testgroups,omitempty" json:"eval_scoring_testgroups,omitempty" xml:"eval_scoring_testgroups,omitempty"`
	// Scoring / results of the all tests
	EvalScoringTests *TestsResultResponse `form:"eval_scoring_tests,omitempty" json:"eval_scoring_tests,omitempty" xml:"eval_scoring_tests,omitempty"`
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResultResponse `form:"eval_scoring_subtasks,omitempty" json:"eval_scoring_subtasks,omitempty" xml:"eval_scoring_subtasks,omitempty"`
	// ID of the programming language
	PLangID *string `form:"p_lang_id,omitempty" json:"p_lang_id,omitempty" xml:"p_lang_id,omitempty"`
	// Display name of the programming language
	PLangDisplayName *string `form:"p_lang_display_name,omitempty" json:"p_lang_display_name,omitempty" xml:"p_lang_display_name,omitempty"`
	// Monaco editor ID for the programming language
	PLangMonacoID *string `form:"p_lang_monaco_id,omitempty" json:"p_lang_monaco_id,omitempty" xml:"p_lang_monaco_id,omitempty"`
	// Name of the task associated with the submission
	TaskName *string `form:"task_name,omitempty" json:"task_name,omitempty" xml:"task_name,omitempty"`
	// Code of the task associated with the submission
	TaskID *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
}

// TestGroupResultResponse is used to define fields on response body types.
type TestGroupResultResponse struct {
	// ID of the test group
	TestGroupID *int `form:"test_group_id,omitempty" json:"test_group_id,omitempty" xml:"test_group_id,omitempty"`
	// Score of the test group
	TestGroupScore *int `form:"test_group_score,omitempty" json:"test_group_score,omitempty" xml:"test_group_score,omitempty"`
	// Statement subtask
	StatementSubtask *int `form:"statement_subtask,omitempty" json:"statement_subtask,omitempty" xml:"statement_subtask,omitempty"`
	// Number of accepted tests
	AcceptedTests *int `form:"accepted_tests,omitempty" json:"accepted_tests,omitempty" xml:"accepted_tests,omitempty"`
	// Number of wrong tests
	WrongTests *int `form:"wrong_tests,omitempty" json:"wrong_tests,omitempty" xml:"wrong_tests,omitempty"`
	// Number of untested tests
	UntestedTests *int `form:"untested_tests,omitempty" json:"untested_tests,omitempty" xml:"untested_tests,omitempty"`
}

// TestsResultResponse is used to define fields on response body types.
type TestsResultResponse struct {
	// Number of accepted tests
	Accepted *int `form:"accepted,omitempty" json:"accepted,omitempty" xml:"accepted,omitempty"`
	// Number of wrong tests
	Wrong *int `form:"wrong,omitempty" json:"wrong,omitempty" xml:"wrong,omitempty"`
	// Number of untested tests
	Untested *int `form:"untested,omitempty" json:"untested,omitempty" xml:"untested,omitempty"`
}

// SubtaskResultResponse is used to define fields on response body types.
type SubtaskResultResponse struct {
	// ID of the subtask
	SubtaskID *int `form:"subtask_id,omitempty" json:"subtask_id,omitempty" xml:"subtask_id,omitempty"`
	// Score of the subtask
	SubtaskScore *int `form:"subtask_score,omitempty" json:"subtask_score,omitempty" xml:"subtask_score,omitempty"`
	// Number of accepted tests
	AcceptedTests *int `form:"accepted_tests,omitempty" json:"accepted_tests,omitempty" xml:"accepted_tests,omitempty"`
	// Number of wrong tests
	WrongTests *int `form:"wrong_tests,omitempty" json:"wrong_tests,omitempty" xml:"wrong_tests,omitempty"`
	// Number of untested tests
	UntestedTests *int `form:"untested_tests,omitempty" json:"untested_tests,omitempty" xml:"untested_tests,omitempty"`
}

// SubmissionResponseBody is used to define fields on response body types.
type SubmissionResponseBody struct {
	// UUID of the submission
	SubmUUID *string `form:"subm_uuid,omitempty" json:"subm_uuid,omitempty" xml:"subm_uuid,omitempty"`
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Creation time of the submission
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UUID of the evaluation
	EvalUUID *string `form:"eval_uuid,omitempty" json:"eval_uuid,omitempty" xml:"eval_uuid,omitempty"`
	// Status of the current evaluation
	EvalStatus *string `form:"eval_status,omitempty" json:"eval_status,omitempty" xml:"eval_status,omitempty"`
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResultResponseBody `form:"eval_scoring_testgroups,omitempty" json:"eval_scoring_testgroups,omitempty" xml:"eval_scoring_testgroups,omitempty"`
	// Scoring / results of the all tests
	EvalScoringTests *TestsResultResponseBody `form:"eval_scoring_tests,omitempty" json:"eval_scoring_tests,omitempty" xml:"eval_scoring_tests,omitempty"`
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResultResponseBody `form:"eval_scoring_subtasks,omitempty" json:"eval_scoring_subtasks,omitempty" xml:"eval_scoring_subtasks,omitempty"`
	// ID of the programming language
	PLangID *string `form:"p_lang_id,omitempty" json:"p_lang_id,omitempty" xml:"p_lang_id,omitempty"`
	// Display name of the programming language
	PLangDisplayName *string `form:"p_lang_display_name,omitempty" json:"p_lang_display_name,omitempty" xml:"p_lang_display_name,omitempty"`
	// Monaco editor ID for the programming language
	PLangMonacoID *string `form:"p_lang_monaco_id,omitempty" json:"p_lang_monaco_id,omitempty" xml:"p_lang_monaco_id,omitempty"`
	// Name of the task associated with the submission
	TaskName *string `form:"task_name,omitempty" json:"task_name,omitempty" xml:"task_name,omitempty"`
	// Code of the task associated with the submission
	TaskID *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
}

// SubmissionStateUpdateResponseBody is used to define fields on response body
// types.
type SubmissionStateUpdateResponseBody struct {
	// UUID of the submission
	SubmUUID *string `form:"subm_uuid,omitempty" json:"subm_uuid,omitempty" xml:"subm_uuid,omitempty"`
	// UUID of the evaluation
	EvalUUID *string `form:"eval_uuid,omitempty" json:"eval_uuid,omitempty" xml:"eval_uuid,omitempty"`
	// New state of the submission
	NewState *string `form:"new_state,omitempty" json:"new_state,omitempty" xml:"new_state,omitempty"`
}

// TestgroupScoreUpdateResponseBody is used to define fields on response body
// types.
type TestgroupScoreUpdateResponseBody struct {
	SubmUUID      *string `form:"subm_uuid,omitempty" json:"subm_uuid,omitempty" xml:"subm_uuid,omitempty"`
	EvalUUID      *string `form:"eval_uuid,omitempty" json:"eval_uuid,omitempty" xml:"eval_uuid,omitempty"`
	AcceptedTests *int    `form:"accepted_tests,omitempty" json:"accepted_tests,omitempty" xml:"accepted_tests,omitempty"`
	WrongTests    *int    `form:"wrong_tests,omitempty" json:"wrong_tests,omitempty" xml:"wrong_tests,omitempty"`
	UntestedTests *int    `form:"untested_tests,omitempty" json:"untested_tests,omitempty" xml:"untested_tests,omitempty"`
}

// ProgrammingLangResponse is used to define fields on response body types.
type ProgrammingLangResponse struct {
	// ID of the programming language
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Full name of the programming language
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Default code filename for the language
	CodeFilename *string `form:"codeFilename,omitempty" json:"codeFilename,omitempty" xml:"codeFilename,omitempty"`
	// Compilation command for the language
	CompileCmd *string `form:"compileCmd,omitempty" json:"compileCmd,omitempty" xml:"compileCmd,omitempty"`
	// Execution command for the language
	ExecuteCmd *string `form:"executeCmd,omitempty" json:"executeCmd,omitempty" xml:"executeCmd,omitempty"`
	// Command to get environment version
	EnvVersionCmd *string `form:"envVersionCmd,omitempty" json:"envVersionCmd,omitempty" xml:"envVersionCmd,omitempty"`
	// Hello World example code
	HelloWorldCode *string `form:"helloWorldCode,omitempty" json:"helloWorldCode,omitempty" xml:"helloWorldCode,omitempty"`
	// Monaco editor ID for the programming language
	MonacoID *string `form:"monacoId,omitempty" json:"monacoId,omitempty" xml:"monacoId,omitempty"`
	// Name of the compiled output file
	CompiledFilename *string `form:"compiledFilename,omitempty" json:"compiledFilename,omitempty" xml:"compiledFilename,omitempty"`
	// Whether the language is enabled
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
}

// NewCreateSubmissionRequestBody builds the HTTP request body from the payload
// of the "createSubmission" endpoint of the "submissions" service.
func NewCreateSubmissionRequestBody(p *submissions.CreateSubmissionPayload) *CreateSubmissionRequestBody {
	body := &CreateSubmissionRequestBody{
		Submission:        p.Submission,
		Username:          p.Username,
		ProgrammingLangID: p.ProgrammingLangID,
		TaskCodeID:        p.TaskCodeID,
	}
	return body
}

// NewCreateSubmissionSubmissionCreated builds a "submissions" service
// "createSubmission" endpoint result from a HTTP "Created" response.
func NewCreateSubmissionSubmissionCreated(body *CreateSubmissionResponseBody) *submissions.Submission {
	v := &submissions.Submission{
		SubmUUID:         *body.SubmUUID,
		Submission:       *body.Submission,
		Username:         *body.Username,
		CreatedAt:        *body.CreatedAt,
		EvalUUID:         *body.EvalUUID,
		EvalStatus:       *body.EvalStatus,
		PLangID:          *body.PLangID,
		PLangDisplayName: *body.PLangDisplayName,
		PLangMonacoID:    *body.PLangMonacoID,
		TaskName:         *body.TaskName,
		TaskID:           *body.TaskID,
	}
	if body.EvalScoringTestgroups != nil {
		v.EvalScoringTestgroups = make([]*submissions.TestGroupResult, len(body.EvalScoringTestgroups))
		for i, val := range body.EvalScoringTestgroups {
			v.EvalScoringTestgroups[i] = unmarshalTestGroupResultResponseBodyToSubmissionsTestGroupResult(val)
		}
	}
	if body.EvalScoringTests != nil {
		v.EvalScoringTests = unmarshalTestsResultResponseBodyToSubmissionsTestsResult(body.EvalScoringTests)
	}
	if body.EvalScoringSubtasks != nil {
		v.EvalScoringSubtasks = make([]*submissions.SubtaskResult, len(body.EvalScoringSubtasks))
		for i, val := range body.EvalScoringSubtasks {
			v.EvalScoringSubtasks[i] = unmarshalSubtaskResultResponseBodyToSubmissionsSubtaskResult(val)
		}
	}

	return v
}

// NewCreateSubmissionInternalError builds a submissions service
// createSubmission endpoint InternalError error.
func NewCreateSubmissionInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewCreateSubmissionInvalidSubmissionDetails builds a submissions service
// createSubmission endpoint InvalidSubmissionDetails error.
func NewCreateSubmissionInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewCreateSubmissionNotFound builds a submissions service createSubmission
// endpoint NotFound error.
func NewCreateSubmissionNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewCreateSubmissionUnauthorized builds a submissions service
// createSubmission endpoint unauthorized error.
func NewCreateSubmissionUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// NewListSubmissionsSubmissionOK builds a "submissions" service
// "listSubmissions" endpoint result from a HTTP "OK" response.
func NewListSubmissionsSubmissionOK(body []*SubmissionResponse) []*submissions.Submission {
	v := make([]*submissions.Submission, len(body))
	for i, val := range body {
		v[i] = unmarshalSubmissionResponseToSubmissionsSubmission(val)
	}

	return v
}

// NewListSubmissionsInternalError builds a submissions service listSubmissions
// endpoint InternalError error.
func NewListSubmissionsInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewListSubmissionsInvalidSubmissionDetails builds a submissions service
// listSubmissions endpoint InvalidSubmissionDetails error.
func NewListSubmissionsInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewListSubmissionsNotFound builds a submissions service listSubmissions
// endpoint NotFound error.
func NewListSubmissionsNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewListSubmissionsUnauthorized builds a submissions service listSubmissions
// endpoint unauthorized error.
func NewListSubmissionsUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// NewStreamSubmissionUpdatesSubmissionListUpdateOK builds a "submissions"
// service "streamSubmissionUpdates" endpoint result from a HTTP "OK" response.
func NewStreamSubmissionUpdatesSubmissionListUpdateOK(body *StreamSubmissionUpdatesResponseBody) *submissions.SubmissionListUpdate {
	v := &submissions.SubmissionListUpdate{}
	if body.SubmCreated != nil {
		v.SubmCreated = unmarshalSubmissionResponseBodyToSubmissionsSubmission(body.SubmCreated)
	}
	if body.StateUpdate != nil {
		v.StateUpdate = unmarshalSubmissionStateUpdateResponseBodyToSubmissionsSubmissionStateUpdate(body.StateUpdate)
	}
	if body.TestgroupResUpdate != nil {
		v.TestgroupResUpdate = unmarshalTestgroupScoreUpdateResponseBodyToSubmissionsTestgroupScoreUpdate(body.TestgroupResUpdate)
	}

	return v
}

// NewStreamSubmissionUpdatesInternalError builds a submissions service
// streamSubmissionUpdates endpoint InternalError error.
func NewStreamSubmissionUpdatesInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewStreamSubmissionUpdatesInvalidSubmissionDetails builds a submissions
// service streamSubmissionUpdates endpoint InvalidSubmissionDetails error.
func NewStreamSubmissionUpdatesInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewStreamSubmissionUpdatesNotFound builds a submissions service
// streamSubmissionUpdates endpoint NotFound error.
func NewStreamSubmissionUpdatesNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewStreamSubmissionUpdatesUnauthorized builds a submissions service
// streamSubmissionUpdates endpoint unauthorized error.
func NewStreamSubmissionUpdatesUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// NewGetSubmissionSubmissionOK builds a "submissions" service "getSubmission"
// endpoint result from a HTTP "OK" response.
func NewGetSubmissionSubmissionOK(body *GetSubmissionResponseBody) *submissions.Submission {
	v := &submissions.Submission{
		SubmUUID:         *body.SubmUUID,
		Submission:       *body.Submission,
		Username:         *body.Username,
		CreatedAt:        *body.CreatedAt,
		EvalUUID:         *body.EvalUUID,
		EvalStatus:       *body.EvalStatus,
		PLangID:          *body.PLangID,
		PLangDisplayName: *body.PLangDisplayName,
		PLangMonacoID:    *body.PLangMonacoID,
		TaskName:         *body.TaskName,
		TaskID:           *body.TaskID,
	}
	if body.EvalScoringTestgroups != nil {
		v.EvalScoringTestgroups = make([]*submissions.TestGroupResult, len(body.EvalScoringTestgroups))
		for i, val := range body.EvalScoringTestgroups {
			v.EvalScoringTestgroups[i] = unmarshalTestGroupResultResponseBodyToSubmissionsTestGroupResult(val)
		}
	}
	if body.EvalScoringTests != nil {
		v.EvalScoringTests = unmarshalTestsResultResponseBodyToSubmissionsTestsResult(body.EvalScoringTests)
	}
	if body.EvalScoringSubtasks != nil {
		v.EvalScoringSubtasks = make([]*submissions.SubtaskResult, len(body.EvalScoringSubtasks))
		for i, val := range body.EvalScoringSubtasks {
			v.EvalScoringSubtasks[i] = unmarshalSubtaskResultResponseBodyToSubmissionsSubtaskResult(val)
		}
	}

	return v
}

// NewGetSubmissionInternalError builds a submissions service getSubmission
// endpoint InternalError error.
func NewGetSubmissionInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewGetSubmissionInvalidSubmissionDetails builds a submissions service
// getSubmission endpoint InvalidSubmissionDetails error.
func NewGetSubmissionInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewGetSubmissionNotFound builds a submissions service getSubmission endpoint
// NotFound error.
func NewGetSubmissionNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewGetSubmissionUnauthorized builds a submissions service getSubmission
// endpoint unauthorized error.
func NewGetSubmissionUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// NewListProgrammingLanguagesProgrammingLangOK builds a "submissions" service
// "listProgrammingLanguages" endpoint result from a HTTP "OK" response.
func NewListProgrammingLanguagesProgrammingLangOK(body []*ProgrammingLangResponse) []*submissions.ProgrammingLang {
	v := make([]*submissions.ProgrammingLang, len(body))
	for i, val := range body {
		v[i] = unmarshalProgrammingLangResponseToSubmissionsProgrammingLang(val)
	}

	return v
}

// NewListProgrammingLanguagesInternalError builds a submissions service
// listProgrammingLanguages endpoint InternalError error.
func NewListProgrammingLanguagesInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewListProgrammingLanguagesInvalidSubmissionDetails builds a submissions
// service listProgrammingLanguages endpoint InvalidSubmissionDetails error.
func NewListProgrammingLanguagesInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewListProgrammingLanguagesNotFound builds a submissions service
// listProgrammingLanguages endpoint NotFound error.
func NewListProgrammingLanguagesNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewListProgrammingLanguagesUnauthorized builds a submissions service
// listProgrammingLanguages endpoint unauthorized error.
func NewListProgrammingLanguagesUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// ValidateCreateSubmissionResponseBody runs the validations defined on
// CreateSubmissionResponseBody
func ValidateCreateSubmissionResponseBody(body *CreateSubmissionResponseBody) (err error) {
	if body.SubmUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subm_uuid", "body"))
	}
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.EvalStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_status", "body"))
	}
	if body.PLangID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_id", "body"))
	}
	if body.PLangDisplayName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_display_name", "body"))
	}
	if body.PLangMonacoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_monaco_id", "body"))
	}
	if body.TaskName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_name", "body"))
	}
	if body.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "body"))
	}
	if body.EvalUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_uuid", "body"))
	}
	for _, e := range body.EvalScoringTestgroups {
		if e != nil {
			if err2 := ValidateTestGroupResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.EvalScoringTests != nil {
		if err2 := ValidateTestsResultResponseBody(body.EvalScoringTests); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.EvalScoringSubtasks {
		if e != nil {
			if err2 := ValidateSubtaskResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStreamSubmissionUpdatesResponseBody runs the validations defined on
// StreamSubmissionUpdatesResponseBody
func ValidateStreamSubmissionUpdatesResponseBody(body *StreamSubmissionUpdatesResponseBody) (err error) {
	if body.SubmCreated != nil {
		if err2 := ValidateSubmissionResponseBody(body.SubmCreated); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.StateUpdate != nil {
		if err2 := ValidateSubmissionStateUpdateResponseBody(body.StateUpdate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.TestgroupResUpdate != nil {
		if err2 := ValidateTestgroupScoreUpdateResponseBody(body.TestgroupResUpdate); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetSubmissionResponseBody runs the validations defined on
// GetSubmissionResponseBody
func ValidateGetSubmissionResponseBody(body *GetSubmissionResponseBody) (err error) {
	if body.SubmUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subm_uuid", "body"))
	}
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.EvalStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_status", "body"))
	}
	if body.PLangID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_id", "body"))
	}
	if body.PLangDisplayName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_display_name", "body"))
	}
	if body.PLangMonacoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_monaco_id", "body"))
	}
	if body.TaskName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_name", "body"))
	}
	if body.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "body"))
	}
	if body.EvalUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_uuid", "body"))
	}
	for _, e := range body.EvalScoringTestgroups {
		if e != nil {
			if err2 := ValidateTestGroupResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.EvalScoringTests != nil {
		if err2 := ValidateTestsResultResponseBody(body.EvalScoringTests); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.EvalScoringSubtasks {
		if e != nil {
			if err2 := ValidateSubtaskResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTestGroupResultResponseBody runs the validations defined on
// TestGroupResultResponseBody
func ValidateTestGroupResultResponseBody(body *TestGroupResultResponseBody) (err error) {
	if body.TestGroupID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test_group_id", "body"))
	}
	if body.TestGroupScore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test_group_score", "body"))
	}
	if body.StatementSubtask == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statement_subtask", "body"))
	}
	if body.AcceptedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accepted_tests", "body"))
	}
	if body.WrongTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wrong_tests", "body"))
	}
	if body.UntestedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("untested_tests", "body"))
	}
	return
}

// ValidateTestsResultResponseBody runs the validations defined on
// TestsResultResponseBody
func ValidateTestsResultResponseBody(body *TestsResultResponseBody) (err error) {
	if body.Accepted == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accepted", "body"))
	}
	if body.Wrong == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wrong", "body"))
	}
	if body.Untested == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("untested", "body"))
	}
	return
}

// ValidateSubtaskResultResponseBody runs the validations defined on
// SubtaskResultResponseBody
func ValidateSubtaskResultResponseBody(body *SubtaskResultResponseBody) (err error) {
	if body.SubtaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subtask_id", "body"))
	}
	if body.SubtaskScore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subtask_score", "body"))
	}
	if body.AcceptedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accepted_tests", "body"))
	}
	if body.WrongTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wrong_tests", "body"))
	}
	if body.UntestedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("untested_tests", "body"))
	}
	return
}

// ValidateSubmissionResponse runs the validations defined on SubmissionResponse
func ValidateSubmissionResponse(body *SubmissionResponse) (err error) {
	if body.SubmUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subm_uuid", "body"))
	}
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.EvalStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_status", "body"))
	}
	if body.PLangID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_id", "body"))
	}
	if body.PLangDisplayName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_display_name", "body"))
	}
	if body.PLangMonacoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_monaco_id", "body"))
	}
	if body.TaskName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_name", "body"))
	}
	if body.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "body"))
	}
	if body.EvalUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_uuid", "body"))
	}
	for _, e := range body.EvalScoringTestgroups {
		if e != nil {
			if err2 := ValidateTestGroupResultResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.EvalScoringTests != nil {
		if err2 := ValidateTestsResultResponse(body.EvalScoringTests); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.EvalScoringSubtasks {
		if e != nil {
			if err2 := ValidateSubtaskResultResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTestGroupResultResponse runs the validations defined on
// TestGroupResultResponse
func ValidateTestGroupResultResponse(body *TestGroupResultResponse) (err error) {
	if body.TestGroupID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test_group_id", "body"))
	}
	if body.TestGroupScore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test_group_score", "body"))
	}
	if body.StatementSubtask == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("statement_subtask", "body"))
	}
	if body.AcceptedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accepted_tests", "body"))
	}
	if body.WrongTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wrong_tests", "body"))
	}
	if body.UntestedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("untested_tests", "body"))
	}
	return
}

// ValidateTestsResultResponse runs the validations defined on
// TestsResultResponse
func ValidateTestsResultResponse(body *TestsResultResponse) (err error) {
	if body.Accepted == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accepted", "body"))
	}
	if body.Wrong == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wrong", "body"))
	}
	if body.Untested == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("untested", "body"))
	}
	return
}

// ValidateSubtaskResultResponse runs the validations defined on
// SubtaskResultResponse
func ValidateSubtaskResultResponse(body *SubtaskResultResponse) (err error) {
	if body.SubtaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subtask_id", "body"))
	}
	if body.SubtaskScore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subtask_score", "body"))
	}
	if body.AcceptedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accepted_tests", "body"))
	}
	if body.WrongTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wrong_tests", "body"))
	}
	if body.UntestedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("untested_tests", "body"))
	}
	return
}

// ValidateSubmissionResponseBody runs the validations defined on
// SubmissionResponseBody
func ValidateSubmissionResponseBody(body *SubmissionResponseBody) (err error) {
	if body.SubmUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subm_uuid", "body"))
	}
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.EvalStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_status", "body"))
	}
	if body.PLangID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_id", "body"))
	}
	if body.PLangDisplayName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_display_name", "body"))
	}
	if body.PLangMonacoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("p_lang_monaco_id", "body"))
	}
	if body.TaskName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_name", "body"))
	}
	if body.TaskID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_id", "body"))
	}
	if body.EvalUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_uuid", "body"))
	}
	for _, e := range body.EvalScoringTestgroups {
		if e != nil {
			if err2 := ValidateTestGroupResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.EvalScoringTests != nil {
		if err2 := ValidateTestsResultResponseBody(body.EvalScoringTests); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.EvalScoringSubtasks {
		if e != nil {
			if err2 := ValidateSubtaskResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSubmissionStateUpdateResponseBody runs the validations defined on
// SubmissionStateUpdateResponseBody
func ValidateSubmissionStateUpdateResponseBody(body *SubmissionStateUpdateResponseBody) (err error) {
	if body.SubmUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subm_uuid", "body"))
	}
	if body.NewState == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("new_state", "body"))
	}
	if body.EvalUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_uuid", "body"))
	}
	return
}

// ValidateTestgroupScoreUpdateResponseBody runs the validations defined on
// TestgroupScoreUpdateResponseBody
func ValidateTestgroupScoreUpdateResponseBody(body *TestgroupScoreUpdateResponseBody) (err error) {
	if body.SubmUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subm_uuid", "body"))
	}
	if body.EvalUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("eval_uuid", "body"))
	}
	if body.AcceptedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accepted_tests", "body"))
	}
	if body.WrongTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("wrong_tests", "body"))
	}
	if body.UntestedTests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("untested_tests", "body"))
	}
	return
}

// ValidateProgrammingLangResponse runs the validations defined on
// ProgrammingLangResponse
func ValidateProgrammingLangResponse(body *ProgrammingLangResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fullName", "body"))
	}
	if body.ExecuteCmd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("executeCmd", "body"))
	}
	if body.EnvVersionCmd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("envVersionCmd", "body"))
	}
	if body.HelloWorldCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("helloWorldCode", "body"))
	}
	if body.MonacoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("monacoId", "body"))
	}
	if body.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "body"))
	}
	return
}
