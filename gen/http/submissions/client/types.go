// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions HTTP client types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package client

import (
	submissions "github.com/programme-lv/backend/gen/submissions"
	goa "goa.design/goa/v3/pkg"
)

// CreateSubmissionRequestBody is the type of the "submissions" service
// "createSubmission" endpoint HTTP request body.
type CreateSubmissionRequestBody struct {
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// ID of the programming language
	ProgrammingLangID string `form:"programming_lang_id" json:"programming_lang_id" xml:"programming_lang_id"`
	// ID of the task
	TaskCodeID string `form:"task_code_id" json:"task_code_id" xml:"task_code_id"`
}

// CreateSubmissionResponseBody is the type of the "submissions" service
// "createSubmission" endpoint HTTP response body.
type CreateSubmissionResponseBody struct {
	// UUID of the submission
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Creation date of the submission
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Evaluation of the submission
	Evaluation *EvaluationResponseBody `form:"evaluation,omitempty" json:"evaluation,omitempty" xml:"evaluation,omitempty"`
	// Programming language of the submission
	Language *SubmProgrammingLangResponseBody `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Task associated with the submission
	Task *SubmTaskResponseBody `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// ListSubmissionsResponseBody is the type of the "submissions" service
// "listSubmissions" endpoint HTTP response body.
type ListSubmissionsResponseBody []*SubmissionResponse

// GetSubmissionResponseBody is the type of the "submissions" service
// "getSubmission" endpoint HTTP response body.
type GetSubmissionResponseBody struct {
	// UUID of the submission
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Creation date of the submission
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Evaluation of the submission
	Evaluation *EvaluationResponseBody `form:"evaluation,omitempty" json:"evaluation,omitempty" xml:"evaluation,omitempty"`
	// Programming language of the submission
	Language *SubmProgrammingLangResponseBody `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Task associated with the submission
	Task *SubmTaskResponseBody `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// ListProgrammingLanguagesResponseBody is the type of the "submissions"
// service "listProgrammingLanguages" endpoint HTTP response body.
type ListProgrammingLanguagesResponseBody []*ProgrammingLangResponse

// EvaluationResponseBody is used to define fields on response body types.
type EvaluationResponseBody struct {
	// UUID of the evaluation
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the evaluation
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Received score of the evaluation
	ReceivedScore *int `form:"receivedScore,omitempty" json:"receivedScore,omitempty" xml:"receivedScore,omitempty"`
	// Possible score of the evaluation
	PossibleScore *int `form:"possibleScore,omitempty" json:"possibleScore,omitempty" xml:"possibleScore,omitempty"`
}

// SubmProgrammingLangResponseBody is used to define fields on response body
// types.
type SubmProgrammingLangResponseBody struct {
	// ID of the programming language
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Full name of the programming language
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Monaco editor ID for the programming language
	MonacoID *string `form:"monacoId,omitempty" json:"monacoId,omitempty" xml:"monacoId,omitempty"`
}

// SubmTaskResponseBody is used to define fields on response body types.
type SubmTaskResponseBody struct {
	// Name of the task
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Code of the task
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
}

// SubmissionResponse is used to define fields on response body types.
type SubmissionResponse struct {
	// UUID of the submission
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Creation date of the submission
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Evaluation of the submission
	Evaluation *EvaluationResponse `form:"evaluation,omitempty" json:"evaluation,omitempty" xml:"evaluation,omitempty"`
	// Programming language of the submission
	Language *SubmProgrammingLangResponse `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Task associated with the submission
	Task *SubmTaskResponse `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// EvaluationResponse is used to define fields on response body types.
type EvaluationResponse struct {
	// UUID of the evaluation
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Status of the evaluation
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Received score of the evaluation
	ReceivedScore *int `form:"receivedScore,omitempty" json:"receivedScore,omitempty" xml:"receivedScore,omitempty"`
	// Possible score of the evaluation
	PossibleScore *int `form:"possibleScore,omitempty" json:"possibleScore,omitempty" xml:"possibleScore,omitempty"`
}

// SubmProgrammingLangResponse is used to define fields on response body types.
type SubmProgrammingLangResponse struct {
	// ID of the programming language
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Full name of the programming language
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Monaco editor ID for the programming language
	MonacoID *string `form:"monacoId,omitempty" json:"monacoId,omitempty" xml:"monacoId,omitempty"`
}

// SubmTaskResponse is used to define fields on response body types.
type SubmTaskResponse struct {
	// Name of the task
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Code of the task
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
}

// ProgrammingLangResponse is used to define fields on response body types.
type ProgrammingLangResponse struct {
	// ID of the programming language
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Full name of the programming language
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Default code filename for the language
	CodeFilename *string `form:"codeFilename,omitempty" json:"codeFilename,omitempty" xml:"codeFilename,omitempty"`
	// Compilation command for the language
	CompileCmd *string `form:"compileCmd,omitempty" json:"compileCmd,omitempty" xml:"compileCmd,omitempty"`
	// Execution command for the language
	ExecuteCmd *string `form:"executeCmd,omitempty" json:"executeCmd,omitempty" xml:"executeCmd,omitempty"`
	// Command to get environment version
	EnvVersionCmd *string `form:"envVersionCmd,omitempty" json:"envVersionCmd,omitempty" xml:"envVersionCmd,omitempty"`
	// Hello World example code
	HelloWorldCode *string `form:"helloWorldCode,omitempty" json:"helloWorldCode,omitempty" xml:"helloWorldCode,omitempty"`
	// Monaco editor ID for the programming language
	MonacoID *string `form:"monacoId,omitempty" json:"monacoId,omitempty" xml:"monacoId,omitempty"`
	// Name of the compiled output file
	CompiledFilename *string `form:"compiledFilename,omitempty" json:"compiledFilename,omitempty" xml:"compiledFilename,omitempty"`
	// Whether the language is enabled
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty" xml:"enabled,omitempty"`
}

// NewCreateSubmissionRequestBody builds the HTTP request body from the payload
// of the "createSubmission" endpoint of the "submissions" service.
func NewCreateSubmissionRequestBody(p *submissions.CreateSubmissionPayload) *CreateSubmissionRequestBody {
	body := &CreateSubmissionRequestBody{
		Submission:        p.Submission,
		Username:          p.Username,
		ProgrammingLangID: p.ProgrammingLangID,
		TaskCodeID:        p.TaskCodeID,
	}
	return body
}

// NewCreateSubmissionSubmissionCreated builds a "submissions" service
// "createSubmission" endpoint result from a HTTP "Created" response.
func NewCreateSubmissionSubmissionCreated(body *CreateSubmissionResponseBody) *submissions.Submission {
	v := &submissions.Submission{
		UUID:       *body.UUID,
		Submission: *body.Submission,
		Username:   *body.Username,
		CreatedAt:  *body.CreatedAt,
	}
	v.Evaluation = unmarshalEvaluationResponseBodyToSubmissionsEvaluation(body.Evaluation)
	v.Language = unmarshalSubmProgrammingLangResponseBodyToSubmissionsSubmProgrammingLang(body.Language)
	v.Task = unmarshalSubmTaskResponseBodyToSubmissionsSubmTask(body.Task)

	return v
}

// NewCreateSubmissionInternalError builds a submissions service
// createSubmission endpoint InternalError error.
func NewCreateSubmissionInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewCreateSubmissionInvalidSubmissionDetails builds a submissions service
// createSubmission endpoint InvalidSubmissionDetails error.
func NewCreateSubmissionInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewCreateSubmissionNotFound builds a submissions service createSubmission
// endpoint NotFound error.
func NewCreateSubmissionNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewCreateSubmissionUnauthorized builds a submissions service
// createSubmission endpoint unauthorized error.
func NewCreateSubmissionUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// NewListSubmissionsSubmissionOK builds a "submissions" service
// "listSubmissions" endpoint result from a HTTP "OK" response.
func NewListSubmissionsSubmissionOK(body []*SubmissionResponse) []*submissions.Submission {
	v := make([]*submissions.Submission, len(body))
	for i, val := range body {
		v[i] = unmarshalSubmissionResponseToSubmissionsSubmission(val)
	}

	return v
}

// NewListSubmissionsInternalError builds a submissions service listSubmissions
// endpoint InternalError error.
func NewListSubmissionsInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewListSubmissionsInvalidSubmissionDetails builds a submissions service
// listSubmissions endpoint InvalidSubmissionDetails error.
func NewListSubmissionsInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewListSubmissionsNotFound builds a submissions service listSubmissions
// endpoint NotFound error.
func NewListSubmissionsNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewListSubmissionsUnauthorized builds a submissions service listSubmissions
// endpoint unauthorized error.
func NewListSubmissionsUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// NewGetSubmissionSubmissionOK builds a "submissions" service "getSubmission"
// endpoint result from a HTTP "OK" response.
func NewGetSubmissionSubmissionOK(body *GetSubmissionResponseBody) *submissions.Submission {
	v := &submissions.Submission{
		UUID:       *body.UUID,
		Submission: *body.Submission,
		Username:   *body.Username,
		CreatedAt:  *body.CreatedAt,
	}
	v.Evaluation = unmarshalEvaluationResponseBodyToSubmissionsEvaluation(body.Evaluation)
	v.Language = unmarshalSubmProgrammingLangResponseBodyToSubmissionsSubmProgrammingLang(body.Language)
	v.Task = unmarshalSubmTaskResponseBodyToSubmissionsSubmTask(body.Task)

	return v
}

// NewGetSubmissionInternalError builds a submissions service getSubmission
// endpoint InternalError error.
func NewGetSubmissionInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewGetSubmissionInvalidSubmissionDetails builds a submissions service
// getSubmission endpoint InvalidSubmissionDetails error.
func NewGetSubmissionInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewGetSubmissionNotFound builds a submissions service getSubmission endpoint
// NotFound error.
func NewGetSubmissionNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewGetSubmissionUnauthorized builds a submissions service getSubmission
// endpoint unauthorized error.
func NewGetSubmissionUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// NewListProgrammingLanguagesProgrammingLangOK builds a "submissions" service
// "listProgrammingLanguages" endpoint result from a HTTP "OK" response.
func NewListProgrammingLanguagesProgrammingLangOK(body []*ProgrammingLangResponse) []*submissions.ProgrammingLang {
	v := make([]*submissions.ProgrammingLang, len(body))
	for i, val := range body {
		v[i] = unmarshalProgrammingLangResponseToSubmissionsProgrammingLang(val)
	}

	return v
}

// NewListProgrammingLanguagesInternalError builds a submissions service
// listProgrammingLanguages endpoint InternalError error.
func NewListProgrammingLanguagesInternalError(body string) submissions.InternalError {
	v := submissions.InternalError(body)

	return v
}

// NewListProgrammingLanguagesInvalidSubmissionDetails builds a submissions
// service listProgrammingLanguages endpoint InvalidSubmissionDetails error.
func NewListProgrammingLanguagesInvalidSubmissionDetails(body string) submissions.InvalidSubmissionDetails {
	v := submissions.InvalidSubmissionDetails(body)

	return v
}

// NewListProgrammingLanguagesNotFound builds a submissions service
// listProgrammingLanguages endpoint NotFound error.
func NewListProgrammingLanguagesNotFound(body string) submissions.NotFound {
	v := submissions.NotFound(body)

	return v
}

// NewListProgrammingLanguagesUnauthorized builds a submissions service
// listProgrammingLanguages endpoint unauthorized error.
func NewListProgrammingLanguagesUnauthorized(body string) submissions.Unauthorized {
	v := submissions.Unauthorized(body)

	return v
}

// ValidateCreateSubmissionResponseBody runs the validations defined on
// CreateSubmissionResponseBody
func ValidateCreateSubmissionResponseBody(body *CreateSubmissionResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.Evaluation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("evaluation", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Task == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Evaluation != nil {
		if err2 := ValidateEvaluationResponseBody(body.Evaluation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Language != nil {
		if err2 := ValidateSubmProgrammingLangResponseBody(body.Language); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Task != nil {
		if err2 := ValidateSubmTaskResponseBody(body.Task); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetSubmissionResponseBody runs the validations defined on
// GetSubmissionResponseBody
func ValidateGetSubmissionResponseBody(body *GetSubmissionResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.Evaluation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("evaluation", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Task == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Evaluation != nil {
		if err2 := ValidateEvaluationResponseBody(body.Evaluation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Language != nil {
		if err2 := ValidateSubmProgrammingLangResponseBody(body.Language); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Task != nil {
		if err2 := ValidateSubmTaskResponseBody(body.Task); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEvaluationResponseBody runs the validations defined on
// EvaluationResponseBody
func ValidateEvaluationResponseBody(body *EvaluationResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ReceivedScore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("receivedScore", "body"))
	}
	if body.PossibleScore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("possibleScore", "body"))
	}
	return
}

// ValidateSubmProgrammingLangResponseBody runs the validations defined on
// SubmProgrammingLangResponseBody
func ValidateSubmProgrammingLangResponseBody(body *SubmProgrammingLangResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fullName", "body"))
	}
	if body.MonacoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("monacoId", "body"))
	}
	return
}

// ValidateSubmTaskResponseBody runs the validations defined on
// SubmTaskResponseBody
func ValidateSubmTaskResponseBody(body *SubmTaskResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	return
}

// ValidateSubmissionResponse runs the validations defined on SubmissionResponse
func ValidateSubmissionResponse(body *SubmissionResponse) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.Evaluation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("evaluation", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Task == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Evaluation != nil {
		if err2 := ValidateEvaluationResponse(body.Evaluation); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Language != nil {
		if err2 := ValidateSubmProgrammingLangResponse(body.Language); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Task != nil {
		if err2 := ValidateSubmTaskResponse(body.Task); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEvaluationResponse runs the validations defined on EvaluationResponse
func ValidateEvaluationResponse(body *EvaluationResponse) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.ReceivedScore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("receivedScore", "body"))
	}
	if body.PossibleScore == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("possibleScore", "body"))
	}
	return
}

// ValidateSubmProgrammingLangResponse runs the validations defined on
// SubmProgrammingLangResponse
func ValidateSubmProgrammingLangResponse(body *SubmProgrammingLangResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fullName", "body"))
	}
	if body.MonacoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("monacoId", "body"))
	}
	return
}

// ValidateSubmTaskResponse runs the validations defined on SubmTaskResponse
func ValidateSubmTaskResponse(body *SubmTaskResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	return
}

// ValidateProgrammingLangResponse runs the validations defined on
// ProgrammingLangResponse
func ValidateProgrammingLangResponse(body *ProgrammingLangResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.FullName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fullName", "body"))
	}
	if body.ExecuteCmd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("executeCmd", "body"))
	}
	if body.EnvVersionCmd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("envVersionCmd", "body"))
	}
	if body.HelloWorldCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("helloWorldCode", "body"))
	}
	if body.MonacoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("monacoId", "body"))
	}
	if body.Enabled == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enabled", "body"))
	}
	return
}
