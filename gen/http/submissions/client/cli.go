// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions HTTP client CLI support package
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package client

import (
	"encoding/json"
	"fmt"

	submissions "github.com/programme-lv/backend/gen/submissions"
)

// BuildCreateSubmissionPayload builds the payload for the submissions
// createSubmission endpoint from CLI flags.
func BuildCreateSubmissionPayload(submissionsCreateSubmissionBody string, submissionsCreateSubmissionToken string) (*submissions.CreateSubmissionPayload, error) {
	var err error
	var body CreateSubmissionRequestBody
	{
		err = json.Unmarshal([]byte(submissionsCreateSubmissionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"programming_lang_id\": \"go\",\n      \"submission\": \"print(factorial(5))\",\n      \"task_code_id\": \"kvadrputekl\",\n      \"username\": \"coder123\"\n   }'")
		}
	}
	var token string
	{
		token = submissionsCreateSubmissionToken
	}
	v := &submissions.CreateSubmissionPayload{
		Submission:        body.Submission,
		Username:          body.Username,
		ProgrammingLangID: body.ProgrammingLangID,
		TaskCodeID:        body.TaskCodeID,
	}
	v.Token = token

	return v, nil
}

// BuildGetSubmissionPayload builds the payload for the submissions
// getSubmission endpoint from CLI flags.
func BuildGetSubmissionPayload(submissionsGetSubmissionUUID string) (*submissions.GetSubmissionPayload, error) {
	var uuid string
	{
		uuid = submissionsGetSubmissionUUID
	}
	v := &submissions.GetSubmissionPayload{}
	v.UUID = uuid

	return v, nil
}
