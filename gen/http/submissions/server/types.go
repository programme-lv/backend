// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions HTTP server types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	submissions "github.com/programme-lv/backend/gen/submissions"
	goa "goa.design/goa/v3/pkg"
)

// CreateSubmissionRequestBody is the type of the "submissions" service
// "createSubmission" endpoint HTTP request body.
type CreateSubmissionRequestBody struct {
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// ID of the programming language
	ProgrammingLangID *string `form:"programming_lang_id,omitempty" json:"programming_lang_id,omitempty" xml:"programming_lang_id,omitempty"`
	// ID of the task
	TaskCodeID *string `form:"task_code_id,omitempty" json:"task_code_id,omitempty" xml:"task_code_id,omitempty"`
}

// CreateSubmissionResponseBody is the type of the "submissions" service
// "createSubmission" endpoint HTTP response body.
type CreateSubmissionResponseBody struct {
	// UUID of the submission
	SubmUUID string `form:"subm_uuid" json:"subm_uuid" xml:"subm_uuid"`
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// Creation time of the submission
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// UUID of the evaluation
	EvalUUID string `form:"eval_uuid" json:"eval_uuid" xml:"eval_uuid"`
	// Status of the current evaluation
	EvalStatus string `form:"eval_status" json:"eval_status" xml:"eval_status"`
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResultResponseBody `form:"eval_scoring_testgroups,omitempty" json:"eval_scoring_testgroups,omitempty" xml:"eval_scoring_testgroups,omitempty"`
	// Scoring / results of the all tests
	EvalScoringTests *TestsResultResponseBody `form:"eval_scoring_tests,omitempty" json:"eval_scoring_tests,omitempty" xml:"eval_scoring_tests,omitempty"`
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResultResponseBody `form:"eval_scoring_subtasks,omitempty" json:"eval_scoring_subtasks,omitempty" xml:"eval_scoring_subtasks,omitempty"`
	// ID of the programming language
	PLangID string `form:"p_lang_id" json:"p_lang_id" xml:"p_lang_id"`
	// Display name of the programming language
	PLangDisplayName string `form:"p_lang_display_name" json:"p_lang_display_name" xml:"p_lang_display_name"`
	// Monaco editor ID for the programming language
	PLangMonacoID string `form:"p_lang_monaco_id" json:"p_lang_monaco_id" xml:"p_lang_monaco_id"`
	// Name of the task associated with the submission
	TaskName string `form:"task_name" json:"task_name" xml:"task_name"`
	// Code of the task associated with the submission
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
}

// ListSubmissionsResponseBody is the type of the "submissions" service
// "listSubmissions" endpoint HTTP response body.
type ListSubmissionsResponseBody []*SubmissionResponse

// StreamSubmissionUpdatesResponseBody is the type of the "submissions" service
// "streamSubmissionUpdates" endpoint HTTP response body.
type StreamSubmissionUpdatesResponseBody struct {
	// Submission that was created
	SubmCreated        *SubmissionResponseBody            `form:"subm_created,omitempty" json:"subm_created,omitempty" xml:"subm_created,omitempty"`
	StateUpdate        *SubmissionStateUpdateResponseBody `form:"state_update,omitempty" json:"state_update,omitempty" xml:"state_update,omitempty"`
	TestgroupResUpdate *TestgroupScoreUpdateResponseBody  `form:"testgroup_res_update,omitempty" json:"testgroup_res_update,omitempty" xml:"testgroup_res_update,omitempty"`
}

// GetSubmissionResponseBody is the type of the "submissions" service
// "getSubmission" endpoint HTTP response body.
type GetSubmissionResponseBody struct {
	// UUID of the submission
	SubmUUID string `form:"subm_uuid" json:"subm_uuid" xml:"subm_uuid"`
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// Creation time of the submission
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// UUID of the evaluation
	EvalUUID string `form:"eval_uuid" json:"eval_uuid" xml:"eval_uuid"`
	// Status of the current evaluation
	EvalStatus string `form:"eval_status" json:"eval_status" xml:"eval_status"`
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResultResponseBody `form:"eval_scoring_testgroups,omitempty" json:"eval_scoring_testgroups,omitempty" xml:"eval_scoring_testgroups,omitempty"`
	// Scoring / results of the all tests
	EvalScoringTests *TestsResultResponseBody `form:"eval_scoring_tests,omitempty" json:"eval_scoring_tests,omitempty" xml:"eval_scoring_tests,omitempty"`
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResultResponseBody `form:"eval_scoring_subtasks,omitempty" json:"eval_scoring_subtasks,omitempty" xml:"eval_scoring_subtasks,omitempty"`
	// ID of the programming language
	PLangID string `form:"p_lang_id" json:"p_lang_id" xml:"p_lang_id"`
	// Display name of the programming language
	PLangDisplayName string `form:"p_lang_display_name" json:"p_lang_display_name" xml:"p_lang_display_name"`
	// Monaco editor ID for the programming language
	PLangMonacoID string `form:"p_lang_monaco_id" json:"p_lang_monaco_id" xml:"p_lang_monaco_id"`
	// Name of the task associated with the submission
	TaskName string `form:"task_name" json:"task_name" xml:"task_name"`
	// Code of the task associated with the submission
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
}

// ListProgrammingLanguagesResponseBody is the type of the "submissions"
// service "listProgrammingLanguages" endpoint HTTP response body.
type ListProgrammingLanguagesResponseBody []*ProgrammingLangResponse

// TestGroupResultResponseBody is used to define fields on response body types.
type TestGroupResultResponseBody struct {
	// ID of the test group
	TestGroupID int `form:"test_group_id" json:"test_group_id" xml:"test_group_id"`
	// Score of the test group
	TestGroupScore int `form:"test_group_score" json:"test_group_score" xml:"test_group_score"`
	// Statement subtask
	StatementSubtask int `form:"statement_subtask" json:"statement_subtask" xml:"statement_subtask"`
	// Number of accepted tests
	AcceptedTests int `form:"accepted_tests" json:"accepted_tests" xml:"accepted_tests"`
	// Number of wrong tests
	WrongTests int `form:"wrong_tests" json:"wrong_tests" xml:"wrong_tests"`
	// Number of untested tests
	UntestedTests int `form:"untested_tests" json:"untested_tests" xml:"untested_tests"`
}

// TestsResultResponseBody is used to define fields on response body types.
type TestsResultResponseBody struct {
	// Number of accepted tests
	Accepted int `form:"accepted" json:"accepted" xml:"accepted"`
	// Number of wrong tests
	Wrong int `form:"wrong" json:"wrong" xml:"wrong"`
	// Number of untested tests
	Untested int `form:"untested" json:"untested" xml:"untested"`
}

// SubtaskResultResponseBody is used to define fields on response body types.
type SubtaskResultResponseBody struct {
	// ID of the subtask
	SubtaskID int `form:"subtask_id" json:"subtask_id" xml:"subtask_id"`
	// Score of the subtask
	SubtaskScore int `form:"subtask_score" json:"subtask_score" xml:"subtask_score"`
	// Number of accepted tests
	AcceptedTests int `form:"accepted_tests" json:"accepted_tests" xml:"accepted_tests"`
	// Number of wrong tests
	WrongTests int `form:"wrong_tests" json:"wrong_tests" xml:"wrong_tests"`
	// Number of untested tests
	UntestedTests int `form:"untested_tests" json:"untested_tests" xml:"untested_tests"`
}

// SubmissionResponse is used to define fields on response body types.
type SubmissionResponse struct {
	// UUID of the submission
	SubmUUID string `form:"subm_uuid" json:"subm_uuid" xml:"subm_uuid"`
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// Creation time of the submission
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// UUID of the evaluation
	EvalUUID string `form:"eval_uuid" json:"eval_uuid" xml:"eval_uuid"`
	// Status of the current evaluation
	EvalStatus string `form:"eval_status" json:"eval_status" xml:"eval_status"`
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResultResponse `form:"eval_scoring_testgroups,omitempty" json:"eval_scoring_testgroups,omitempty" xml:"eval_scoring_testgroups,omitempty"`
	// Scoring / results of the all tests
	EvalScoringTests *TestsResultResponse `form:"eval_scoring_tests,omitempty" json:"eval_scoring_tests,omitempty" xml:"eval_scoring_tests,omitempty"`
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResultResponse `form:"eval_scoring_subtasks,omitempty" json:"eval_scoring_subtasks,omitempty" xml:"eval_scoring_subtasks,omitempty"`
	// ID of the programming language
	PLangID string `form:"p_lang_id" json:"p_lang_id" xml:"p_lang_id"`
	// Display name of the programming language
	PLangDisplayName string `form:"p_lang_display_name" json:"p_lang_display_name" xml:"p_lang_display_name"`
	// Monaco editor ID for the programming language
	PLangMonacoID string `form:"p_lang_monaco_id" json:"p_lang_monaco_id" xml:"p_lang_monaco_id"`
	// Name of the task associated with the submission
	TaskName string `form:"task_name" json:"task_name" xml:"task_name"`
	// Code of the task associated with the submission
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
}

// TestGroupResultResponse is used to define fields on response body types.
type TestGroupResultResponse struct {
	// ID of the test group
	TestGroupID int `form:"test_group_id" json:"test_group_id" xml:"test_group_id"`
	// Score of the test group
	TestGroupScore int `form:"test_group_score" json:"test_group_score" xml:"test_group_score"`
	// Statement subtask
	StatementSubtask int `form:"statement_subtask" json:"statement_subtask" xml:"statement_subtask"`
	// Number of accepted tests
	AcceptedTests int `form:"accepted_tests" json:"accepted_tests" xml:"accepted_tests"`
	// Number of wrong tests
	WrongTests int `form:"wrong_tests" json:"wrong_tests" xml:"wrong_tests"`
	// Number of untested tests
	UntestedTests int `form:"untested_tests" json:"untested_tests" xml:"untested_tests"`
}

// TestsResultResponse is used to define fields on response body types.
type TestsResultResponse struct {
	// Number of accepted tests
	Accepted int `form:"accepted" json:"accepted" xml:"accepted"`
	// Number of wrong tests
	Wrong int `form:"wrong" json:"wrong" xml:"wrong"`
	// Number of untested tests
	Untested int `form:"untested" json:"untested" xml:"untested"`
}

// SubtaskResultResponse is used to define fields on response body types.
type SubtaskResultResponse struct {
	// ID of the subtask
	SubtaskID int `form:"subtask_id" json:"subtask_id" xml:"subtask_id"`
	// Score of the subtask
	SubtaskScore int `form:"subtask_score" json:"subtask_score" xml:"subtask_score"`
	// Number of accepted tests
	AcceptedTests int `form:"accepted_tests" json:"accepted_tests" xml:"accepted_tests"`
	// Number of wrong tests
	WrongTests int `form:"wrong_tests" json:"wrong_tests" xml:"wrong_tests"`
	// Number of untested tests
	UntestedTests int `form:"untested_tests" json:"untested_tests" xml:"untested_tests"`
}

// SubmissionResponseBody is used to define fields on response body types.
type SubmissionResponseBody struct {
	// UUID of the submission
	SubmUUID string `form:"subm_uuid" json:"subm_uuid" xml:"subm_uuid"`
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// Creation time of the submission
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// UUID of the evaluation
	EvalUUID string `form:"eval_uuid" json:"eval_uuid" xml:"eval_uuid"`
	// Status of the current evaluation
	EvalStatus string `form:"eval_status" json:"eval_status" xml:"eval_status"`
	// Scoring / results of the test groups
	EvalScoringTestgroups []*TestGroupResultResponseBody `form:"eval_scoring_testgroups,omitempty" json:"eval_scoring_testgroups,omitempty" xml:"eval_scoring_testgroups,omitempty"`
	// Scoring / results of the all tests
	EvalScoringTests *TestsResultResponseBody `form:"eval_scoring_tests,omitempty" json:"eval_scoring_tests,omitempty" xml:"eval_scoring_tests,omitempty"`
	// Scoring / results of the subtasks
	EvalScoringSubtasks []*SubtaskResultResponseBody `form:"eval_scoring_subtasks,omitempty" json:"eval_scoring_subtasks,omitempty" xml:"eval_scoring_subtasks,omitempty"`
	// ID of the programming language
	PLangID string `form:"p_lang_id" json:"p_lang_id" xml:"p_lang_id"`
	// Display name of the programming language
	PLangDisplayName string `form:"p_lang_display_name" json:"p_lang_display_name" xml:"p_lang_display_name"`
	// Monaco editor ID for the programming language
	PLangMonacoID string `form:"p_lang_monaco_id" json:"p_lang_monaco_id" xml:"p_lang_monaco_id"`
	// Name of the task associated with the submission
	TaskName string `form:"task_name" json:"task_name" xml:"task_name"`
	// Code of the task associated with the submission
	TaskID string `form:"task_id" json:"task_id" xml:"task_id"`
}

// SubmissionStateUpdateResponseBody is used to define fields on response body
// types.
type SubmissionStateUpdateResponseBody struct {
	// UUID of the submission
	SubmUUID string `form:"subm_uuid" json:"subm_uuid" xml:"subm_uuid"`
	// UUID of the evaluation
	EvalUUID string `form:"eval_uuid" json:"eval_uuid" xml:"eval_uuid"`
	// New state of the submission
	NewState string `form:"new_state" json:"new_state" xml:"new_state"`
}

// TestgroupScoreUpdateResponseBody is used to define fields on response body
// types.
type TestgroupScoreUpdateResponseBody struct {
	SubmUUID      string `form:"subm_uuid" json:"subm_uuid" xml:"subm_uuid"`
	EvalUUID      string `form:"eval_uuid" json:"eval_uuid" xml:"eval_uuid"`
	AcceptedTests int    `form:"accepted_tests" json:"accepted_tests" xml:"accepted_tests"`
	WrongTests    int    `form:"wrong_tests" json:"wrong_tests" xml:"wrong_tests"`
	UntestedTests int    `form:"untested_tests" json:"untested_tests" xml:"untested_tests"`
}

// ProgrammingLangResponse is used to define fields on response body types.
type ProgrammingLangResponse struct {
	// ID of the programming language
	ID string `form:"id" json:"id" xml:"id"`
	// Full name of the programming language
	FullName string `form:"fullName" json:"fullName" xml:"fullName"`
	// Default code filename for the language
	CodeFilename *string `form:"codeFilename,omitempty" json:"codeFilename,omitempty" xml:"codeFilename,omitempty"`
	// Compilation command for the language
	CompileCmd *string `form:"compileCmd,omitempty" json:"compileCmd,omitempty" xml:"compileCmd,omitempty"`
	// Execution command for the language
	ExecuteCmd string `form:"executeCmd" json:"executeCmd" xml:"executeCmd"`
	// Command to get environment version
	EnvVersionCmd string `form:"envVersionCmd" json:"envVersionCmd" xml:"envVersionCmd"`
	// Hello World example code
	HelloWorldCode string `form:"helloWorldCode" json:"helloWorldCode" xml:"helloWorldCode"`
	// Monaco editor ID for the programming language
	MonacoID string `form:"monacoId" json:"monacoId" xml:"monacoId"`
	// Name of the compiled output file
	CompiledFilename *string `form:"compiledFilename,omitempty" json:"compiledFilename,omitempty" xml:"compiledFilename,omitempty"`
	// Whether the language is enabled
	Enabled bool `form:"enabled" json:"enabled" xml:"enabled"`
}

// NewCreateSubmissionResponseBody builds the HTTP response body from the
// result of the "createSubmission" endpoint of the "submissions" service.
func NewCreateSubmissionResponseBody(res *submissions.Submission) *CreateSubmissionResponseBody {
	body := &CreateSubmissionResponseBody{
		SubmUUID:         res.SubmUUID,
		Submission:       res.Submission,
		Username:         res.Username,
		CreatedAt:        res.CreatedAt,
		EvalUUID:         res.EvalUUID,
		EvalStatus:       res.EvalStatus,
		PLangID:          res.PLangID,
		PLangDisplayName: res.PLangDisplayName,
		PLangMonacoID:    res.PLangMonacoID,
		TaskName:         res.TaskName,
		TaskID:           res.TaskID,
	}
	if res.EvalScoringTestgroups != nil {
		body.EvalScoringTestgroups = make([]*TestGroupResultResponseBody, len(res.EvalScoringTestgroups))
		for i, val := range res.EvalScoringTestgroups {
			body.EvalScoringTestgroups[i] = marshalSubmissionsTestGroupResultToTestGroupResultResponseBody(val)
		}
	}
	if res.EvalScoringTests != nil {
		body.EvalScoringTests = marshalSubmissionsTestsResultToTestsResultResponseBody(res.EvalScoringTests)
	}
	if res.EvalScoringSubtasks != nil {
		body.EvalScoringSubtasks = make([]*SubtaskResultResponseBody, len(res.EvalScoringSubtasks))
		for i, val := range res.EvalScoringSubtasks {
			body.EvalScoringSubtasks[i] = marshalSubmissionsSubtaskResultToSubtaskResultResponseBody(val)
		}
	}
	return body
}

// NewListSubmissionsResponseBody builds the HTTP response body from the result
// of the "listSubmissions" endpoint of the "submissions" service.
func NewListSubmissionsResponseBody(res []*submissions.Submission) ListSubmissionsResponseBody {
	body := make([]*SubmissionResponse, len(res))
	for i, val := range res {
		body[i] = marshalSubmissionsSubmissionToSubmissionResponse(val)
	}
	return body
}

// NewStreamSubmissionUpdatesResponseBody builds the HTTP response body from
// the result of the "streamSubmissionUpdates" endpoint of the "submissions"
// service.
func NewStreamSubmissionUpdatesResponseBody(res *submissions.SubmissionListUpdate) *StreamSubmissionUpdatesResponseBody {
	body := &StreamSubmissionUpdatesResponseBody{}
	if res.SubmCreated != nil {
		body.SubmCreated = marshalSubmissionsSubmissionToSubmissionResponseBody(res.SubmCreated)
	}
	if res.StateUpdate != nil {
		body.StateUpdate = marshalSubmissionsSubmissionStateUpdateToSubmissionStateUpdateResponseBody(res.StateUpdate)
	}
	if res.TestgroupResUpdate != nil {
		body.TestgroupResUpdate = marshalSubmissionsTestgroupScoreUpdateToTestgroupScoreUpdateResponseBody(res.TestgroupResUpdate)
	}
	return body
}

// NewGetSubmissionResponseBody builds the HTTP response body from the result
// of the "getSubmission" endpoint of the "submissions" service.
func NewGetSubmissionResponseBody(res *submissions.Submission) *GetSubmissionResponseBody {
	body := &GetSubmissionResponseBody{
		SubmUUID:         res.SubmUUID,
		Submission:       res.Submission,
		Username:         res.Username,
		CreatedAt:        res.CreatedAt,
		EvalUUID:         res.EvalUUID,
		EvalStatus:       res.EvalStatus,
		PLangID:          res.PLangID,
		PLangDisplayName: res.PLangDisplayName,
		PLangMonacoID:    res.PLangMonacoID,
		TaskName:         res.TaskName,
		TaskID:           res.TaskID,
	}
	if res.EvalScoringTestgroups != nil {
		body.EvalScoringTestgroups = make([]*TestGroupResultResponseBody, len(res.EvalScoringTestgroups))
		for i, val := range res.EvalScoringTestgroups {
			body.EvalScoringTestgroups[i] = marshalSubmissionsTestGroupResultToTestGroupResultResponseBody(val)
		}
	}
	if res.EvalScoringTests != nil {
		body.EvalScoringTests = marshalSubmissionsTestsResultToTestsResultResponseBody(res.EvalScoringTests)
	}
	if res.EvalScoringSubtasks != nil {
		body.EvalScoringSubtasks = make([]*SubtaskResultResponseBody, len(res.EvalScoringSubtasks))
		for i, val := range res.EvalScoringSubtasks {
			body.EvalScoringSubtasks[i] = marshalSubmissionsSubtaskResultToSubtaskResultResponseBody(val)
		}
	}
	return body
}

// NewListProgrammingLanguagesResponseBody builds the HTTP response body from
// the result of the "listProgrammingLanguages" endpoint of the "submissions"
// service.
func NewListProgrammingLanguagesResponseBody(res []*submissions.ProgrammingLang) ListProgrammingLanguagesResponseBody {
	body := make([]*ProgrammingLangResponse, len(res))
	for i, val := range res {
		body[i] = marshalSubmissionsProgrammingLangToProgrammingLangResponse(val)
	}
	return body
}

// NewCreateSubmissionPayload builds a submissions service createSubmission
// endpoint payload.
func NewCreateSubmissionPayload(body *CreateSubmissionRequestBody, token string) *submissions.CreateSubmissionPayload {
	v := &submissions.CreateSubmissionPayload{
		Submission:        *body.Submission,
		Username:          *body.Username,
		ProgrammingLangID: *body.ProgrammingLangID,
		TaskCodeID:        *body.TaskCodeID,
	}
	v.Token = token

	return v
}

// NewGetSubmissionPayload builds a submissions service getSubmission endpoint
// payload.
func NewGetSubmissionPayload(uuid string) *submissions.GetSubmissionPayload {
	v := &submissions.GetSubmissionPayload{}
	v.UUID = uuid

	return v
}

// ValidateCreateSubmissionRequestBody runs the validations defined on
// CreateSubmissionRequestBody
func ValidateCreateSubmissionRequestBody(body *CreateSubmissionRequestBody) (err error) {
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProgrammingLangID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("programming_lang_id", "body"))
	}
	if body.TaskCodeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_code_id", "body"))
	}
	return
}
