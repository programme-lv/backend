// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions HTTP server types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	submissions "github.com/programme-lv/backend/gen/submissions"
	goa "goa.design/goa/v3/pkg"
)

// CreateSubmissionRequestBody is the type of the "submissions" service
// "createSubmission" endpoint HTTP request body.
type CreateSubmissionRequestBody struct {
	// The code submission
	Submission *string `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Username of the user who submitted
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// ID of the programming language
	ProgrammingLangID *string `form:"programming_lang_id,omitempty" json:"programming_lang_id,omitempty" xml:"programming_lang_id,omitempty"`
	// ID of the task
	TaskCodeID *string `form:"task_code_id,omitempty" json:"task_code_id,omitempty" xml:"task_code_id,omitempty"`
}

// CreateSubmissionResponseBody is the type of the "submissions" service
// "createSubmission" endpoint HTTP response body.
type CreateSubmissionResponseBody struct {
	// UUID of the submission
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// Creation date of the submission
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Evaluation of the submission
	Evaluation *EvaluationResponseBody `form:"evaluation" json:"evaluation" xml:"evaluation"`
	// Programming language of the submission
	Language *ProgrammingLangResponseBody `form:"language" json:"language" xml:"language"`
	// Task associated with the submission
	Task *SubmTaskResponseBody `form:"task" json:"task" xml:"task"`
}

// ListSubmissionsResponseBody is the type of the "submissions" service
// "listSubmissions" endpoint HTTP response body.
type ListSubmissionsResponseBody []*SubmissionResponse

// GetSubmissionResponseBody is the type of the "submissions" service
// "getSubmission" endpoint HTTP response body.
type GetSubmissionResponseBody struct {
	// UUID of the submission
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// Creation date of the submission
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Evaluation of the submission
	Evaluation *EvaluationResponseBody `form:"evaluation" json:"evaluation" xml:"evaluation"`
	// Programming language of the submission
	Language *ProgrammingLangResponseBody `form:"language" json:"language" xml:"language"`
	// Task associated with the submission
	Task *SubmTaskResponseBody `form:"task" json:"task" xml:"task"`
}

// EvaluationResponseBody is used to define fields on response body types.
type EvaluationResponseBody struct {
	// UUID of the evaluation
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Status of the evaluation
	Status string `form:"status" json:"status" xml:"status"`
	// Received score of the evaluation
	ReceivedScore int `form:"receivedScore" json:"receivedScore" xml:"receivedScore"`
	// Possible score of the evaluation
	PossibleScore int `form:"possibleScore" json:"possibleScore" xml:"possibleScore"`
}

// ProgrammingLangResponseBody is used to define fields on response body types.
type ProgrammingLangResponseBody struct {
	// ID of the programming language
	ID string `form:"id" json:"id" xml:"id"`
	// Full name of the programming language
	FullName string `form:"fullName" json:"fullName" xml:"fullName"`
	// Monaco editor ID for the programming language
	MonacoID string `form:"monacoId" json:"monacoId" xml:"monacoId"`
}

// SubmTaskResponseBody is used to define fields on response body types.
type SubmTaskResponseBody struct {
	// Name of the task
	Name string `form:"name" json:"name" xml:"name"`
	// Code of the task
	Code string `form:"code" json:"code" xml:"code"`
}

// SubmissionResponse is used to define fields on response body types.
type SubmissionResponse struct {
	// UUID of the submission
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// The code submission
	Submission string `form:"submission" json:"submission" xml:"submission"`
	// Username of the user who submitted
	Username string `form:"username" json:"username" xml:"username"`
	// Creation date of the submission
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Evaluation of the submission
	Evaluation *EvaluationResponse `form:"evaluation" json:"evaluation" xml:"evaluation"`
	// Programming language of the submission
	Language *ProgrammingLangResponse `form:"language" json:"language" xml:"language"`
	// Task associated with the submission
	Task *SubmTaskResponse `form:"task" json:"task" xml:"task"`
}

// EvaluationResponse is used to define fields on response body types.
type EvaluationResponse struct {
	// UUID of the evaluation
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Status of the evaluation
	Status string `form:"status" json:"status" xml:"status"`
	// Received score of the evaluation
	ReceivedScore int `form:"receivedScore" json:"receivedScore" xml:"receivedScore"`
	// Possible score of the evaluation
	PossibleScore int `form:"possibleScore" json:"possibleScore" xml:"possibleScore"`
}

// ProgrammingLangResponse is used to define fields on response body types.
type ProgrammingLangResponse struct {
	// ID of the programming language
	ID string `form:"id" json:"id" xml:"id"`
	// Full name of the programming language
	FullName string `form:"fullName" json:"fullName" xml:"fullName"`
	// Monaco editor ID for the programming language
	MonacoID string `form:"monacoId" json:"monacoId" xml:"monacoId"`
}

// SubmTaskResponse is used to define fields on response body types.
type SubmTaskResponse struct {
	// Name of the task
	Name string `form:"name" json:"name" xml:"name"`
	// Code of the task
	Code string `form:"code" json:"code" xml:"code"`
}

// NewCreateSubmissionResponseBody builds the HTTP response body from the
// result of the "createSubmission" endpoint of the "submissions" service.
func NewCreateSubmissionResponseBody(res *submissions.Submission) *CreateSubmissionResponseBody {
	body := &CreateSubmissionResponseBody{
		UUID:       res.UUID,
		Submission: res.Submission,
		Username:   res.Username,
		CreatedAt:  res.CreatedAt,
	}
	if res.Evaluation != nil {
		body.Evaluation = marshalSubmissionsEvaluationToEvaluationResponseBody(res.Evaluation)
	}
	if res.Language != nil {
		body.Language = marshalSubmissionsProgrammingLangToProgrammingLangResponseBody(res.Language)
	}
	if res.Task != nil {
		body.Task = marshalSubmissionsSubmTaskToSubmTaskResponseBody(res.Task)
	}
	return body
}

// NewListSubmissionsResponseBody builds the HTTP response body from the result
// of the "listSubmissions" endpoint of the "submissions" service.
func NewListSubmissionsResponseBody(res []*submissions.Submission) ListSubmissionsResponseBody {
	body := make([]*SubmissionResponse, len(res))
	for i, val := range res {
		body[i] = marshalSubmissionsSubmissionToSubmissionResponse(val)
	}
	return body
}

// NewGetSubmissionResponseBody builds the HTTP response body from the result
// of the "getSubmission" endpoint of the "submissions" service.
func NewGetSubmissionResponseBody(res *submissions.Submission) *GetSubmissionResponseBody {
	body := &GetSubmissionResponseBody{
		UUID:       res.UUID,
		Submission: res.Submission,
		Username:   res.Username,
		CreatedAt:  res.CreatedAt,
	}
	if res.Evaluation != nil {
		body.Evaluation = marshalSubmissionsEvaluationToEvaluationResponseBody(res.Evaluation)
	}
	if res.Language != nil {
		body.Language = marshalSubmissionsProgrammingLangToProgrammingLangResponseBody(res.Language)
	}
	if res.Task != nil {
		body.Task = marshalSubmissionsSubmTaskToSubmTaskResponseBody(res.Task)
	}
	return body
}

// NewCreateSubmissionPayload builds a submissions service createSubmission
// endpoint payload.
func NewCreateSubmissionPayload(body *CreateSubmissionRequestBody, token string) *submissions.CreateSubmissionPayload {
	v := &submissions.CreateSubmissionPayload{
		Submission:        *body.Submission,
		Username:          *body.Username,
		ProgrammingLangID: *body.ProgrammingLangID,
		TaskCodeID:        *body.TaskCodeID,
	}
	v.Token = token

	return v
}

// NewGetSubmissionPayload builds a submissions service getSubmission endpoint
// payload.
func NewGetSubmissionPayload(uuid string) *submissions.GetSubmissionPayload {
	v := &submissions.GetSubmissionPayload{}
	v.UUID = uuid

	return v
}

// ValidateCreateSubmissionRequestBody runs the validations defined on
// CreateSubmissionRequestBody
func ValidateCreateSubmissionRequestBody(body *CreateSubmissionRequestBody) (err error) {
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProgrammingLangID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("programming_lang_id", "body"))
	}
	if body.TaskCodeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("task_code_id", "body"))
	}
	return
}
