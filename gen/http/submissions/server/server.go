// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions HTTP server
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	"context"
	"net/http"

	submissions "github.com/programme-lv/backend/gen/submissions"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the submissions service endpoint HTTP handlers.
type Server struct {
	Mounts                   []*MountPoint
	CreateSubmission         http.Handler
	ListSubmissions          http.Handler
	GetSubmission            http.Handler
	ListProgrammingLanguages http.Handler
	CORS                     http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the submissions service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *submissions.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateSubmission", "POST", "/submissions"},
			{"ListSubmissions", "GET", "/submissions"},
			{"GetSubmission", "GET", "/submissions/{uuid}"},
			{"ListProgrammingLanguages", "GET", "/programming-languages"},
			{"CORS", "OPTIONS", "/submissions"},
			{"CORS", "OPTIONS", "/submissions/{uuid}"},
			{"CORS", "OPTIONS", "/programming-languages"},
		},
		CreateSubmission:         NewCreateSubmissionHandler(e.CreateSubmission, mux, decoder, encoder, errhandler, formatter),
		ListSubmissions:          NewListSubmissionsHandler(e.ListSubmissions, mux, decoder, encoder, errhandler, formatter),
		GetSubmission:            NewGetSubmissionHandler(e.GetSubmission, mux, decoder, encoder, errhandler, formatter),
		ListProgrammingLanguages: NewListProgrammingLanguagesHandler(e.ListProgrammingLanguages, mux, decoder, encoder, errhandler, formatter),
		CORS:                     NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "submissions" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateSubmission = m(s.CreateSubmission)
	s.ListSubmissions = m(s.ListSubmissions)
	s.GetSubmission = m(s.GetSubmission)
	s.ListProgrammingLanguages = m(s.ListProgrammingLanguages)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return submissions.MethodNames[:] }

// Mount configures the mux to serve the submissions endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateSubmissionHandler(mux, h.CreateSubmission)
	MountListSubmissionsHandler(mux, h.ListSubmissions)
	MountGetSubmissionHandler(mux, h.GetSubmission)
	MountListProgrammingLanguagesHandler(mux, h.ListProgrammingLanguages)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the submissions endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateSubmissionHandler configures the mux to serve the "submissions"
// service "createSubmission" endpoint.
func MountCreateSubmissionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSubmissionsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/submissions", f)
}

// NewCreateSubmissionHandler creates a HTTP handler which loads the HTTP
// request and calls the "submissions" service "createSubmission" endpoint.
func NewCreateSubmissionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateSubmissionRequest(mux, decoder)
		encodeResponse = EncodeCreateSubmissionResponse(encoder)
		encodeError    = EncodeCreateSubmissionError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createSubmission")
		ctx = context.WithValue(ctx, goa.ServiceKey, "submissions")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListSubmissionsHandler configures the mux to serve the "submissions"
// service "listSubmissions" endpoint.
func MountListSubmissionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSubmissionsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/submissions", f)
}

// NewListSubmissionsHandler creates a HTTP handler which loads the HTTP
// request and calls the "submissions" service "listSubmissions" endpoint.
func NewListSubmissionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListSubmissionsResponse(encoder)
		encodeError    = EncodeListSubmissionsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listSubmissions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "submissions")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSubmissionHandler configures the mux to serve the "submissions"
// service "getSubmission" endpoint.
func MountGetSubmissionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSubmissionsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/submissions/{uuid}", f)
}

// NewGetSubmissionHandler creates a HTTP handler which loads the HTTP request
// and calls the "submissions" service "getSubmission" endpoint.
func NewGetSubmissionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSubmissionRequest(mux, decoder)
		encodeResponse = EncodeGetSubmissionResponse(encoder)
		encodeError    = EncodeGetSubmissionError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getSubmission")
		ctx = context.WithValue(ctx, goa.ServiceKey, "submissions")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListProgrammingLanguagesHandler configures the mux to serve the
// "submissions" service "listProgrammingLanguages" endpoint.
func MountListProgrammingLanguagesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleSubmissionsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/programming-languages", f)
}

// NewListProgrammingLanguagesHandler creates a HTTP handler which loads the
// HTTP request and calls the "submissions" service "listProgrammingLanguages"
// endpoint.
func NewListProgrammingLanguagesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListProgrammingLanguagesResponse(encoder)
		encodeError    = EncodeListProgrammingLanguagesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listProgrammingLanguages")
		ctx = context.WithValue(ctx, goa.ServiceKey, "submissions")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service submissions.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleSubmissionsOrigin(h)
	mux.Handle("OPTIONS", "/submissions", h.ServeHTTP)
	mux.Handle("OPTIONS", "/submissions/{uuid}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/programming-languages", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleSubmissionsOrigin applies the CORS response headers corresponding to
// the origin for the service submissions.
func HandleSubmissionsOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "http://localhost:3000") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "*")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "*")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "https://programme.lv") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "*")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "*")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "https://www.programme.lv") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "*")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "*")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
