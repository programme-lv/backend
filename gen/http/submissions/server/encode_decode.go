// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strings"

	submissions "github.com/programme-lv/backend/gen/submissions"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateSubmissionResponse returns an encoder for responses returned by
// the submissions createSubmission endpoint.
func EncodeCreateSubmissionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*submissions.Submission)
		enc := encoder(ctx, w)
		body := NewCreateSubmissionResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateSubmissionRequest returns a decoder for requests sent to the
// submissions createSubmission endpoint.
func DecodeCreateSubmissionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateSubmissionRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateSubmissionRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("token", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateSubmissionPayload(&body, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeCreateSubmissionError returns an encoder for errors returned by the
// createSubmission submissions endpoint.
func EncodeCreateSubmissionError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalError":
			var res submissions.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "InvalidSubmissionDetails":
			var res submissions.InvalidSubmissionDetails
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res submissions.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res submissions.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListSubmissionsResponse returns an encoder for responses returned by
// the submissions listSubmissions endpoint.
func EncodeListSubmissionsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*submissions.Submission)
		enc := encoder(ctx, w)
		body := NewListSubmissionsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeListSubmissionsError returns an encoder for errors returned by the
// listSubmissions submissions endpoint.
func EncodeListSubmissionsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalError":
			var res submissions.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "InvalidSubmissionDetails":
			var res submissions.InvalidSubmissionDetails
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res submissions.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res submissions.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeStreamSubmissionUpdatesError returns an encoder for errors returned by
// the streamSubmissionUpdates submissions endpoint.
func EncodeStreamSubmissionUpdatesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalError":
			var res submissions.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "InvalidSubmissionDetails":
			var res submissions.InvalidSubmissionDetails
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res submissions.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res submissions.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetSubmissionResponse returns an encoder for responses returned by the
// submissions getSubmission endpoint.
func EncodeGetSubmissionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*submissions.Submission)
		enc := encoder(ctx, w)
		body := NewGetSubmissionResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetSubmissionRequest returns a decoder for requests sent to the
// submissions getSubmission endpoint.
func DecodeGetSubmissionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			uuid string

			params = mux.Vars(r)
		)
		uuid = params["uuid"]
		payload := NewGetSubmissionPayload(uuid)

		return payload, nil
	}
}

// EncodeGetSubmissionError returns an encoder for errors returned by the
// getSubmission submissions endpoint.
func EncodeGetSubmissionError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalError":
			var res submissions.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "InvalidSubmissionDetails":
			var res submissions.InvalidSubmissionDetails
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res submissions.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res submissions.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListProgrammingLanguagesResponse returns an encoder for responses
// returned by the submissions listProgrammingLanguages endpoint.
func EncodeListProgrammingLanguagesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*submissions.ProgrammingLang)
		enc := encoder(ctx, w)
		body := NewListProgrammingLanguagesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeListProgrammingLanguagesError returns an encoder for errors returned
// by the listProgrammingLanguages submissions endpoint.
func EncodeListProgrammingLanguagesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalError":
			var res submissions.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "InvalidSubmissionDetails":
			var res submissions.InvalidSubmissionDetails
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res submissions.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res submissions.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalSubmissionsTestGroupResultToTestGroupResultResponseBody builds a
// value of type *TestGroupResultResponseBody from a value of type
// *submissions.TestGroupResult.
func marshalSubmissionsTestGroupResultToTestGroupResultResponseBody(v *submissions.TestGroupResult) *TestGroupResultResponseBody {
	if v == nil {
		return nil
	}
	res := &TestGroupResultResponseBody{
		TestGroupID:      v.TestGroupID,
		TestGroupScore:   v.TestGroupScore,
		StatementSubtask: v.StatementSubtask,
		AcceptedTests:    v.AcceptedTests,
		WrongTests:       v.WrongTests,
		UntestedTests:    v.UntestedTests,
	}

	return res
}

// marshalSubmissionsTestsResultToTestsResultResponseBody builds a value of
// type *TestsResultResponseBody from a value of type *submissions.TestsResult.
func marshalSubmissionsTestsResultToTestsResultResponseBody(v *submissions.TestsResult) *TestsResultResponseBody {
	if v == nil {
		return nil
	}
	res := &TestsResultResponseBody{
		Accepted: v.Accepted,
		Wrong:    v.Wrong,
		Untested: v.Untested,
	}

	return res
}

// marshalSubmissionsSubtaskResultToSubtaskResultResponseBody builds a value of
// type *SubtaskResultResponseBody from a value of type
// *submissions.SubtaskResult.
func marshalSubmissionsSubtaskResultToSubtaskResultResponseBody(v *submissions.SubtaskResult) *SubtaskResultResponseBody {
	if v == nil {
		return nil
	}
	res := &SubtaskResultResponseBody{
		SubtaskID:     v.SubtaskID,
		SubtaskScore:  v.SubtaskScore,
		AcceptedTests: v.AcceptedTests,
		WrongTests:    v.WrongTests,
		UntestedTests: v.UntestedTests,
	}

	return res
}

// marshalSubmissionsSubmissionToSubmissionResponse builds a value of type
// *SubmissionResponse from a value of type *submissions.Submission.
func marshalSubmissionsSubmissionToSubmissionResponse(v *submissions.Submission) *SubmissionResponse {
	res := &SubmissionResponse{
		SubmUUID:         v.SubmUUID,
		Submission:       v.Submission,
		Username:         v.Username,
		CreatedAt:        v.CreatedAt,
		EvalUUID:         v.EvalUUID,
		EvalStatus:       v.EvalStatus,
		PLangID:          v.PLangID,
		PLangDisplayName: v.PLangDisplayName,
		PLangMonacoID:    v.PLangMonacoID,
		TaskName:         v.TaskName,
		TaskID:           v.TaskID,
	}
	if v.EvalScoringTestgroups != nil {
		res.EvalScoringTestgroups = make([]*TestGroupResultResponse, len(v.EvalScoringTestgroups))
		for i, val := range v.EvalScoringTestgroups {
			res.EvalScoringTestgroups[i] = marshalSubmissionsTestGroupResultToTestGroupResultResponse(val)
		}
	}
	if v.EvalScoringTests != nil {
		res.EvalScoringTests = marshalSubmissionsTestsResultToTestsResultResponse(v.EvalScoringTests)
	}
	if v.EvalScoringSubtasks != nil {
		res.EvalScoringSubtasks = make([]*SubtaskResultResponse, len(v.EvalScoringSubtasks))
		for i, val := range v.EvalScoringSubtasks {
			res.EvalScoringSubtasks[i] = marshalSubmissionsSubtaskResultToSubtaskResultResponse(val)
		}
	}

	return res
}

// marshalSubmissionsTestGroupResultToTestGroupResultResponse builds a value of
// type *TestGroupResultResponse from a value of type
// *submissions.TestGroupResult.
func marshalSubmissionsTestGroupResultToTestGroupResultResponse(v *submissions.TestGroupResult) *TestGroupResultResponse {
	if v == nil {
		return nil
	}
	res := &TestGroupResultResponse{
		TestGroupID:      v.TestGroupID,
		TestGroupScore:   v.TestGroupScore,
		StatementSubtask: v.StatementSubtask,
		AcceptedTests:    v.AcceptedTests,
		WrongTests:       v.WrongTests,
		UntestedTests:    v.UntestedTests,
	}

	return res
}

// marshalSubmissionsTestsResultToTestsResultResponse builds a value of type
// *TestsResultResponse from a value of type *submissions.TestsResult.
func marshalSubmissionsTestsResultToTestsResultResponse(v *submissions.TestsResult) *TestsResultResponse {
	if v == nil {
		return nil
	}
	res := &TestsResultResponse{
		Accepted: v.Accepted,
		Wrong:    v.Wrong,
		Untested: v.Untested,
	}

	return res
}

// marshalSubmissionsSubtaskResultToSubtaskResultResponse builds a value of
// type *SubtaskResultResponse from a value of type *submissions.SubtaskResult.
func marshalSubmissionsSubtaskResultToSubtaskResultResponse(v *submissions.SubtaskResult) *SubtaskResultResponse {
	if v == nil {
		return nil
	}
	res := &SubtaskResultResponse{
		SubtaskID:     v.SubtaskID,
		SubtaskScore:  v.SubtaskScore,
		AcceptedTests: v.AcceptedTests,
		WrongTests:    v.WrongTests,
		UntestedTests: v.UntestedTests,
	}

	return res
}

// marshalSubmissionsSubmissionToSubmissionResponseBody builds a value of type
// *SubmissionResponseBody from a value of type *submissions.Submission.
func marshalSubmissionsSubmissionToSubmissionResponseBody(v *submissions.Submission) *SubmissionResponseBody {
	if v == nil {
		return nil
	}
	res := &SubmissionResponseBody{
		SubmUUID:         v.SubmUUID,
		Submission:       v.Submission,
		Username:         v.Username,
		CreatedAt:        v.CreatedAt,
		EvalUUID:         v.EvalUUID,
		EvalStatus:       v.EvalStatus,
		PLangID:          v.PLangID,
		PLangDisplayName: v.PLangDisplayName,
		PLangMonacoID:    v.PLangMonacoID,
		TaskName:         v.TaskName,
		TaskID:           v.TaskID,
	}
	if v.EvalScoringTestgroups != nil {
		res.EvalScoringTestgroups = make([]*TestGroupResultResponseBody, len(v.EvalScoringTestgroups))
		for i, val := range v.EvalScoringTestgroups {
			res.EvalScoringTestgroups[i] = marshalSubmissionsTestGroupResultToTestGroupResultResponseBody(val)
		}
	}
	if v.EvalScoringTests != nil {
		res.EvalScoringTests = marshalSubmissionsTestsResultToTestsResultResponseBody(v.EvalScoringTests)
	}
	if v.EvalScoringSubtasks != nil {
		res.EvalScoringSubtasks = make([]*SubtaskResultResponseBody, len(v.EvalScoringSubtasks))
		for i, val := range v.EvalScoringSubtasks {
			res.EvalScoringSubtasks[i] = marshalSubmissionsSubtaskResultToSubtaskResultResponseBody(val)
		}
	}

	return res
}

// marshalSubmissionsSubmissionStateUpdateToSubmissionStateUpdateResponseBody
// builds a value of type *SubmissionStateUpdateResponseBody from a value of
// type *submissions.SubmissionStateUpdate.
func marshalSubmissionsSubmissionStateUpdateToSubmissionStateUpdateResponseBody(v *submissions.SubmissionStateUpdate) *SubmissionStateUpdateResponseBody {
	if v == nil {
		return nil
	}
	res := &SubmissionStateUpdateResponseBody{
		SubmUUID: v.SubmUUID,
		EvalUUID: v.EvalUUID,
		NewState: v.NewState,
	}

	return res
}

// marshalSubmissionsTestgroupScoreUpdateToTestgroupScoreUpdateResponseBody
// builds a value of type *TestgroupScoreUpdateResponseBody from a value of
// type *submissions.TestgroupScoreUpdate.
func marshalSubmissionsTestgroupScoreUpdateToTestgroupScoreUpdateResponseBody(v *submissions.TestgroupScoreUpdate) *TestgroupScoreUpdateResponseBody {
	if v == nil {
		return nil
	}
	res := &TestgroupScoreUpdateResponseBody{
		SubmUUID:      v.SubmUUID,
		EvalUUID:      v.EvalUUID,
		TestGroupID:   v.TestGroupID,
		AcceptedTests: v.AcceptedTests,
		WrongTests:    v.WrongTests,
		UntestedTests: v.UntestedTests,
	}

	return res
}

// marshalSubmissionsProgrammingLangToProgrammingLangResponse builds a value of
// type *ProgrammingLangResponse from a value of type
// *submissions.ProgrammingLang.
func marshalSubmissionsProgrammingLangToProgrammingLangResponse(v *submissions.ProgrammingLang) *ProgrammingLangResponse {
	res := &ProgrammingLangResponse{
		ID:               v.ID,
		FullName:         v.FullName,
		CodeFilename:     v.CodeFilename,
		CompileCmd:       v.CompileCmd,
		ExecuteCmd:       v.ExecuteCmd,
		EnvVersionCmd:    v.EnvVersionCmd,
		HelloWorldCode:   v.HelloWorldCode,
		MonacoID:         v.MonacoID,
		CompiledFilename: v.CompiledFilename,
		Enabled:          v.Enabled,
	}

	return res
}
