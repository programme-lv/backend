// Code generated by goa v3.18.2, DO NOT EDIT.
//
// submissions HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	submissions "github.com/programme-lv/backend/gen/submissions"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateSubmissionResponse returns an encoder for responses returned by
// the submissions createSubmission endpoint.
func EncodeCreateSubmissionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*submissions.Submission)
		enc := encoder(ctx, w)
		body := NewCreateSubmissionResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateSubmissionRequest returns a decoder for requests sent to the
// submissions createSubmission endpoint.
func DecodeCreateSubmissionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateSubmissionRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateSubmissionRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateSubmissionPayload(&body)

		return payload, nil
	}
}

// EncodeCreateSubmissionError returns an encoder for errors returned by the
// createSubmission submissions endpoint.
func EncodeCreateSubmissionError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalError":
			var res submissions.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "InvalidSubmissionDetails":
			var res submissions.InvalidSubmissionDetails
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res submissions.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res submissions.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListSubmissionsResponse returns an encoder for responses returned by
// the submissions listSubmissions endpoint.
func EncodeListSubmissionsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*submissions.Submission)
		enc := encoder(ctx, w)
		body := NewListSubmissionsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeListSubmissionsError returns an encoder for errors returned by the
// listSubmissions submissions endpoint.
func EncodeListSubmissionsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalError":
			var res submissions.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "InvalidSubmissionDetails":
			var res submissions.InvalidSubmissionDetails
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res submissions.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res submissions.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetSubmissionResponse returns an encoder for responses returned by the
// submissions getSubmission endpoint.
func EncodeGetSubmissionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*submissions.Submission)
		enc := encoder(ctx, w)
		body := NewGetSubmissionResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetSubmissionRequest returns a decoder for requests sent to the
// submissions getSubmission endpoint.
func DecodeGetSubmissionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			uuid string

			params = mux.Vars(r)
		)
		uuid = params["uuid"]
		payload := NewGetSubmissionPayload(uuid)

		return payload, nil
	}
}

// EncodeGetSubmissionError returns an encoder for errors returned by the
// getSubmission submissions endpoint.
func EncodeGetSubmissionError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "InternalError":
			var res submissions.InternalError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "InvalidSubmissionDetails":
			var res submissions.InvalidSubmissionDetails
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "NotFound":
			var res submissions.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "unauthorized":
			var res submissions.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalSubmissionsEvaluationToEvaluationResponseBody builds a value of type
// *EvaluationResponseBody from a value of type *submissions.Evaluation.
func marshalSubmissionsEvaluationToEvaluationResponseBody(v *submissions.Evaluation) *EvaluationResponseBody {
	res := &EvaluationResponseBody{
		UUID:          v.UUID,
		Status:        v.Status,
		ReceivedScore: v.ReceivedScore,
		PossibleScore: v.PossibleScore,
	}

	return res
}

// marshalSubmissionsProgrammingLangToProgrammingLangResponseBody builds a
// value of type *ProgrammingLangResponseBody from a value of type
// *submissions.ProgrammingLang.
func marshalSubmissionsProgrammingLangToProgrammingLangResponseBody(v *submissions.ProgrammingLang) *ProgrammingLangResponseBody {
	res := &ProgrammingLangResponseBody{
		ID:       v.ID,
		FullName: v.FullName,
		MonacoID: v.MonacoID,
	}

	return res
}

// marshalSubmissionsTaskToTaskResponseBody builds a value of type
// *TaskResponseBody from a value of type *submissions.Task.
func marshalSubmissionsTaskToTaskResponseBody(v *submissions.Task) *TaskResponseBody {
	res := &TaskResponseBody{
		PublishedTaskID:        v.PublishedTaskID,
		TaskFullName:           v.TaskFullName,
		MemoryLimitMegabytes:   v.MemoryLimitMegabytes,
		CPUTimeLimitSeconds:    v.CPUTimeLimitSeconds,
		OriginOlympiad:         v.OriginOlympiad,
		IllustrationImgURL:     v.IllustrationImgURL,
		DifficultyRating:       v.DifficultyRating,
		DefaultPdfStatementURL: v.DefaultPdfStatementURL,
	}
	if v.DefaultMdStatement != nil {
		res.DefaultMdStatement = marshalSubmissionsMarkdownStatementToMarkdownStatementResponseBody(v.DefaultMdStatement)
	}
	if v.Examples != nil {
		res.Examples = make([]*ExampleResponseBody, len(v.Examples))
		for i, val := range v.Examples {
			res.Examples[i] = marshalSubmissionsExampleToExampleResponseBody(val)
		}
	}
	if v.OriginNotes != nil {
		res.OriginNotes = make(map[string]string, len(v.OriginNotes))
		for key, val := range v.OriginNotes {
			tk := key
			tv := val
			res.OriginNotes[tk] = tv
		}
	}
	if v.VisibleInputSubtasks != nil {
		res.VisibleInputSubtasks = make([]*StInputsResponseBody, len(v.VisibleInputSubtasks))
		for i, val := range v.VisibleInputSubtasks {
			res.VisibleInputSubtasks[i] = marshalSubmissionsStInputsToStInputsResponseBody(val)
		}
	}

	return res
}

// marshalSubmissionsMarkdownStatementToMarkdownStatementResponseBody builds a
// value of type *MarkdownStatementResponseBody from a value of type
// *submissions.MarkdownStatement.
func marshalSubmissionsMarkdownStatementToMarkdownStatementResponseBody(v *submissions.MarkdownStatement) *MarkdownStatementResponseBody {
	if v == nil {
		return nil
	}
	res := &MarkdownStatementResponseBody{
		Story:   v.Story,
		Input:   v.Input,
		Output:  v.Output,
		Notes:   v.Notes,
		Scoring: v.Scoring,
	}

	return res
}

// marshalSubmissionsExampleToExampleResponseBody builds a value of type
// *ExampleResponseBody from a value of type *submissions.Example.
func marshalSubmissionsExampleToExampleResponseBody(v *submissions.Example) *ExampleResponseBody {
	if v == nil {
		return nil
	}
	res := &ExampleResponseBody{
		Input:  v.Input,
		Output: v.Output,
		MdNote: v.MdNote,
	}

	return res
}

// marshalSubmissionsStInputsToStInputsResponseBody builds a value of type
// *StInputsResponseBody from a value of type *submissions.StInputs.
func marshalSubmissionsStInputsToStInputsResponseBody(v *submissions.StInputs) *StInputsResponseBody {
	if v == nil {
		return nil
	}
	res := &StInputsResponseBody{
		Subtask: v.Subtask,
	}
	if v.Inputs != nil {
		res.Inputs = make([]string, len(v.Inputs))
		for i, val := range v.Inputs {
			res.Inputs[i] = val
		}
	} else {
		res.Inputs = []string{}
	}

	return res
}

// marshalSubmissionsSubmissionToSubmissionResponse builds a value of type
// *SubmissionResponse from a value of type *submissions.Submission.
func marshalSubmissionsSubmissionToSubmissionResponse(v *submissions.Submission) *SubmissionResponse {
	res := &SubmissionResponse{
		UUID:       v.UUID,
		Submission: v.Submission,
		Username:   v.Username,
		CreatedAt:  v.CreatedAt,
	}
	if v.Evaluation != nil {
		res.Evaluation = marshalSubmissionsEvaluationToEvaluationResponse(v.Evaluation)
	}
	if v.Language != nil {
		res.Language = marshalSubmissionsProgrammingLangToProgrammingLangResponse(v.Language)
	}
	if v.Task != nil {
		res.Task = marshalSubmissionsTaskToTaskResponse(v.Task)
	}

	return res
}

// marshalSubmissionsEvaluationToEvaluationResponse builds a value of type
// *EvaluationResponse from a value of type *submissions.Evaluation.
func marshalSubmissionsEvaluationToEvaluationResponse(v *submissions.Evaluation) *EvaluationResponse {
	res := &EvaluationResponse{
		UUID:          v.UUID,
		Status:        v.Status,
		ReceivedScore: v.ReceivedScore,
		PossibleScore: v.PossibleScore,
	}

	return res
}

// marshalSubmissionsProgrammingLangToProgrammingLangResponse builds a value of
// type *ProgrammingLangResponse from a value of type
// *submissions.ProgrammingLang.
func marshalSubmissionsProgrammingLangToProgrammingLangResponse(v *submissions.ProgrammingLang) *ProgrammingLangResponse {
	res := &ProgrammingLangResponse{
		ID:       v.ID,
		FullName: v.FullName,
		MonacoID: v.MonacoID,
	}

	return res
}

// marshalSubmissionsTaskToTaskResponse builds a value of type *TaskResponse
// from a value of type *submissions.Task.
func marshalSubmissionsTaskToTaskResponse(v *submissions.Task) *TaskResponse {
	res := &TaskResponse{
		PublishedTaskID:        v.PublishedTaskID,
		TaskFullName:           v.TaskFullName,
		MemoryLimitMegabytes:   v.MemoryLimitMegabytes,
		CPUTimeLimitSeconds:    v.CPUTimeLimitSeconds,
		OriginOlympiad:         v.OriginOlympiad,
		IllustrationImgURL:     v.IllustrationImgURL,
		DifficultyRating:       v.DifficultyRating,
		DefaultPdfStatementURL: v.DefaultPdfStatementURL,
	}
	if v.DefaultMdStatement != nil {
		res.DefaultMdStatement = marshalSubmissionsMarkdownStatementToMarkdownStatementResponse(v.DefaultMdStatement)
	}
	if v.Examples != nil {
		res.Examples = make([]*ExampleResponse, len(v.Examples))
		for i, val := range v.Examples {
			res.Examples[i] = marshalSubmissionsExampleToExampleResponse(val)
		}
	}
	if v.OriginNotes != nil {
		res.OriginNotes = make(map[string]string, len(v.OriginNotes))
		for key, val := range v.OriginNotes {
			tk := key
			tv := val
			res.OriginNotes[tk] = tv
		}
	}
	if v.VisibleInputSubtasks != nil {
		res.VisibleInputSubtasks = make([]*StInputsResponse, len(v.VisibleInputSubtasks))
		for i, val := range v.VisibleInputSubtasks {
			res.VisibleInputSubtasks[i] = marshalSubmissionsStInputsToStInputsResponse(val)
		}
	}

	return res
}

// marshalSubmissionsMarkdownStatementToMarkdownStatementResponse builds a
// value of type *MarkdownStatementResponse from a value of type
// *submissions.MarkdownStatement.
func marshalSubmissionsMarkdownStatementToMarkdownStatementResponse(v *submissions.MarkdownStatement) *MarkdownStatementResponse {
	if v == nil {
		return nil
	}
	res := &MarkdownStatementResponse{
		Story:   v.Story,
		Input:   v.Input,
		Output:  v.Output,
		Notes:   v.Notes,
		Scoring: v.Scoring,
	}

	return res
}

// marshalSubmissionsExampleToExampleResponse builds a value of type
// *ExampleResponse from a value of type *submissions.Example.
func marshalSubmissionsExampleToExampleResponse(v *submissions.Example) *ExampleResponse {
	if v == nil {
		return nil
	}
	res := &ExampleResponse{
		Input:  v.Input,
		Output: v.Output,
		MdNote: v.MdNote,
	}

	return res
}

// marshalSubmissionsStInputsToStInputsResponse builds a value of type
// *StInputsResponse from a value of type *submissions.StInputs.
func marshalSubmissionsStInputsToStInputsResponse(v *submissions.StInputs) *StInputsResponse {
	if v == nil {
		return nil
	}
	res := &StInputsResponse{
		Subtask: v.Subtask,
	}
	if v.Inputs != nil {
		res.Inputs = make([]string, len(v.Inputs))
		for i, val := range v.Inputs {
			res.Inputs[i] = val
		}
	} else {
		res.Inputs = []string{}
	}

	return res
}
