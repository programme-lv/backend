swagger: "2.0"
info:
    title: Programme.lv backend
    description: Service for managing users, tasks, and submissions.
    version: 0.0.1
host: localhost:80
consumes:
    - application/json
    - application/xml
    - application/gob
produces:
    - application/json
    - application/xml
    - application/gob
paths:
    /auth/current/jwt:
        get:
            tags:
                - users
            summary: queryCurrentJWT users
            description: Query current JWT
            operationId: users#queryCurrentJWT
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  required: false
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: string
                "400":
                    description: Bad Request response.
                    schema:
                        type: string
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
                "404":
                    description: Not Found response.
                    schema:
                        type: string
                "409":
                    description: Conflict response.
                    schema:
                        $ref: '#/definitions/UsersQueryCurrentJWTInsertConflictResponseBody'
            schemes:
                - http
            security:
                - jwt_query_Authorization: []
    /auth/login:
        post:
            tags:
                - users
            summary: login users
            description: User login
            operationId: users#login
            parameters:
                - name: LoginRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/UsersLoginRequestBody'
                    required:
                        - username
                        - password
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: string
                "400":
                    description: Bad Request response.
                    schema:
                        type: string
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
                "404":
                    description: Not Found response.
                    schema:
                        type: string
                "409":
                    description: Conflict response.
                    schema:
                        $ref: '#/definitions/UsersLoginInsertConflictResponseBody'
            schemes:
                - http
    /users:
        get:
            tags:
                - users
            summary: listUsers users
            description: |-
                List all users

                **Required security scopes for jwt**:
                  * `users:read`
            operationId: users#listUsers
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  required: false
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/UserResponse'
                "400":
                    description: Bad Request response.
                    schema:
                        type: string
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
                "404":
                    description: Not Found response.
                    schema:
                        type: string
                "409":
                    description: Conflict response.
                    schema:
                        $ref: '#/definitions/UsersListUsersInsertConflictResponseBody'
            schemes:
                - http
            security:
                - jwt_query_Authorization: []
        post:
            tags:
                - users
            summary: createUser users
            description: Create a new user
            operationId: users#createUser
            parameters:
                - name: CreateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/UsersCreateUserRequestBody'
                    required:
                        - username
                        - email
                        - firstname
                        - lastname
                        - password
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/UsersCreateUserResponseBody'
                        required:
                            - uuid
                            - username
                            - email
                            - firstname
                            - lastname
                "400":
                    description: Bad Request response.
                    schema:
                        type: string
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
                "404":
                    description: Not Found response.
                    schema:
                        type: string
                "409":
                    description: Conflict response.
                    schema:
                        $ref: '#/definitions/UsersCreateUserInsertConflictResponseBody'
            schemes:
                - http
    /users/{uuid}:
        get:
            tags:
                - users
            summary: getUser users
            description: |-
                Get a user by UUID

                **Required security scopes for jwt**:
                  * `users:read`
            operationId: users#getUser
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  required: true
                  type: string
                - name: uuid
                  in: path
                  description: UUID of the user
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/UsersGetUserResponseBody'
                        required:
                            - uuid
                            - username
                            - email
                            - firstname
                            - lastname
                "400":
                    description: Bad Request response.
                    schema:
                        type: string
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
                "404":
                    description: Not Found response.
                    schema:
                        type: string
                "409":
                    description: Conflict response.
                    schema:
                        $ref: '#/definitions/UsersGetUserInsertConflictResponseBody'
            schemes:
                - http
            security:
                - jwt_query_Authorization: []
        put:
            tags:
                - users
            summary: updateUser users
            description: |-
                Update an existing user

                **Required security scopes for jwt**:
                  * `users:write`
            operationId: users#updateUser
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  required: true
                  type: string
                - name: uuid
                  in: path
                  description: UUID of the user
                  required: true
                  type: string
                - name: UpdateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/UsersUpdateUserRequestBody'
                    required:
                        - username
                        - email
                        - firstname
                        - lastname
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/UsersUpdateUserOKResponseBody'
                        required:
                            - uuid
                            - username
                            - email
                            - firstname
                            - lastname
                "400":
                    description: Bad Request response.
                    schema:
                        type: string
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
                "404":
                    description: Not Found response.
                    schema:
                        type: string
                "409":
                    description: Conflict response.
                    schema:
                        $ref: '#/definitions/UsersUpdateUserInsertConflictResponseBody'
            schemes:
                - http
            security:
                - jwt_query_Authorization: []
        delete:
            tags:
                - users
            summary: deleteUser users
            description: |-
                Delete a user

                **Required security scopes for jwt**:
                  * `users:write`
            operationId: users#deleteUser
            parameters:
                - name: Authorization
                  in: query
                  description: JWT token used for authentication
                  required: true
                  type: string
                - name: uuid
                  in: path
                  description: UUID of the user
                  required: true
                  type: string
            responses:
                "204":
                    description: No Content response.
                "400":
                    description: Bad Request response.
                    schema:
                        type: string
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
                "404":
                    description: Not Found response.
                    schema:
                        type: string
                "409":
                    description: Conflict response.
                    schema:
                        $ref: '#/definitions/UsersDeleteUserInsertConflictResponseBody'
            schemes:
                - http
            security:
                - jwt_query_Authorization: []
definitions:
    UserResponse:
        title: UserResponse
        type: object
        properties:
            email:
                type: string
                description: Email of the user
                example: johndoe@example.com
                format: email
            firstname:
                type: string
                description: First name of the user
                example: John
            lastname:
                type: string
                description: Last name of the user
                example: Doe
            username:
                type: string
                description: Username of the user
                example: johndoe
            uuid:
                type: string
                description: Unique user UUID
                example: 550e8400-e29b-41d4-a716-446655440000
        description: User representation
        example:
            email: johndoe@example.com
            firstname: John
            lastname: Doe
            username: johndoe
            uuid: 550e8400-e29b-41d4-a716-446655440000
        required:
            - uuid
            - username
            - email
            - firstname
            - lastname
    UsersCreateUserInsertConflictResponseBody:
        title: 'Mediatype identifier: application/vnd.service.insertconflict; view=default'
        type: object
        properties:
            conflict_value:
                type: string
                example: Beatae incidunt provident quis possimus et consequatur.
        description: Insertion conflict (default view)
        example:
            conflict_value: Occaecati et et non.
        required:
            - conflict_value
    UsersCreateUserRequestBody:
        title: UsersCreateUserRequestBody
        type: object
        properties:
            email:
                type: string
                description: Email of the user
                example: johndoe@example.com
                format: email
            firstname:
                type: string
                description: First name of the user
                example: John
            lastname:
                type: string
                description: Last name of the user
                example: Doe
            password:
                type: string
                description: Password of the user
                example: password123
                minLength: 8
            username:
                type: string
                description: Username of the user
                example: johndoe
                minLength: 1
        example:
            email: johndoe@example.com
            firstname: John
            lastname: Doe
            password: password123
            username: johndoe
        required:
            - username
            - email
            - firstname
            - lastname
            - password
    UsersCreateUserResponseBody:
        title: UsersCreateUserResponseBody
        type: object
        properties:
            email:
                type: string
                description: Email of the user
                example: johndoe@example.com
                format: email
            firstname:
                type: string
                description: First name of the user
                example: John
            lastname:
                type: string
                description: Last name of the user
                example: Doe
            username:
                type: string
                description: Username of the user
                example: johndoe
            uuid:
                type: string
                description: Unique user UUID
                example: 550e8400-e29b-41d4-a716-446655440000
        example:
            email: johndoe@example.com
            firstname: John
            lastname: Doe
            username: johndoe
            uuid: 550e8400-e29b-41d4-a716-446655440000
        required:
            - uuid
            - username
            - email
            - firstname
            - lastname
    UsersDeleteUserInsertConflictResponseBody:
        title: 'Mediatype identifier: application/vnd.service.insertconflict; view=default'
        type: object
        properties:
            conflict_value:
                type: string
                example: Expedita quae dicta aut iusto ut.
        description: Insertion conflict (default view)
        example:
            conflict_value: A architecto minima.
        required:
            - conflict_value
    UsersGetUserInsertConflictResponseBody:
        title: 'Mediatype identifier: application/vnd.service.insertconflict; view=default'
        type: object
        properties:
            conflict_value:
                type: string
                example: Quia occaecati qui assumenda.
        description: Insertion conflict (default view)
        example:
            conflict_value: Necessitatibus debitis illo ex et similique.
        required:
            - conflict_value
    UsersGetUserResponseBody:
        title: UsersGetUserResponseBody
        type: object
        properties:
            email:
                type: string
                description: Email of the user
                example: johndoe@example.com
                format: email
            firstname:
                type: string
                description: First name of the user
                example: John
            lastname:
                type: string
                description: Last name of the user
                example: Doe
            username:
                type: string
                description: Username of the user
                example: johndoe
            uuid:
                type: string
                description: Unique user UUID
                example: 550e8400-e29b-41d4-a716-446655440000
        example:
            email: johndoe@example.com
            firstname: John
            lastname: Doe
            username: johndoe
            uuid: 550e8400-e29b-41d4-a716-446655440000
        required:
            - uuid
            - username
            - email
            - firstname
            - lastname
    UsersListUsersInsertConflictResponseBody:
        title: 'Mediatype identifier: application/vnd.service.insertconflict; view=default'
        type: object
        properties:
            conflict_value:
                type: string
                example: Voluptatem inventore reiciendis impedit voluptatem.
        description: Insertion conflict (default view)
        example:
            conflict_value: Autem et.
        required:
            - conflict_value
    UsersLoginInsertConflictResponseBody:
        title: 'Mediatype identifier: application/vnd.service.insertconflict; view=default'
        type: object
        properties:
            conflict_value:
                type: string
                example: Dolorem autem repudiandae.
        description: Insertion conflict (default view)
        example:
            conflict_value: Sint omnis dignissimos laborum.
        required:
            - conflict_value
    UsersLoginRequestBody:
        title: UsersLoginRequestBody
        type: object
        properties:
            password:
                type: string
                description: Password of the user
                example: password123
                minLength: 8
            username:
                type: string
                description: Username of the user
                example: johndoe
        example:
            password: password123
            username: johndoe
        required:
            - username
            - password
    UsersQueryCurrentJWTInsertConflictResponseBody:
        title: 'Mediatype identifier: application/vnd.service.insertconflict; view=default'
        type: object
        properties:
            conflict_value:
                type: string
                example: Et exercitationem ducimus qui ipsam.
        description: Insertion conflict (default view)
        example:
            conflict_value: Veritatis et porro officiis.
        required:
            - conflict_value
    UsersUpdateUserBadRequestResponseBody:
        title: UsersUpdateUserBadRequestResponseBody
        type: object
        properties:
            email:
                type: string
                description: Email of the user
                example: johndoe@example.com
                format: email
            firstname:
                type: string
                description: First name of the user
                example: John
            lastname:
                type: string
                description: Last name of the user
                example: Doe
            username:
                type: string
                description: Username of the user
                example: johndoe
            uuid:
                type: string
                description: Unique user UUID
                example: 550e8400-e29b-41d4-a716-446655440000
        example:
            email: johndoe@example.com
            firstname: John
            lastname: Doe
            username: johndoe
            uuid: 550e8400-e29b-41d4-a716-446655440000
        required:
            - uuid
            - username
            - email
            - firstname
            - lastname
    UsersUpdateUserInsertConflictResponseBody:
        title: 'Mediatype identifier: application/vnd.service.insertconflict; view=default'
        type: object
        properties:
            conflict_value:
                type: string
                example: Porro minus sed voluptatum voluptas amet.
        description: Insertion conflict (default view)
        example:
            conflict_value: Et ducimus vitae.
        required:
            - conflict_value
    UsersUpdateUserOKResponseBody:
        title: UsersUpdateUserOKResponseBody
        type: object
        properties:
            email:
                type: string
                description: Email of the user
                example: johndoe@example.com
                format: email
            firstname:
                type: string
                description: First name of the user
                example: John
            lastname:
                type: string
                description: Last name of the user
                example: Doe
            username:
                type: string
                description: Username of the user
                example: johndoe
            uuid:
                type: string
                description: Unique user UUID
                example: 550e8400-e29b-41d4-a716-446655440000
        example:
            email: johndoe@example.com
            firstname: John
            lastname: Doe
            username: johndoe
            uuid: 550e8400-e29b-41d4-a716-446655440000
        required:
            - uuid
            - username
            - email
            - firstname
            - lastname
    UsersUpdateUserRequestBody:
        title: UsersUpdateUserRequestBody
        type: object
        properties:
            email:
                type: string
                description: Email of the user
                example: johndoe@example.com
                format: email
            firstname:
                type: string
                description: First name of the user
                example: John
            lastname:
                type: string
                description: Last name of the user
                example: Doe
            password:
                type: string
                description: Password of the user
                example: password123
                minLength: 8
            username:
                type: string
                description: Username of the user
                example: johndoe
                minLength: 1
        example:
            email: johndoe@example.com
            firstname: John
            lastname: Doe
            password: password123
            username: johndoe
        required:
            - username
            - email
            - firstname
            - lastname
securityDefinitions:
    jwt_query_Authorization:
        type: apiKey
        description: |4-
            **Security Scopes**:
              * `users:read`: Read users
              * `users:write`: Write users
        name: Authorization
        in: query
