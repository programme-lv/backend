// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	"unicode/utf8"

	users "github.com/programme-lv/backend/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "users" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// UpdateUserRequestBody is the type of the "users" service "updateUser"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginRequestBody is the type of the "users" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// ListUsersResponseBody is the type of the "users" service "listUsers"
// endpoint HTTP response body.
type ListUsersResponseBody []*UserResponse

// GetUserResponseBody is the type of the "users" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Unique user UUID
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
}

// CreateUserResponseBody is the type of the "users" service "createUser"
// endpoint HTTP response body.
type CreateUserResponseBody struct {
	// Unique user UUID
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
}

// UpdateUserOKResponseBody is the type of the "users" service "updateUser"
// endpoint HTTP response body.
type UpdateUserOKResponseBody struct {
	// Unique user UUID
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
}

// ListUsersInsertConflictResponseBody is the type of the "users" service
// "listUsers" endpoint HTTP response body for the "InsertConflict" error.
type ListUsersInsertConflictResponseBody struct {
	ConflictValue string `form:"conflict_value" json:"conflict_value" xml:"conflict_value"`
	// Name of error used by goa to encode response
	Name string `form:"name" json:"name" xml:"name"`
}

// GetUserInsertConflictResponseBody is the type of the "users" service
// "getUser" endpoint HTTP response body for the "InsertConflict" error.
type GetUserInsertConflictResponseBody struct {
	ConflictValue string `form:"conflict_value" json:"conflict_value" xml:"conflict_value"`
	// Name of error used by goa to encode response
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateUserInsertConflictResponseBody is the type of the "users" service
// "createUser" endpoint HTTP response body for the "InsertConflict" error.
type CreateUserInsertConflictResponseBody struct {
	ConflictValue string `form:"conflict_value" json:"conflict_value" xml:"conflict_value"`
	// Name of error used by goa to encode response
	Name string `form:"name" json:"name" xml:"name"`
}

// UpdateUserInsertConflictResponseBody is the type of the "users" service
// "updateUser" endpoint HTTP response body for the "InsertConflict" error.
type UpdateUserInsertConflictResponseBody struct {
	ConflictValue string `form:"conflict_value" json:"conflict_value" xml:"conflict_value"`
	// Name of error used by goa to encode response
	Name string `form:"name" json:"name" xml:"name"`
}

// DeleteUserInsertConflictResponseBody is the type of the "users" service
// "deleteUser" endpoint HTTP response body for the "InsertConflict" error.
type DeleteUserInsertConflictResponseBody struct {
	ConflictValue string `form:"conflict_value" json:"conflict_value" xml:"conflict_value"`
	// Name of error used by goa to encode response
	Name string `form:"name" json:"name" xml:"name"`
}

// LoginInsertConflictResponseBody is the type of the "users" service "login"
// endpoint HTTP response body for the "InsertConflict" error.
type LoginInsertConflictResponseBody struct {
	ConflictValue string `form:"conflict_value" json:"conflict_value" xml:"conflict_value"`
	// Name of error used by goa to encode response
	Name string `form:"name" json:"name" xml:"name"`
}

// QueryCurrentJWTInsertConflictResponseBody is the type of the "users" service
// "queryCurrentJWT" endpoint HTTP response body for the "InsertConflict" error.
type QueryCurrentJWTInsertConflictResponseBody struct {
	ConflictValue string `form:"conflict_value" json:"conflict_value" xml:"conflict_value"`
	// Name of error used by goa to encode response
	Name string `form:"name" json:"name" xml:"name"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// Unique user UUID
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
}

// NewListUsersResponseBody builds the HTTP response body from the result of
// the "listUsers" endpoint of the "users" service.
func NewListUsersResponseBody(res []*users.User) ListUsersResponseBody {
	body := make([]*UserResponse, len(res))
	for i, val := range res {
		body[i] = marshalUsersUserToUserResponse(val)
	}
	return body
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "getUser" endpoint of the "users" service.
func NewGetUserResponseBody(res *users.User) *GetUserResponseBody {
	body := &GetUserResponseBody{
		UUID:      res.UUID,
		Username:  res.Username,
		Email:     res.Email,
		Firstname: res.Firstname,
		Lastname:  res.Lastname,
	}
	return body
}

// NewCreateUserResponseBody builds the HTTP response body from the result of
// the "createUser" endpoint of the "users" service.
func NewCreateUserResponseBody(res *users.User) *CreateUserResponseBody {
	body := &CreateUserResponseBody{
		UUID:      res.UUID,
		Username:  res.Username,
		Email:     res.Email,
		Firstname: res.Firstname,
		Lastname:  res.Lastname,
	}
	return body
}

// NewUpdateUserOKResponseBody builds the HTTP response body from the result of
// the "updateUser" endpoint of the "users" service.
func NewUpdateUserOKResponseBody(res *users.User) *UpdateUserOKResponseBody {
	body := &UpdateUserOKResponseBody{
		UUID:      res.UUID,
		Username:  res.Username,
		Email:     res.Email,
		Firstname: res.Firstname,
		Lastname:  res.Lastname,
	}
	return body
}

// NewListUsersInsertConflictResponseBody builds the HTTP response body from
// the result of the "listUsers" endpoint of the "users" service.
func NewListUsersInsertConflictResponseBody(res *users.ServiceInsertconflict) *ListUsersInsertConflictResponseBody {
	body := &ListUsersInsertConflictResponseBody{
		ConflictValue: res.ConflictValue,
		Name:          res.Name,
	}
	return body
}

// NewGetUserInsertConflictResponseBody builds the HTTP response body from the
// result of the "getUser" endpoint of the "users" service.
func NewGetUserInsertConflictResponseBody(res *users.ServiceInsertconflict) *GetUserInsertConflictResponseBody {
	body := &GetUserInsertConflictResponseBody{
		ConflictValue: res.ConflictValue,
		Name:          res.Name,
	}
	return body
}

// NewCreateUserInsertConflictResponseBody builds the HTTP response body from
// the result of the "createUser" endpoint of the "users" service.
func NewCreateUserInsertConflictResponseBody(res *users.ServiceInsertconflict) *CreateUserInsertConflictResponseBody {
	body := &CreateUserInsertConflictResponseBody{
		ConflictValue: res.ConflictValue,
		Name:          res.Name,
	}
	return body
}

// NewUpdateUserInsertConflictResponseBody builds the HTTP response body from
// the result of the "updateUser" endpoint of the "users" service.
func NewUpdateUserInsertConflictResponseBody(res *users.ServiceInsertconflict) *UpdateUserInsertConflictResponseBody {
	body := &UpdateUserInsertConflictResponseBody{
		ConflictValue: res.ConflictValue,
		Name:          res.Name,
	}
	return body
}

// NewDeleteUserInsertConflictResponseBody builds the HTTP response body from
// the result of the "deleteUser" endpoint of the "users" service.
func NewDeleteUserInsertConflictResponseBody(res *users.ServiceInsertconflict) *DeleteUserInsertConflictResponseBody {
	body := &DeleteUserInsertConflictResponseBody{
		ConflictValue: res.ConflictValue,
		Name:          res.Name,
	}
	return body
}

// NewLoginInsertConflictResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "users" service.
func NewLoginInsertConflictResponseBody(res *users.ServiceInsertconflict) *LoginInsertConflictResponseBody {
	body := &LoginInsertConflictResponseBody{
		ConflictValue: res.ConflictValue,
		Name:          res.Name,
	}
	return body
}

// NewQueryCurrentJWTInsertConflictResponseBody builds the HTTP response body
// from the result of the "queryCurrentJWT" endpoint of the "users" service.
func NewQueryCurrentJWTInsertConflictResponseBody(res *users.ServiceInsertconflict) *QueryCurrentJWTInsertConflictResponseBody {
	body := &QueryCurrentJWTInsertConflictResponseBody{
		ConflictValue: res.ConflictValue,
		Name:          res.Name,
	}
	return body
}

// NewListUsersPayload builds a users service listUsers endpoint payload.
func NewListUsersPayload(token *string) *users.ListUsersPayload {
	v := &users.ListUsersPayload{}
	v.Token = token

	return v
}

// NewGetUserSecureUUIDPayload builds a users service getUser endpoint payload.
func NewGetUserSecureUUIDPayload(uuid string, token string) *users.SecureUUIDPayload {
	v := &users.SecureUUIDPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewCreateUserUserPayload builds a users service createUser endpoint payload.
func NewCreateUserUserPayload(body *CreateUserRequestBody) *users.UserPayload {
	v := &users.UserPayload{
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
		Password:  *body.Password,
	}

	return v
}

// NewUpdateUserPayload builds a users service updateUser endpoint payload.
func NewUpdateUserPayload(body *UpdateUserRequestBody, uuid string, token string) *users.UpdateUserPayload {
	v := &users.UpdateUserPayload{
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
		Password:  body.Password,
	}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewDeleteUserSecureUUIDPayload builds a users service deleteUser endpoint
// payload.
func NewDeleteUserSecureUUIDPayload(uuid string, token string) *users.SecureUUIDPayload {
	v := &users.SecureUUIDPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewLoginPayload builds a users service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *users.LoginPayload {
	v := &users.LoginPayload{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// NewQueryCurrentJWTPayload builds a users service queryCurrentJWT endpoint
// payload.
func NewQueryCurrentJWTPayload(token *string) *users.QueryCurrentJWTPayload {
	v := &users.QueryCurrentJWTPayload{}
	v.Token = token

	return v
}

// ValidateCreateUserRequestBody runs the validations defined on
// CreateUserRequestBody
func ValidateCreateUserRequestBody(body *CreateUserRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 1, true))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	return
}

// ValidateUpdateUserRequestBody runs the validations defined on
// UpdateUserRequestBody
func ValidateUpdateUserRequestBody(body *UpdateUserRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 1, true))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	return
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	return
}
