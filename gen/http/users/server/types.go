// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	users "github.com/programme-lv/backend/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "users" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginRequestBody is the type of the "users" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// GetUserResponseBody is the type of the "users" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Unique user UUID
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
}

// CreateUserResponseBody is the type of the "users" service "createUser"
// endpoint HTTP response body.
type CreateUserResponseBody struct {
	// Unique user UUID
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
}

// QueryCurrentJWTResponseBody is the type of the "users" service
// "queryCurrentJWT" endpoint HTTP response body.
type QueryCurrentJWTResponseBody struct {
	Username  *string  `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	Firstname *string  `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string  `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Email     *string  `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	UUID      *string  `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Scopes    []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	Issuer    *string  `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	Subject   *string  `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	Audience  []string `form:"audience,omitempty" json:"audience,omitempty" xml:"audience,omitempty"`
	ExpiresAt *string  `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	IssuedAt  *string  `form:"issued_at,omitempty" json:"issued_at,omitempty" xml:"issued_at,omitempty"`
	NotBefore *string  `form:"not_before,omitempty" json:"not_before,omitempty" xml:"not_before,omitempty"`
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "getUser" endpoint of the "users" service.
func NewGetUserResponseBody(res *users.User) *GetUserResponseBody {
	body := &GetUserResponseBody{
		UUID:      res.UUID,
		Username:  res.Username,
		Email:     res.Email,
		Firstname: res.Firstname,
		Lastname:  res.Lastname,
	}
	return body
}

// NewCreateUserResponseBody builds the HTTP response body from the result of
// the "createUser" endpoint of the "users" service.
func NewCreateUserResponseBody(res *users.User) *CreateUserResponseBody {
	body := &CreateUserResponseBody{
		UUID:      res.UUID,
		Username:  res.Username,
		Email:     res.Email,
		Firstname: res.Firstname,
		Lastname:  res.Lastname,
	}
	return body
}

// NewQueryCurrentJWTResponseBody builds the HTTP response body from the result
// of the "queryCurrentJWT" endpoint of the "users" service.
func NewQueryCurrentJWTResponseBody(res *users.JWTClaims) *QueryCurrentJWTResponseBody {
	body := &QueryCurrentJWTResponseBody{
		Username:  res.Username,
		Firstname: res.Firstname,
		Lastname:  res.Lastname,
		Email:     res.Email,
		UUID:      res.UUID,
		Issuer:    res.Issuer,
		Subject:   res.Subject,
		ExpiresAt: res.ExpiresAt,
		IssuedAt:  res.IssuedAt,
		NotBefore: res.NotBefore,
	}
	if res.Scopes != nil {
		body.Scopes = make([]string, len(res.Scopes))
		for i, val := range res.Scopes {
			body.Scopes[i] = val
		}
	}
	if res.Audience != nil {
		body.Audience = make([]string, len(res.Audience))
		for i, val := range res.Audience {
			body.Audience[i] = val
		}
	}
	return body
}

// NewGetUserSecureUUIDPayload builds a users service getUser endpoint payload.
func NewGetUserSecureUUIDPayload(uuid string, token string) *users.SecureUUIDPayload {
	v := &users.SecureUUIDPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewCreateUserUserPayload builds a users service createUser endpoint payload.
func NewCreateUserUserPayload(body *CreateUserRequestBody) *users.UserPayload {
	v := &users.UserPayload{
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
		Password:  *body.Password,
	}

	return v
}

// NewDeleteUserSecureUUIDPayload builds a users service deleteUser endpoint
// payload.
func NewDeleteUserSecureUUIDPayload(uuid string, token string) *users.SecureUUIDPayload {
	v := &users.SecureUUIDPayload{}
	v.UUID = uuid
	v.Token = token

	return v
}

// NewLoginPayload builds a users service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *users.LoginPayload {
	v := &users.LoginPayload{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// NewQueryCurrentJWTPayload builds a users service queryCurrentJWT endpoint
// payload.
func NewQueryCurrentJWTPayload(token string) *users.QueryCurrentJWTPayload {
	v := &users.QueryCurrentJWTPayload{}
	v.Token = token

	return v
}

// ValidateCreateUserRequestBody runs the validations defined on
// CreateUserRequestBody
func ValidateCreateUserRequestBody(body *CreateUserRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
