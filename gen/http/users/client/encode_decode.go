// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	users "github.com/programme-lv/backend/gen/users"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetUserRequest instantiates a HTTP request object with method and path
// set to call the "users" service "getUser" endpoint
func (c *Client) BuildGetUserRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uuid string
	)
	{
		p, ok := v.(*users.SecureUUIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "getUser", "*users.SecureUUIDPayload", v)
		}
		uuid = p.UUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserUsersPath(uuid)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "getUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetUserRequest returns an encoder for requests sent to the users
// getUser server.
func EncodeGetUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.SecureUUIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "getUser", "*users.SecureUUIDPayload", v)
		}
		values := req.URL.Query()
		values.Add("Authorization", p.Token)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetUserResponse returns a decoder for responses returned by the users
// getUser endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetUserResponse may return the following errors:
//   - "EmailExistsConflict" (type users.EmailExistsConflict): http.StatusConflict
//   - "UsernameExistsConflict" (type users.UsernameExistsConflict): http.StatusConflict
//   - "InvalidCredentials" (type users.InvalidCredentials): http.StatusUnauthorized
//   - "InvalidUserDetails" (type users.InvalidUserDetails): http.StatusBadRequest
//   - "NotFound" (type users.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeGetUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getUser", err)
			}
			err = ValidateGetUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "getUser", err)
			}
			res := NewGetUserUserOK(&body)
			return res, nil
		case http.StatusConflict:
			en := resp.Header.Get("goa-error")
			switch en {
			case "EmailExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "getUser", err)
				}
				return nil, NewGetUserEmailExistsConflict(body)
			case "UsernameExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "getUser", err)
				}
				return nil, NewGetUserUsernameExistsConflict(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("users", "getUser", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getUser", err)
			}
			return nil, NewGetUserInvalidCredentials(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getUser", err)
			}
			return nil, NewGetUserInvalidUserDetails(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "getUser", err)
			}
			return nil, NewGetUserNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "getUser", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "createUser" endpoint
func (c *Client) BuildCreateUserRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateUserUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "createUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateUserRequest returns an encoder for requests sent to the users
// createUser server.
func EncodeCreateUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.UserPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "createUser", "*users.UserPayload", v)
		}
		body := NewCreateUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "createUser", err)
		}
		return nil
	}
}

// DecodeCreateUserResponse returns a decoder for responses returned by the
// users createUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateUserResponse may return the following errors:
//   - "EmailExistsConflict" (type users.EmailExistsConflict): http.StatusConflict
//   - "UsernameExistsConflict" (type users.UsernameExistsConflict): http.StatusConflict
//   - "InvalidCredentials" (type users.InvalidCredentials): http.StatusUnauthorized
//   - "InvalidUserDetails" (type users.InvalidUserDetails): http.StatusBadRequest
//   - "NotFound" (type users.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeCreateUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "createUser", err)
			}
			err = ValidateCreateUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "createUser", err)
			}
			res := NewCreateUserUserCreated(&body)
			return res, nil
		case http.StatusConflict:
			en := resp.Header.Get("goa-error")
			switch en {
			case "EmailExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "createUser", err)
				}
				return nil, NewCreateUserEmailExistsConflict(body)
			case "UsernameExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "createUser", err)
				}
				return nil, NewCreateUserUsernameExistsConflict(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("users", "createUser", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "createUser", err)
			}
			return nil, NewCreateUserInvalidCredentials(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "createUser", err)
			}
			return nil, NewCreateUserInvalidUserDetails(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "createUser", err)
			}
			return nil, NewCreateUserNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "createUser", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUserRequest instantiates a HTTP request object with method and
// path set to call the "users" service "deleteUser" endpoint
func (c *Client) BuildDeleteUserRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		uuid string
	)
	{
		p, ok := v.(*users.SecureUUIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("users", "deleteUser", "*users.SecureUUIDPayload", v)
		}
		uuid = p.UUID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUserUsersPath(uuid)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "deleteUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteUserRequest returns an encoder for requests sent to the users
// deleteUser server.
func EncodeDeleteUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.SecureUUIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "deleteUser", "*users.SecureUUIDPayload", v)
		}
		values := req.URL.Query()
		values.Add("Authorization", p.Token)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDeleteUserResponse returns a decoder for responses returned by the
// users deleteUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteUserResponse may return the following errors:
//   - "EmailExistsConflict" (type users.EmailExistsConflict): http.StatusConflict
//   - "UsernameExistsConflict" (type users.UsernameExistsConflict): http.StatusConflict
//   - "InvalidCredentials" (type users.InvalidCredentials): http.StatusUnauthorized
//   - "InvalidUserDetails" (type users.InvalidUserDetails): http.StatusBadRequest
//   - "NotFound" (type users.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeDeleteUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusConflict:
			en := resp.Header.Get("goa-error")
			switch en {
			case "EmailExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
				}
				return nil, NewDeleteUserEmailExistsConflict(body)
			case "UsernameExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
				}
				return nil, NewDeleteUserUsernameExistsConflict(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("users", "deleteUser", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
			}
			return nil, NewDeleteUserInvalidCredentials(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
			}
			return nil, NewDeleteUserInvalidUserDetails(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "deleteUser", err)
			}
			return nil, NewDeleteUserNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "deleteUser", resp.StatusCode, string(body))
		}
	}
}

// BuildLoginRequest instantiates a HTTP request object with method and path
// set to call the "users" service "login" endpoint
func (c *Client) BuildLoginRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginUsersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "login", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginRequest returns an encoder for requests sent to the users login
// server.
func EncodeLoginRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.LoginPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "login", "*users.LoginPayload", v)
		}
		body := NewLoginRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "login", err)
		}
		return nil
	}
}

// DecodeLoginResponse returns a decoder for responses returned by the users
// login endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeLoginResponse may return the following errors:
//   - "EmailExistsConflict" (type users.EmailExistsConflict): http.StatusConflict
//   - "UsernameExistsConflict" (type users.UsernameExistsConflict): http.StatusConflict
//   - "InvalidCredentials" (type users.InvalidCredentials): http.StatusUnauthorized
//   - "InvalidUserDetails" (type users.InvalidUserDetails): http.StatusBadRequest
//   - "NotFound" (type users.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "login", err)
			}
			return body, nil
		case http.StatusConflict:
			en := resp.Header.Get("goa-error")
			switch en {
			case "EmailExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "login", err)
				}
				return nil, NewLoginEmailExistsConflict(body)
			case "UsernameExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "login", err)
				}
				return nil, NewLoginUsernameExistsConflict(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("users", "login", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "login", err)
			}
			return nil, NewLoginInvalidCredentials(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "login", err)
			}
			return nil, NewLoginInvalidUserDetails(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "login", err)
			}
			return nil, NewLoginNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "login", resp.StatusCode, string(body))
		}
	}
}

// BuildQueryCurrentJWTRequest instantiates a HTTP request object with method
// and path set to call the "users" service "queryCurrentJWT" endpoint
func (c *Client) BuildQueryCurrentJWTRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: QueryCurrentJWTUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "queryCurrentJWT", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeQueryCurrentJWTRequest returns an encoder for requests sent to the
// users queryCurrentJWT server.
func EncodeQueryCurrentJWTRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*users.QueryCurrentJWTPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "queryCurrentJWT", "*users.QueryCurrentJWTPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeQueryCurrentJWTResponse returns a decoder for responses returned by
// the users queryCurrentJWT endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeQueryCurrentJWTResponse may return the following errors:
//   - "EmailExistsConflict" (type users.EmailExistsConflict): http.StatusConflict
//   - "UsernameExistsConflict" (type users.UsernameExistsConflict): http.StatusConflict
//   - "InvalidCredentials" (type users.InvalidCredentials): http.StatusUnauthorized
//   - "InvalidUserDetails" (type users.InvalidUserDetails): http.StatusBadRequest
//   - "NotFound" (type users.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeQueryCurrentJWTResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body QueryCurrentJWTResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "queryCurrentJWT", err)
			}
			res := NewQueryCurrentJWTJWTClaimsOK(&body)
			return res, nil
		case http.StatusConflict:
			en := resp.Header.Get("goa-error")
			switch en {
			case "EmailExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "queryCurrentJWT", err)
				}
				return nil, NewQueryCurrentJWTEmailExistsConflict(body)
			case "UsernameExistsConflict":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("users", "queryCurrentJWT", err)
				}
				return nil, NewQueryCurrentJWTUsernameExistsConflict(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("users", "queryCurrentJWT", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "queryCurrentJWT", err)
			}
			return nil, NewQueryCurrentJWTInvalidCredentials(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "queryCurrentJWT", err)
			}
			return nil, NewQueryCurrentJWTInvalidUserDetails(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "queryCurrentJWT", err)
			}
			return nil, NewQueryCurrentJWTNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "queryCurrentJWT", resp.StatusCode, string(body))
		}
	}
}
