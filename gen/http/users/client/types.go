// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package client

import (
	users "github.com/programme-lv/backend/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "users" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// Password of the user
	Password string `form:"password" json:"password" xml:"password"`
}

// UpdateUserRequestBody is the type of the "users" service "updateUser"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginRequestBody is the type of the "users" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Password of the user
	Password string `form:"password" json:"password" xml:"password"`
}

// ListUsersResponseBody is the type of the "users" service "listUsers"
// endpoint HTTP response body.
type ListUsersResponseBody []*UserResponse

// GetUserResponseBody is the type of the "users" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// CreateUserResponseBody is the type of the "users" service "createUser"
// endpoint HTTP response body.
type CreateUserResponseBody struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// UpdateUserOKResponseBody is the type of the "users" service "updateUser"
// endpoint HTTP response body.
type UpdateUserOKResponseBody struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// QueryCurrentJWTResponseBody is the type of the "users" service
// "queryCurrentJWT" endpoint HTTP response body.
type QueryCurrentJWTResponseBody struct {
	Username  *string  `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	Firstname *string  `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string  `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Email     *string  `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	UUID      *string  `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	Scopes    []string `form:"scopes,omitempty" json:"scopes,omitempty" xml:"scopes,omitempty"`
	Issuer    *string  `form:"issuer,omitempty" json:"issuer,omitempty" xml:"issuer,omitempty"`
	Subject   *string  `form:"subject,omitempty" json:"subject,omitempty" xml:"subject,omitempty"`
	Audience  []string `form:"audience,omitempty" json:"audience,omitempty" xml:"audience,omitempty"`
	ExpiresAt *string  `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
	IssuedAt  *string  `form:"issued_at,omitempty" json:"issued_at,omitempty" xml:"issued_at,omitempty"`
	NotBefore *string  `form:"not_before,omitempty" json:"not_before,omitempty" xml:"not_before,omitempty"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// UpdateUserBadRequestResponseBody is used to define fields on response body
// types.
type UpdateUserBadRequestResponseBody struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// NewCreateUserRequestBody builds the HTTP request body from the payload of
// the "createUser" endpoint of the "users" service.
func NewCreateUserRequestBody(p *users.UserPayload) *CreateUserRequestBody {
	body := &CreateUserRequestBody{
		Username:  p.Username,
		Email:     p.Email,
		Firstname: p.Firstname,
		Lastname:  p.Lastname,
		Password:  p.Password,
	}
	return body
}

// NewUpdateUserRequestBody builds the HTTP request body from the payload of
// the "updateUser" endpoint of the "users" service.
func NewUpdateUserRequestBody(p *users.UpdateUserPayload) *UpdateUserRequestBody {
	body := &UpdateUserRequestBody{
		Username:  p.Username,
		Email:     p.Email,
		Firstname: p.Firstname,
		Lastname:  p.Lastname,
		Password:  p.Password,
	}
	return body
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "users" service.
func NewLoginRequestBody(p *users.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Username: p.Username,
		Password: p.Password,
	}
	return body
}

// NewListUsersUserOK builds a "users" service "listUsers" endpoint result from
// a HTTP "OK" response.
func NewListUsersUserOK(body []*UserResponse) []*users.User {
	v := make([]*users.User, len(body))
	for i, val := range body {
		v[i] = unmarshalUserResponseToUsersUser(val)
	}

	return v
}

// NewListUsersEmailExists builds a users service listUsers endpoint
// EmailExists error.
func NewListUsersEmailExists(body string) users.EmailExists {
	v := users.EmailExists(body)

	return v
}

// NewListUsersUsernameExists builds a users service listUsers endpoint
// UsernameExists error.
func NewListUsersUsernameExists(body string) users.UsernameExists {
	v := users.UsernameExists(body)

	return v
}

// NewListUsersInvalidCredentials builds a users service listUsers endpoint
// InvalidCredentials error.
func NewListUsersInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewListUsersInvalidUserDetails builds a users service listUsers endpoint
// InvalidUserDetails error.
func NewListUsersInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewListUsersNotFound builds a users service listUsers endpoint NotFound
// error.
func NewListUsersNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewGetUserUserOK builds a "users" service "getUser" endpoint result from a
// HTTP "OK" response.
func NewGetUserUserOK(body *GetUserResponseBody) *users.User {
	v := &users.User{
		UUID:      *body.UUID,
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
	}

	return v
}

// NewGetUserEmailExists builds a users service getUser endpoint EmailExists
// error.
func NewGetUserEmailExists(body string) users.EmailExists {
	v := users.EmailExists(body)

	return v
}

// NewGetUserUsernameExists builds a users service getUser endpoint
// UsernameExists error.
func NewGetUserUsernameExists(body string) users.UsernameExists {
	v := users.UsernameExists(body)

	return v
}

// NewGetUserInvalidCredentials builds a users service getUser endpoint
// InvalidCredentials error.
func NewGetUserInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewGetUserInvalidUserDetails builds a users service getUser endpoint
// InvalidUserDetails error.
func NewGetUserInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewGetUserNotFound builds a users service getUser endpoint NotFound error.
func NewGetUserNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewCreateUserUserCreated builds a "users" service "createUser" endpoint
// result from a HTTP "Created" response.
func NewCreateUserUserCreated(body *CreateUserResponseBody) *users.User {
	v := &users.User{
		UUID:      *body.UUID,
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
	}

	return v
}

// NewCreateUserEmailExists builds a users service createUser endpoint
// EmailExists error.
func NewCreateUserEmailExists(body string) users.EmailExists {
	v := users.EmailExists(body)

	return v
}

// NewCreateUserUsernameExists builds a users service createUser endpoint
// UsernameExists error.
func NewCreateUserUsernameExists(body string) users.UsernameExists {
	v := users.UsernameExists(body)

	return v
}

// NewCreateUserInvalidCredentials builds a users service createUser endpoint
// InvalidCredentials error.
func NewCreateUserInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewCreateUserInvalidUserDetails builds a users service createUser endpoint
// InvalidUserDetails error.
func NewCreateUserInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewCreateUserNotFound builds a users service createUser endpoint NotFound
// error.
func NewCreateUserNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewUpdateUserUserOK builds a "users" service "updateUser" endpoint result
// from a HTTP "OK" response.
func NewUpdateUserUserOK(body *UpdateUserOKResponseBody) *users.User {
	v := &users.User{
		UUID:      *body.UUID,
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
	}

	return v
}

// NewUpdateUserEmailExists builds a users service updateUser endpoint
// EmailExists error.
func NewUpdateUserEmailExists(body string) users.EmailExists {
	v := users.EmailExists(body)

	return v
}

// NewUpdateUserUsernameExists builds a users service updateUser endpoint
// UsernameExists error.
func NewUpdateUserUsernameExists(body string) users.UsernameExists {
	v := users.UsernameExists(body)

	return v
}

// NewUpdateUserInvalidCredentials builds a users service updateUser endpoint
// InvalidCredentials error.
func NewUpdateUserInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewUpdateUserInvalidUserDetails builds a users service updateUser endpoint
// InvalidUserDetails error.
func NewUpdateUserInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewUpdateUserNotFound builds a users service updateUser endpoint NotFound
// error.
func NewUpdateUserNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewDeleteUserEmailExists builds a users service deleteUser endpoint
// EmailExists error.
func NewDeleteUserEmailExists(body string) users.EmailExists {
	v := users.EmailExists(body)

	return v
}

// NewDeleteUserUsernameExists builds a users service deleteUser endpoint
// UsernameExists error.
func NewDeleteUserUsernameExists(body string) users.UsernameExists {
	v := users.UsernameExists(body)

	return v
}

// NewDeleteUserInvalidCredentials builds a users service deleteUser endpoint
// InvalidCredentials error.
func NewDeleteUserInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewDeleteUserInvalidUserDetails builds a users service deleteUser endpoint
// InvalidUserDetails error.
func NewDeleteUserInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewDeleteUserNotFound builds a users service deleteUser endpoint NotFound
// error.
func NewDeleteUserNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewLoginEmailExists builds a users service login endpoint EmailExists error.
func NewLoginEmailExists(body string) users.EmailExists {
	v := users.EmailExists(body)

	return v
}

// NewLoginUsernameExists builds a users service login endpoint UsernameExists
// error.
func NewLoginUsernameExists(body string) users.UsernameExists {
	v := users.UsernameExists(body)

	return v
}

// NewLoginInvalidCredentials builds a users service login endpoint
// InvalidCredentials error.
func NewLoginInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewLoginInvalidUserDetails builds a users service login endpoint
// InvalidUserDetails error.
func NewLoginInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewLoginNotFound builds a users service login endpoint NotFound error.
func NewLoginNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewQueryCurrentJWTJWTClaimsOK builds a "users" service "queryCurrentJWT"
// endpoint result from a HTTP "OK" response.
func NewQueryCurrentJWTJWTClaimsOK(body *QueryCurrentJWTResponseBody) *users.JWTClaims {
	v := &users.JWTClaims{
		Username:  body.Username,
		Firstname: body.Firstname,
		Lastname:  body.Lastname,
		Email:     body.Email,
		UUID:      body.UUID,
		Issuer:    body.Issuer,
		Subject:   body.Subject,
		ExpiresAt: body.ExpiresAt,
		IssuedAt:  body.IssuedAt,
		NotBefore: body.NotBefore,
	}
	if body.Scopes != nil {
		v.Scopes = make([]string, len(body.Scopes))
		for i, val := range body.Scopes {
			v.Scopes[i] = val
		}
	}
	if body.Audience != nil {
		v.Audience = make([]string, len(body.Audience))
		for i, val := range body.Audience {
			v.Audience[i] = val
		}
	}

	return v
}

// NewQueryCurrentJWTEmailExists builds a users service queryCurrentJWT
// endpoint EmailExists error.
func NewQueryCurrentJWTEmailExists(body string) users.EmailExists {
	v := users.EmailExists(body)

	return v
}

// NewQueryCurrentJWTUsernameExists builds a users service queryCurrentJWT
// endpoint UsernameExists error.
func NewQueryCurrentJWTUsernameExists(body string) users.UsernameExists {
	v := users.UsernameExists(body)

	return v
}

// NewQueryCurrentJWTInvalidCredentials builds a users service queryCurrentJWT
// endpoint InvalidCredentials error.
func NewQueryCurrentJWTInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewQueryCurrentJWTInvalidUserDetails builds a users service queryCurrentJWT
// endpoint InvalidUserDetails error.
func NewQueryCurrentJWTInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewQueryCurrentJWTNotFound builds a users service queryCurrentJWT endpoint
// NotFound error.
func NewQueryCurrentJWTNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// ValidateGetUserResponseBody runs the validations defined on
// GetUserResponseBody
func ValidateGetUserResponseBody(body *GetUserResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateCreateUserResponseBody runs the validations defined on
// CreateUserResponseBody
func ValidateCreateUserResponseBody(body *CreateUserResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdateUserOKResponseBody runs the validations defined on
// UpdateUserOKResponseBody
func ValidateUpdateUserOKResponseBody(body *UpdateUserOKResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUserResponse runs the validations defined on UserResponse
func ValidateUserResponse(body *UserResponse) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdateUserBadRequestResponseBody runs the validations defined on
// UpdateUserBad RequestResponseBody
func ValidateUpdateUserBadRequestResponseBody(body *UpdateUserBadRequestResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}
