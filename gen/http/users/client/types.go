// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package client

import (
	users "github.com/programme-lv/backend/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "users" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// Password of the user
	Password string `form:"password" json:"password" xml:"password"`
}

// UpdateUserRequestBody is the type of the "users" service "updateUser"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last name of the user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// Password of the user
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginRequestBody is the type of the "users" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Username of the user
	Username string `form:"username" json:"username" xml:"username"`
	// Password of the user
	Password string `form:"password" json:"password" xml:"password"`
}

// ListUsersResponseBody is the type of the "users" service "listUsers"
// endpoint HTTP response body.
type ListUsersResponseBody []*UserResponse

// GetUserResponseBody is the type of the "users" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// CreateUserResponseBody is the type of the "users" service "createUser"
// endpoint HTTP response body.
type CreateUserResponseBody struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// UpdateUserOKResponseBody is the type of the "users" service "updateUser"
// endpoint HTTP response body.
type UpdateUserOKResponseBody struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// ListUsersInsertConflictResponseBody is the type of the "users" service
// "listUsers" endpoint HTTP response body for the "InsertConflict" error.
type ListUsersInsertConflictResponseBody struct {
	ConflictValue *string `form:"conflict_value,omitempty" json:"conflict_value,omitempty" xml:"conflict_value,omitempty"`
	// Name of error used by goa to encode response
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetUserInsertConflictResponseBody is the type of the "users" service
// "getUser" endpoint HTTP response body for the "InsertConflict" error.
type GetUserInsertConflictResponseBody struct {
	ConflictValue *string `form:"conflict_value,omitempty" json:"conflict_value,omitempty" xml:"conflict_value,omitempty"`
	// Name of error used by goa to encode response
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateUserInsertConflictResponseBody is the type of the "users" service
// "createUser" endpoint HTTP response body for the "InsertConflict" error.
type CreateUserInsertConflictResponseBody struct {
	ConflictValue *string `form:"conflict_value,omitempty" json:"conflict_value,omitempty" xml:"conflict_value,omitempty"`
	// Name of error used by goa to encode response
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateUserInsertConflictResponseBody is the type of the "users" service
// "updateUser" endpoint HTTP response body for the "InsertConflict" error.
type UpdateUserInsertConflictResponseBody struct {
	ConflictValue *string `form:"conflict_value,omitempty" json:"conflict_value,omitempty" xml:"conflict_value,omitempty"`
	// Name of error used by goa to encode response
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// DeleteUserInsertConflictResponseBody is the type of the "users" service
// "deleteUser" endpoint HTTP response body for the "InsertConflict" error.
type DeleteUserInsertConflictResponseBody struct {
	ConflictValue *string `form:"conflict_value,omitempty" json:"conflict_value,omitempty" xml:"conflict_value,omitempty"`
	// Name of error used by goa to encode response
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// LoginInsertConflictResponseBody is the type of the "users" service "login"
// endpoint HTTP response body for the "InsertConflict" error.
type LoginInsertConflictResponseBody struct {
	ConflictValue *string `form:"conflict_value,omitempty" json:"conflict_value,omitempty" xml:"conflict_value,omitempty"`
	// Name of error used by goa to encode response
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// QueryCurrentJWTInsertConflictResponseBody is the type of the "users" service
// "queryCurrentJWT" endpoint HTTP response body for the "InsertConflict" error.
type QueryCurrentJWTInsertConflictResponseBody struct {
	ConflictValue *string `form:"conflict_value,omitempty" json:"conflict_value,omitempty" xml:"conflict_value,omitempty"`
	// Name of error used by goa to encode response
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// UpdateUserBadRequestResponseBody is used to define fields on response body
// types.
type UpdateUserBadRequestResponseBody struct {
	// Unique user UUID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// Username of the user
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last name of the user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
}

// NewCreateUserRequestBody builds the HTTP request body from the payload of
// the "createUser" endpoint of the "users" service.
func NewCreateUserRequestBody(p *users.UserPayload) *CreateUserRequestBody {
	body := &CreateUserRequestBody{
		Username:  p.Username,
		Email:     p.Email,
		Firstname: p.Firstname,
		Lastname:  p.Lastname,
		Password:  p.Password,
	}
	return body
}

// NewUpdateUserRequestBody builds the HTTP request body from the payload of
// the "updateUser" endpoint of the "users" service.
func NewUpdateUserRequestBody(p *users.UpdateUserPayload) *UpdateUserRequestBody {
	body := &UpdateUserRequestBody{
		Username:  p.Username,
		Email:     p.Email,
		Firstname: p.Firstname,
		Lastname:  p.Lastname,
		Password:  p.Password,
	}
	return body
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "users" service.
func NewLoginRequestBody(p *users.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Username: p.Username,
		Password: p.Password,
	}
	return body
}

// NewListUsersUserOK builds a "users" service "listUsers" endpoint result from
// a HTTP "OK" response.
func NewListUsersUserOK(body []*UserResponse) []*users.User {
	v := make([]*users.User, len(body))
	for i, val := range body {
		v[i] = unmarshalUserResponseToUsersUser(val)
	}

	return v
}

// NewListUsersInsertConflict builds a users service listUsers endpoint
// InsertConflict error.
func NewListUsersInsertConflict(body *ListUsersInsertConflictResponseBody) *users.ServiceInsertconflict {
	v := &users.ServiceInsertconflict{
		ConflictValue: *body.ConflictValue,
		Name:          *body.Name,
	}

	return v
}

// NewListUsersInvalidCredentials builds a users service listUsers endpoint
// InvalidCredentials error.
func NewListUsersInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewListUsersInvalidUserDetails builds a users service listUsers endpoint
// InvalidUserDetails error.
func NewListUsersInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewListUsersNotFound builds a users service listUsers endpoint NotFound
// error.
func NewListUsersNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewGetUserUserOK builds a "users" service "getUser" endpoint result from a
// HTTP "OK" response.
func NewGetUserUserOK(body *GetUserResponseBody) *users.User {
	v := &users.User{
		UUID:      *body.UUID,
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
	}

	return v
}

// NewGetUserInsertConflict builds a users service getUser endpoint
// InsertConflict error.
func NewGetUserInsertConflict(body *GetUserInsertConflictResponseBody) *users.ServiceInsertconflict {
	v := &users.ServiceInsertconflict{
		ConflictValue: *body.ConflictValue,
		Name:          *body.Name,
	}

	return v
}

// NewGetUserInvalidCredentials builds a users service getUser endpoint
// InvalidCredentials error.
func NewGetUserInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewGetUserInvalidUserDetails builds a users service getUser endpoint
// InvalidUserDetails error.
func NewGetUserInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewGetUserNotFound builds a users service getUser endpoint NotFound error.
func NewGetUserNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewCreateUserUserCreated builds a "users" service "createUser" endpoint
// result from a HTTP "Created" response.
func NewCreateUserUserCreated(body *CreateUserResponseBody) *users.User {
	v := &users.User{
		UUID:      *body.UUID,
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
	}

	return v
}

// NewCreateUserInsertConflict builds a users service createUser endpoint
// InsertConflict error.
func NewCreateUserInsertConflict(body *CreateUserInsertConflictResponseBody) *users.ServiceInsertconflict {
	v := &users.ServiceInsertconflict{
		ConflictValue: *body.ConflictValue,
		Name:          *body.Name,
	}

	return v
}

// NewCreateUserInvalidCredentials builds a users service createUser endpoint
// InvalidCredentials error.
func NewCreateUserInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewCreateUserInvalidUserDetails builds a users service createUser endpoint
// InvalidUserDetails error.
func NewCreateUserInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewCreateUserNotFound builds a users service createUser endpoint NotFound
// error.
func NewCreateUserNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewUpdateUserUserOK builds a "users" service "updateUser" endpoint result
// from a HTTP "OK" response.
func NewUpdateUserUserOK(body *UpdateUserOKResponseBody) *users.User {
	v := &users.User{
		UUID:      *body.UUID,
		Username:  *body.Username,
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
	}

	return v
}

// NewUpdateUserInsertConflict builds a users service updateUser endpoint
// InsertConflict error.
func NewUpdateUserInsertConflict(body *UpdateUserInsertConflictResponseBody) *users.ServiceInsertconflict {
	v := &users.ServiceInsertconflict{
		ConflictValue: *body.ConflictValue,
		Name:          *body.Name,
	}

	return v
}

// NewUpdateUserInvalidCredentials builds a users service updateUser endpoint
// InvalidCredentials error.
func NewUpdateUserInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewUpdateUserInvalidUserDetails builds a users service updateUser endpoint
// InvalidUserDetails error.
func NewUpdateUserInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewUpdateUserNotFound builds a users service updateUser endpoint NotFound
// error.
func NewUpdateUserNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewDeleteUserInsertConflict builds a users service deleteUser endpoint
// InsertConflict error.
func NewDeleteUserInsertConflict(body *DeleteUserInsertConflictResponseBody) *users.ServiceInsertconflict {
	v := &users.ServiceInsertconflict{
		ConflictValue: *body.ConflictValue,
		Name:          *body.Name,
	}

	return v
}

// NewDeleteUserInvalidCredentials builds a users service deleteUser endpoint
// InvalidCredentials error.
func NewDeleteUserInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewDeleteUserInvalidUserDetails builds a users service deleteUser endpoint
// InvalidUserDetails error.
func NewDeleteUserInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewDeleteUserNotFound builds a users service deleteUser endpoint NotFound
// error.
func NewDeleteUserNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewLoginInsertConflict builds a users service login endpoint InsertConflict
// error.
func NewLoginInsertConflict(body *LoginInsertConflictResponseBody) *users.ServiceInsertconflict {
	v := &users.ServiceInsertconflict{
		ConflictValue: *body.ConflictValue,
		Name:          *body.Name,
	}

	return v
}

// NewLoginInvalidCredentials builds a users service login endpoint
// InvalidCredentials error.
func NewLoginInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewLoginInvalidUserDetails builds a users service login endpoint
// InvalidUserDetails error.
func NewLoginInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewLoginNotFound builds a users service login endpoint NotFound error.
func NewLoginNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// NewQueryCurrentJWTInsertConflict builds a users service queryCurrentJWT
// endpoint InsertConflict error.
func NewQueryCurrentJWTInsertConflict(body *QueryCurrentJWTInsertConflictResponseBody) *users.ServiceInsertconflict {
	v := &users.ServiceInsertconflict{
		ConflictValue: *body.ConflictValue,
		Name:          *body.Name,
	}

	return v
}

// NewQueryCurrentJWTInvalidCredentials builds a users service queryCurrentJWT
// endpoint InvalidCredentials error.
func NewQueryCurrentJWTInvalidCredentials(body string) users.InvalidCredentials {
	v := users.InvalidCredentials(body)

	return v
}

// NewQueryCurrentJWTInvalidUserDetails builds a users service queryCurrentJWT
// endpoint InvalidUserDetails error.
func NewQueryCurrentJWTInvalidUserDetails(body string) users.InvalidUserDetails {
	v := users.InvalidUserDetails(body)

	return v
}

// NewQueryCurrentJWTNotFound builds a users service queryCurrentJWT endpoint
// NotFound error.
func NewQueryCurrentJWTNotFound(body string) users.NotFound {
	v := users.NotFound(body)

	return v
}

// ValidateGetUserResponseBody runs the validations defined on
// GetUserResponseBody
func ValidateGetUserResponseBody(body *GetUserResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateCreateUserResponseBody runs the validations defined on
// CreateUserResponseBody
func ValidateCreateUserResponseBody(body *CreateUserResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdateUserOKResponseBody runs the validations defined on
// UpdateUserOKResponseBody
func ValidateUpdateUserOKResponseBody(body *UpdateUserOKResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateListUsersInsertConflictResponseBody runs the validations defined on
// listUsers_InsertConflict_response_body
func ValidateListUsersInsertConflictResponseBody(body *ListUsersInsertConflictResponseBody) (err error) {
	if body.ConflictValue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("conflict_value", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGetUserInsertConflictResponseBody runs the validations defined on
// getUser_InsertConflict_response_body
func ValidateGetUserInsertConflictResponseBody(body *GetUserInsertConflictResponseBody) (err error) {
	if body.ConflictValue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("conflict_value", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateUserInsertConflictResponseBody runs the validations defined on
// createUser_InsertConflict_response_body
func ValidateCreateUserInsertConflictResponseBody(body *CreateUserInsertConflictResponseBody) (err error) {
	if body.ConflictValue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("conflict_value", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateUserInsertConflictResponseBody runs the validations defined on
// updateUser_InsertConflict_response_body
func ValidateUpdateUserInsertConflictResponseBody(body *UpdateUserInsertConflictResponseBody) (err error) {
	if body.ConflictValue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("conflict_value", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateDeleteUserInsertConflictResponseBody runs the validations defined on
// deleteUser_InsertConflict_response_body
func ValidateDeleteUserInsertConflictResponseBody(body *DeleteUserInsertConflictResponseBody) (err error) {
	if body.ConflictValue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("conflict_value", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateLoginInsertConflictResponseBody runs the validations defined on
// login_InsertConflict_response_body
func ValidateLoginInsertConflictResponseBody(body *LoginInsertConflictResponseBody) (err error) {
	if body.ConflictValue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("conflict_value", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateQueryCurrentJWTInsertConflictResponseBody runs the validations
// defined on queryCurrentJWT_InsertConflict_response_body
func ValidateQueryCurrentJWTInsertConflictResponseBody(body *QueryCurrentJWTInsertConflictResponseBody) (err error) {
	if body.ConflictValue == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("conflict_value", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUserResponse runs the validations defined on UserResponse
func ValidateUserResponse(body *UserResponse) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdateUserBadRequestResponseBody runs the validations defined on
// UpdateUserBad RequestResponseBody
func ValidateUpdateUserBadRequestResponseBody(body *UpdateUserBadRequestResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}
