// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	users "github.com/programme-lv/backend/gen/users"
	goa "goa.design/goa/v3/pkg"
)

// BuildListUsersPayload builds the payload for the users listUsers endpoint
// from CLI flags.
func BuildListUsersPayload(usersListUsersToken string) (*users.ListUsersPayload, error) {
	var token *string
	{
		if usersListUsersToken != "" {
			token = &usersListUsersToken
		}
	}
	v := &users.ListUsersPayload{}
	v.Token = token

	return v, nil
}

// BuildGetUserPayload builds the payload for the users getUser endpoint from
// CLI flags.
func BuildGetUserPayload(usersGetUserUUID string, usersGetUserToken string) (*users.SecureUUIDPayload, error) {
	var uuid string
	{
		uuid = usersGetUserUUID
	}
	var token string
	{
		token = usersGetUserToken
	}
	v := &users.SecureUUIDPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildCreateUserPayload builds the payload for the users createUser endpoint
// from CLI flags.
func BuildCreateUserPayload(usersCreateUserBody string) (*users.UserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"johndoe@example.com\",\n      \"firstname\": \"John\",\n      \"lastname\": \"Doe\",\n      \"password\": \"password123\",\n      \"username\": \"johndoe\"\n   }'")
		}
		if utf8.RuneCountInString(body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 1, true))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if utf8.RuneCountInString(body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 8, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &users.UserPayload{
		Username:  body.Username,
		Email:     body.Email,
		Firstname: body.Firstname,
		Lastname:  body.Lastname,
		Password:  body.Password,
	}

	return v, nil
}

// BuildUpdateUserPayload builds the payload for the users updateUser endpoint
// from CLI flags.
func BuildUpdateUserPayload(usersUpdateUserBody string, usersUpdateUserUUID string, usersUpdateUserToken string) (*users.UpdateUserPayload, error) {
	var err error
	var body UpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"johndoe@example.com\",\n      \"firstname\": \"John\",\n      \"lastname\": \"Doe\",\n      \"password\": \"password123\",\n      \"username\": \"johndoe\"\n   }'")
		}
		if utf8.RuneCountInString(body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 1, true))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if body.Password != nil {
			if utf8.RuneCountInString(*body.Password) < 8 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var uuid string
	{
		uuid = usersUpdateUserUUID
	}
	var token string
	{
		token = usersUpdateUserToken
	}
	v := &users.UpdateUserPayload{
		Username:  body.Username,
		Email:     body.Email,
		Firstname: body.Firstname,
		Lastname:  body.Lastname,
		Password:  body.Password,
	}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the users deleteUser endpoint
// from CLI flags.
func BuildDeleteUserPayload(usersDeleteUserUUID string, usersDeleteUserToken string) (*users.SecureUUIDPayload, error) {
	var uuid string
	{
		uuid = usersDeleteUserUUID
	}
	var token string
	{
		token = usersDeleteUserToken
	}
	v := &users.SecureUUIDPayload{}
	v.UUID = uuid
	v.Token = token

	return v, nil
}

// BuildLoginPayload builds the payload for the users login endpoint from CLI
// flags.
func BuildLoginPayload(usersLoginBody string) (*users.LoginPayload, error) {
	var err error
	var body LoginRequestBody
	{
		err = json.Unmarshal([]byte(usersLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"password123\",\n      \"username\": \"johndoe\"\n   }'")
		}
		if utf8.RuneCountInString(body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 8, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &users.LoginPayload{
		Username: body.Username,
		Password: body.Password,
	}

	return v, nil
}

// BuildQueryCurrentJWTPayload builds the payload for the users queryCurrentJWT
// endpoint from CLI flags.
func BuildQueryCurrentJWTPayload(usersQueryCurrentJWTToken string) (*users.QueryCurrentJWTPayload, error) {
	var token string
	{
		token = usersQueryCurrentJWTToken
	}
	v := &users.QueryCurrentJWTPayload{}
	v.Token = token

	return v, nil
}
