// Code generated by goa v3.18.2, DO NOT EDIT.
//
// tasks HTTP server types
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	tasks "github.com/programme-lv/backend/gen/tasks"
)

// ListTasksResponseBody is the type of the "tasks" service "listTasks"
// endpoint HTTP response body.
type ListTasksResponseBody []*TaskResponse

// GetTaskResponseBody is the type of the "tasks" service "getTask" endpoint
// HTTP response body.
type GetTaskResponseBody struct {
	// ID of the published task
	PublishedTaskID string `form:"published_task_id" json:"published_task_id" xml:"published_task_id"`
	// Full name of the task
	TaskFullName string `form:"task_full_name" json:"task_full_name" xml:"task_full_name"`
	// Memory limit in megabytes
	MemoryLimitMegabytes int `form:"memory_limit_megabytes" json:"memory_limit_megabytes" xml:"memory_limit_megabytes"`
	// CPU time limit in seconds
	CPUTimeLimitSeconds float64 `form:"cpu_time_limit_seconds" json:"cpu_time_limit_seconds" xml:"cpu_time_limit_seconds"`
	// Origin olympiad of the task
	OriginOlympiad string `form:"origin_olympiad" json:"origin_olympiad" xml:"origin_olympiad"`
	// URL of the illustration image
	IllustrationImgURL *string `form:"illustration_img_url,omitempty" json:"illustration_img_url,omitempty" xml:"illustration_img_url,omitempty"`
	// Difficulty rating of the task
	DifficultyRating int `form:"difficulty_rating" json:"difficulty_rating" xml:"difficulty_rating"`
	// Default markdown statement of the task
	DefaultMdStatement *MarkdownStatementResponseBody `form:"default_md_statement,omitempty" json:"default_md_statement,omitempty" xml:"default_md_statement,omitempty"`
	// Examples for the task
	Examples []*ExampleResponseBody `form:"examples,omitempty" json:"examples,omitempty" xml:"examples,omitempty"`
	// URL of the default PDF statement
	DefaultPdfStatementURL *string `form:"default_pdf_statement_url,omitempty" json:"default_pdf_statement_url,omitempty" xml:"default_pdf_statement_url,omitempty"`
	// Origin notes for the task
	OriginNotes map[string]string `form:"origin_notes,omitempty" json:"origin_notes,omitempty" xml:"origin_notes,omitempty"`
	// Visible input subtasks
	VisibleInputSubtasks []*StInputsResponseBody `form:"visible_input_subtasks,omitempty" json:"visible_input_subtasks,omitempty" xml:"visible_input_subtasks,omitempty"`
}

// TaskResponse is used to define fields on response body types.
type TaskResponse struct {
	// ID of the published task
	PublishedTaskID string `form:"published_task_id" json:"published_task_id" xml:"published_task_id"`
	// Full name of the task
	TaskFullName string `form:"task_full_name" json:"task_full_name" xml:"task_full_name"`
	// Memory limit in megabytes
	MemoryLimitMegabytes int `form:"memory_limit_megabytes" json:"memory_limit_megabytes" xml:"memory_limit_megabytes"`
	// CPU time limit in seconds
	CPUTimeLimitSeconds float64 `form:"cpu_time_limit_seconds" json:"cpu_time_limit_seconds" xml:"cpu_time_limit_seconds"`
	// Origin olympiad of the task
	OriginOlympiad string `form:"origin_olympiad" json:"origin_olympiad" xml:"origin_olympiad"`
	// URL of the illustration image
	IllustrationImgURL *string `form:"illustration_img_url,omitempty" json:"illustration_img_url,omitempty" xml:"illustration_img_url,omitempty"`
	// Difficulty rating of the task
	DifficultyRating int `form:"difficulty_rating" json:"difficulty_rating" xml:"difficulty_rating"`
	// Default markdown statement of the task
	DefaultMdStatement *MarkdownStatementResponse `form:"default_md_statement,omitempty" json:"default_md_statement,omitempty" xml:"default_md_statement,omitempty"`
	// Examples for the task
	Examples []*ExampleResponse `form:"examples,omitempty" json:"examples,omitempty" xml:"examples,omitempty"`
	// URL of the default PDF statement
	DefaultPdfStatementURL *string `form:"default_pdf_statement_url,omitempty" json:"default_pdf_statement_url,omitempty" xml:"default_pdf_statement_url,omitempty"`
	// Origin notes for the task
	OriginNotes map[string]string `form:"origin_notes,omitempty" json:"origin_notes,omitempty" xml:"origin_notes,omitempty"`
	// Visible input subtasks
	VisibleInputSubtasks []*StInputsResponse `form:"visible_input_subtasks,omitempty" json:"visible_input_subtasks,omitempty" xml:"visible_input_subtasks,omitempty"`
}

// MarkdownStatementResponse is used to define fields on response body types.
type MarkdownStatementResponse struct {
	// Story section of the markdown statement
	Story string `form:"story" json:"story" xml:"story"`
	// Input section of the markdown statement
	Input string `form:"input" json:"input" xml:"input"`
	// Output section of the markdown statement
	Output string `form:"output" json:"output" xml:"output"`
	// Notes section of the markdown statement
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
	// Scoring section of the markdown statement
	Scoring *string `form:"scoring,omitempty" json:"scoring,omitempty" xml:"scoring,omitempty"`
}

// ExampleResponse is used to define fields on response body types.
type ExampleResponse struct {
	// Example input
	Input string `form:"input" json:"input" xml:"input"`
	// Example output
	Output string `form:"output" json:"output" xml:"output"`
	// Markdown note for the example
	MdNote *string `form:"md_note,omitempty" json:"md_note,omitempty" xml:"md_note,omitempty"`
}

// StInputsResponse is used to define fields on response body types.
type StInputsResponse struct {
	// Subtask number
	Subtask int `form:"subtask" json:"subtask" xml:"subtask"`
	// Inputs for the subtask
	Inputs []string `form:"inputs" json:"inputs" xml:"inputs"`
}

// MarkdownStatementResponseBody is used to define fields on response body
// types.
type MarkdownStatementResponseBody struct {
	// Story section of the markdown statement
	Story string `form:"story" json:"story" xml:"story"`
	// Input section of the markdown statement
	Input string `form:"input" json:"input" xml:"input"`
	// Output section of the markdown statement
	Output string `form:"output" json:"output" xml:"output"`
	// Notes section of the markdown statement
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
	// Scoring section of the markdown statement
	Scoring *string `form:"scoring,omitempty" json:"scoring,omitempty" xml:"scoring,omitempty"`
}

// ExampleResponseBody is used to define fields on response body types.
type ExampleResponseBody struct {
	// Example input
	Input string `form:"input" json:"input" xml:"input"`
	// Example output
	Output string `form:"output" json:"output" xml:"output"`
	// Markdown note for the example
	MdNote *string `form:"md_note,omitempty" json:"md_note,omitempty" xml:"md_note,omitempty"`
}

// StInputsResponseBody is used to define fields on response body types.
type StInputsResponseBody struct {
	// Subtask number
	Subtask int `form:"subtask" json:"subtask" xml:"subtask"`
	// Inputs for the subtask
	Inputs []string `form:"inputs" json:"inputs" xml:"inputs"`
}

// NewListTasksResponseBody builds the HTTP response body from the result of
// the "listTasks" endpoint of the "tasks" service.
func NewListTasksResponseBody(res []*tasks.Task) ListTasksResponseBody {
	body := make([]*TaskResponse, len(res))
	for i, val := range res {
		body[i] = marshalTasksTaskToTaskResponse(val)
	}
	return body
}

// NewGetTaskResponseBody builds the HTTP response body from the result of the
// "getTask" endpoint of the "tasks" service.
func NewGetTaskResponseBody(res *tasks.Task) *GetTaskResponseBody {
	body := &GetTaskResponseBody{
		PublishedTaskID:        res.PublishedTaskID,
		TaskFullName:           res.TaskFullName,
		MemoryLimitMegabytes:   res.MemoryLimitMegabytes,
		CPUTimeLimitSeconds:    res.CPUTimeLimitSeconds,
		OriginOlympiad:         res.OriginOlympiad,
		IllustrationImgURL:     res.IllustrationImgURL,
		DifficultyRating:       res.DifficultyRating,
		DefaultPdfStatementURL: res.DefaultPdfStatementURL,
	}
	if res.DefaultMdStatement != nil {
		body.DefaultMdStatement = marshalTasksMarkdownStatementToMarkdownStatementResponseBody(res.DefaultMdStatement)
	}
	if res.Examples != nil {
		body.Examples = make([]*ExampleResponseBody, len(res.Examples))
		for i, val := range res.Examples {
			body.Examples[i] = marshalTasksExampleToExampleResponseBody(val)
		}
	}
	if res.OriginNotes != nil {
		body.OriginNotes = make(map[string]string, len(res.OriginNotes))
		for key, val := range res.OriginNotes {
			tk := key
			tv := val
			body.OriginNotes[tk] = tv
		}
	}
	if res.VisibleInputSubtasks != nil {
		body.VisibleInputSubtasks = make([]*StInputsResponseBody, len(res.VisibleInputSubtasks))
		for i, val := range res.VisibleInputSubtasks {
			body.VisibleInputSubtasks[i] = marshalTasksStInputsToStInputsResponseBody(val)
		}
	}
	return body
}

// NewGetTaskPayload builds a tasks service getTask endpoint payload.
func NewGetTaskPayload(taskID string) *tasks.GetTaskPayload {
	v := &tasks.GetTaskPayload{}
	v.TaskID = taskID

	return v
}
