// Code generated by goa v3.18.2, DO NOT EDIT.
//
// tasks HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package server

import (
	"context"
	"net/http"

	tasks "github.com/programme-lv/backend/gen/tasks"
	goahttp "goa.design/goa/v3/http"
)

// EncodeListTasksResponse returns an encoder for responses returned by the
// tasks listTasks endpoint.
func EncodeListTasksResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*tasks.Task)
		enc := encoder(ctx, w)
		body := NewListTasksResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetTaskResponse returns an encoder for responses returned by the tasks
// getTask endpoint.
func EncodeGetTaskResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*tasks.Task)
		enc := encoder(ctx, w)
		body := NewGetTaskResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetTaskRequest returns a decoder for requests sent to the tasks
// getTask endpoint.
func DecodeGetTaskRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			taskID string

			params = mux.Vars(r)
		)
		taskID = params["task_id"]
		payload := NewGetTaskPayload(taskID)

		return payload, nil
	}
}

// marshalTasksTaskToTaskResponse builds a value of type *TaskResponse from a
// value of type *tasks.Task.
func marshalTasksTaskToTaskResponse(v *tasks.Task) *TaskResponse {
	res := &TaskResponse{
		PublishedTaskID:        v.PublishedTaskID,
		TaskFullName:           v.TaskFullName,
		MemoryLimitMegabytes:   v.MemoryLimitMegabytes,
		CPUTimeLimitSeconds:    v.CPUTimeLimitSeconds,
		OriginOlympiad:         v.OriginOlympiad,
		IllustrationImgURL:     v.IllustrationImgURL,
		DifficultyRating:       v.DifficultyRating,
		DefaultPdfStatementURL: v.DefaultPdfStatementURL,
	}
	if v.DefaultMdStatement != nil {
		res.DefaultMdStatement = marshalTasksMarkdownStatementToMarkdownStatementResponse(v.DefaultMdStatement)
	}
	if v.Examples != nil {
		res.Examples = make([]*ExampleResponse, len(v.Examples))
		for i, val := range v.Examples {
			res.Examples[i] = marshalTasksExampleToExampleResponse(val)
		}
	}
	if v.OriginNotes != nil {
		res.OriginNotes = make(map[string]string, len(v.OriginNotes))
		for key, val := range v.OriginNotes {
			tk := key
			tv := val
			res.OriginNotes[tk] = tv
		}
	}
	if v.VisibleInputSubtasks != nil {
		res.VisibleInputSubtasks = make([]*StInputsResponse, len(v.VisibleInputSubtasks))
		for i, val := range v.VisibleInputSubtasks {
			res.VisibleInputSubtasks[i] = marshalTasksStInputsToStInputsResponse(val)
		}
	}

	return res
}

// marshalTasksMarkdownStatementToMarkdownStatementResponse builds a value of
// type *MarkdownStatementResponse from a value of type
// *tasks.MarkdownStatement.
func marshalTasksMarkdownStatementToMarkdownStatementResponse(v *tasks.MarkdownStatement) *MarkdownStatementResponse {
	if v == nil {
		return nil
	}
	res := &MarkdownStatementResponse{
		Story:   v.Story,
		Input:   v.Input,
		Output:  v.Output,
		Notes:   v.Notes,
		Scoring: v.Scoring,
	}

	return res
}

// marshalTasksExampleToExampleResponse builds a value of type *ExampleResponse
// from a value of type *tasks.Example.
func marshalTasksExampleToExampleResponse(v *tasks.Example) *ExampleResponse {
	if v == nil {
		return nil
	}
	res := &ExampleResponse{
		Input:  v.Input,
		Output: v.Output,
		MdNote: v.MdNote,
	}

	return res
}

// marshalTasksStInputsToStInputsResponse builds a value of type
// *StInputsResponse from a value of type *tasks.StInputs.
func marshalTasksStInputsToStInputsResponse(v *tasks.StInputs) *StInputsResponse {
	if v == nil {
		return nil
	}
	res := &StInputsResponse{
		Subtask: v.Subtask,
	}
	if v.Inputs != nil {
		res.Inputs = make([]string, len(v.Inputs))
		for i, val := range v.Inputs {
			res.Inputs[i] = val
		}
	} else {
		res.Inputs = []string{}
	}

	return res
}

// marshalTasksMarkdownStatementToMarkdownStatementResponseBody builds a value
// of type *MarkdownStatementResponseBody from a value of type
// *tasks.MarkdownStatement.
func marshalTasksMarkdownStatementToMarkdownStatementResponseBody(v *tasks.MarkdownStatement) *MarkdownStatementResponseBody {
	if v == nil {
		return nil
	}
	res := &MarkdownStatementResponseBody{
		Story:   v.Story,
		Input:   v.Input,
		Output:  v.Output,
		Notes:   v.Notes,
		Scoring: v.Scoring,
	}

	return res
}

// marshalTasksExampleToExampleResponseBody builds a value of type
// *ExampleResponseBody from a value of type *tasks.Example.
func marshalTasksExampleToExampleResponseBody(v *tasks.Example) *ExampleResponseBody {
	if v == nil {
		return nil
	}
	res := &ExampleResponseBody{
		Input:  v.Input,
		Output: v.Output,
		MdNote: v.MdNote,
	}

	return res
}

// marshalTasksStInputsToStInputsResponseBody builds a value of type
// *StInputsResponseBody from a value of type *tasks.StInputs.
func marshalTasksStInputsToStInputsResponseBody(v *tasks.StInputs) *StInputsResponseBody {
	if v == nil {
		return nil
	}
	res := &StInputsResponseBody{
		Subtask: v.Subtask,
	}
	if v.Inputs != nil {
		res.Inputs = make([]string, len(v.Inputs))
		for i, val := range v.Inputs {
			res.Inputs[i] = val
		}
	} else {
		res.Inputs = []string{}
	}

	return res
}
