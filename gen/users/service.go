// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users service
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service to manage users
type Service interface {
	// List all users
	ListUsers(context.Context, *ListUsersPayload) (res []*User, err error)
	// Get a user by UUID
	GetUser(context.Context, *SecureUUIDPayload) (res *User, err error)
	// Get a user by username
	GetUserByUsername(context.Context, *GetUserByUsernamePayload) (res *User, err error)
	// Create a new user
	CreateUser(context.Context, *UserPayload) (res *User, err error)
	// Delete a user
	DeleteUser(context.Context, *SecureUUIDPayload) (err error)
	// User login
	Login(context.Context, *LoginPayload) (res string, err error)
	// Query current JWT
	QueryCurrentJWT(context.Context, *QueryCurrentJWTPayload) (res *JWTClaims, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "proglv"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "users"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"listUsers", "getUser", "getUserByUsername", "createUser", "deleteUser", "login", "queryCurrentJWT"}

// Email already exists
type EmailExistsConflict string

// GetUserByUsernamePayload is the payload type of the users service
// getUserByUsername method.
type GetUserByUsernamePayload struct {
	// Username of the user
	Username string
}

// Internal server error
type InternalError string

// Invalid credentials
type InvalidCredentials string

// Invalid user details
type InvalidUserDetails string

// JWTClaims is the result type of the users service queryCurrentJWT method.
type JWTClaims struct {
	Username  *string
	Firstname *string
	Lastname  *string
	Email     *string
	UUID      *string
	Scopes    []string
	Issuer    *string
	Subject   *string
	Audience  []string
	ExpiresAt *string
	IssuedAt  *string
	NotBefore *string
}

// ListUsersPayload is the payload type of the users service listUsers method.
type ListUsersPayload struct {
	// JWT token used for authentication
	Token *string
}

// LoginPayload is the payload type of the users service login method.
type LoginPayload struct {
	// Username of the user
	Username string
	// Password of the user
	Password string
}

// User not found
type NotFound string

// QueryCurrentJWTPayload is the payload type of the users service
// queryCurrentJWT method.
type QueryCurrentJWTPayload struct {
	// JWT token used for authentication
	Token string
}

// SecureUUIDPayload is the payload type of the users service getUser method.
type SecureUUIDPayload struct {
	// JWT token used for authentication
	Token string
	// UUID of the user
	UUID string
}

// User is the result type of the users service getUser method.
type User struct {
	// Unique user UUID
	UUID string
	// Username of the user
	Username string
	// Email of the user
	Email string
	// First name of the user
	Firstname string
	// Last name of the user
	Lastname string
}

// UserPayload is the payload type of the users service createUser method.
type UserPayload struct {
	// Username of the user
	Username string
	// Email of the user
	Email string
	// First name of the user
	Firstname string
	// Last name of the user
	Lastname string
	// Password of the user
	Password string
}

// Username already exists
type UsernameExistsConflict string

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e EmailExistsConflict) Error() string {
	return "Email already exists"
}

// ErrorName returns "EmailExistsConflict".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e EmailExistsConflict) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "EmailExistsConflict".
func (e EmailExistsConflict) GoaErrorName() string {
	return "EmailExistsConflict"
}

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "InternalError".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InternalError".
func (e InternalError) GoaErrorName() string {
	return "InternalError"
}

// Error returns an error description.
func (e InvalidCredentials) Error() string {
	return "Invalid credentials"
}

// ErrorName returns "InvalidCredentials".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidCredentials) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InvalidCredentials".
func (e InvalidCredentials) GoaErrorName() string {
	return "InvalidCredentials"
}

// Error returns an error description.
func (e InvalidUserDetails) Error() string {
	return "Invalid user details"
}

// ErrorName returns "InvalidUserDetails".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidUserDetails) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InvalidUserDetails".
func (e InvalidUserDetails) GoaErrorName() string {
	return "InvalidUserDetails"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "User not found"
}

// ErrorName returns "NotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFound".
func (e NotFound) GoaErrorName() string {
	return "NotFound"
}

// Error returns an error description.
func (e UsernameExistsConflict) Error() string {
	return "Username already exists"
}

// ErrorName returns "UsernameExistsConflict".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UsernameExistsConflict) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UsernameExistsConflict".
func (e UsernameExistsConflict) GoaErrorName() string {
	return "UsernameExistsConflict"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// MakeInvalidUserDetails builds a goa.ServiceError from an error.
func MakeInvalidUserDetails(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InvalidUserDetails", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeInvalidCredentials builds a goa.ServiceError from an error.
func MakeInvalidCredentials(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "InvalidCredentials", false, false, false)
}
