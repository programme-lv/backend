// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users client
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "users" service client.
type Client struct {
	ListUsersEndpoint       goa.Endpoint
	GetUserEndpoint         goa.Endpoint
	CreateUserEndpoint      goa.Endpoint
	UpdateUserEndpoint      goa.Endpoint
	DeleteUserEndpoint      goa.Endpoint
	LoginEndpoint           goa.Endpoint
	QueryCurrentJWTEndpoint goa.Endpoint
}

// NewClient initializes a "users" service client given the endpoints.
func NewClient(listUsers, getUser, createUser, updateUser, deleteUser, login, queryCurrentJWT goa.Endpoint) *Client {
	return &Client{
		ListUsersEndpoint:       listUsers,
		GetUserEndpoint:         getUser,
		CreateUserEndpoint:      createUser,
		UpdateUserEndpoint:      updateUser,
		DeleteUserEndpoint:      deleteUser,
		LoginEndpoint:           login,
		QueryCurrentJWTEndpoint: queryCurrentJWT,
	}
}

// ListUsers calls the "listUsers" endpoint of the "users" service.
// ListUsers may return the following errors:
//   - "unauthorized" (type Unauthorized)
//   - "InvalidCredentials" (type InvalidCredentials)
//   - "InvalidUserDetails" (type InvalidUserDetails)
//   - "NotFound" (type NotFound)
//   - "InsertConflict" (type *ServiceInsertconflict): Insertion conflict
//   - error: internal error
func (c *Client) ListUsers(ctx context.Context, p *ListUsersPayload) (res []*User, err error) {
	var ires any
	ires, err = c.ListUsersEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*User), nil
}

// GetUser calls the "getUser" endpoint of the "users" service.
// GetUser may return the following errors:
//   - "unauthorized" (type Unauthorized)
//   - "InvalidCredentials" (type InvalidCredentials)
//   - "InvalidUserDetails" (type InvalidUserDetails)
//   - "NotFound" (type NotFound)
//   - "InsertConflict" (type *ServiceInsertconflict): Insertion conflict
//   - error: internal error
func (c *Client) GetUser(ctx context.Context, p *SecureUUIDPayload) (res *User, err error) {
	var ires any
	ires, err = c.GetUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*User), nil
}

// CreateUser calls the "createUser" endpoint of the "users" service.
// CreateUser may return the following errors:
//   - "InvalidUserDetails" (type *goa.ServiceError)
//   - "InsertConflict" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "InvalidCredentials" (type InvalidCredentials)
//   - "NotFound" (type NotFound)
//   - error: internal error
func (c *Client) CreateUser(ctx context.Context, p *UserPayload) (res *User, err error) {
	var ires any
	ires, err = c.CreateUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*User), nil
}

// UpdateUser calls the "updateUser" endpoint of the "users" service.
// UpdateUser may return the following errors:
//   - "InvalidUserDetails" (type *goa.ServiceError)
//   - "InsertConflict" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "InvalidCredentials" (type InvalidCredentials)
//   - "NotFound" (type NotFound)
//   - error: internal error
func (c *Client) UpdateUser(ctx context.Context, p *UpdateUserPayload) (res *User, err error) {
	var ires any
	ires, err = c.UpdateUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*User), nil
}

// DeleteUser calls the "deleteUser" endpoint of the "users" service.
// DeleteUser may return the following errors:
//   - "NotFound" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "InvalidCredentials" (type InvalidCredentials)
//   - "InvalidUserDetails" (type InvalidUserDetails)
//   - "InsertConflict" (type *ServiceInsertconflict): Insertion conflict
//   - error: internal error
func (c *Client) DeleteUser(ctx context.Context, p *SecureUUIDPayload) (err error) {
	_, err = c.DeleteUserEndpoint(ctx, p)
	return
}

// Login calls the "login" endpoint of the "users" service.
// Login may return the following errors:
//   - "InvalidCredentials" (type *goa.ServiceError)
//   - "InvalidUserDetails" (type *goa.ServiceError)
//   - "unauthorized" (type Unauthorized)
//   - "NotFound" (type NotFound)
//   - "InsertConflict" (type *ServiceInsertconflict): Insertion conflict
//   - error: internal error
func (c *Client) Login(ctx context.Context, p *LoginPayload) (res string, err error) {
	var ires any
	ires, err = c.LoginEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// QueryCurrentJWT calls the "queryCurrentJWT" endpoint of the "users" service.
// QueryCurrentJWT may return the following errors:
//   - "unauthorized" (type Unauthorized)
//   - "InvalidCredentials" (type InvalidCredentials)
//   - "InvalidUserDetails" (type InvalidUserDetails)
//   - "NotFound" (type NotFound)
//   - "InsertConflict" (type *ServiceInsertconflict): Insertion conflict
//   - error: internal error
func (c *Client) QueryCurrentJWT(ctx context.Context, p *QueryCurrentJWTPayload) (res string, err error) {
	var ires any
	ires, err = c.QueryCurrentJWTEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}
