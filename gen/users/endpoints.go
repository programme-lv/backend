// Code generated by goa v3.18.2, DO NOT EDIT.
//
// users endpoints
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "users" service endpoints.
type Endpoints struct {
	ListUsers         goa.Endpoint
	GetUser           goa.Endpoint
	GetUserByUsername goa.Endpoint
	CreateUser        goa.Endpoint
	DeleteUser        goa.Endpoint
	Login             goa.Endpoint
	QueryCurrentJWT   goa.Endpoint
}

// NewEndpoints wraps the methods of the "users" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ListUsers:         NewListUsersEndpoint(s, a.JWTAuth),
		GetUser:           NewGetUserEndpoint(s, a.JWTAuth),
		GetUserByUsername: NewGetUserByUsernameEndpoint(s),
		CreateUser:        NewCreateUserEndpoint(s),
		DeleteUser:        NewDeleteUserEndpoint(s, a.JWTAuth),
		Login:             NewLoginEndpoint(s),
		QueryCurrentJWT:   NewQueryCurrentJWTEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "users" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListUsers = m(e.ListUsers)
	e.GetUser = m(e.GetUser)
	e.GetUserByUsername = m(e.GetUserByUsername)
	e.CreateUser = m(e.CreateUser)
	e.DeleteUser = m(e.DeleteUser)
	e.Login = m(e.Login)
	e.QueryCurrentJWT = m(e.QueryCurrentJWT)
}

// NewListUsersEndpoint returns an endpoint function that calls the method
// "listUsers" of service "users".
func NewListUsersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListUsersPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"users:read", "users:write"},
			RequiredScopes: []string{"users:read"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListUsers(ctx, p)
	}
}

// NewGetUserEndpoint returns an endpoint function that calls the method
// "getUser" of service "users".
func NewGetUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SecureUUIDPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"users:read", "users:write"},
			RequiredScopes: []string{"users:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetUser(ctx, p)
	}
}

// NewGetUserByUsernameEndpoint returns an endpoint function that calls the
// method "getUserByUsername" of service "users".
func NewGetUserByUsernameEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetUserByUsernamePayload)
		return s.GetUserByUsername(ctx, p)
	}
}

// NewCreateUserEndpoint returns an endpoint function that calls the method
// "createUser" of service "users".
func NewCreateUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UserPayload)
		return s.CreateUser(ctx, p)
	}
}

// NewDeleteUserEndpoint returns an endpoint function that calls the method
// "deleteUser" of service "users".
func NewDeleteUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SecureUUIDPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"users:read", "users:write"},
			RequiredScopes: []string{"users:write"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteUser(ctx, p)
	}
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "users".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}

// NewQueryCurrentJWTEndpoint returns an endpoint function that calls the
// method "queryCurrentJWT" of service "users".
func NewQueryCurrentJWTEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*QueryCurrentJWTPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"users:read", "users:write"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.QueryCurrentJWT(ctx, p)
	}
}
