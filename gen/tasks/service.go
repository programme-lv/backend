// Code generated by goa v3.18.2, DO NOT EDIT.
//
// tasks service
//
// Command:
// $ goa gen github.com/programme-lv/backend/design

package tasks

import (
	"context"
)

// Service for managing tasks in the online judge
type Service interface {
	// List all tasks
	ListTasks(context.Context) (res []*Task, err error)
	// Get a task by its ID
	GetTask(context.Context, *GetTaskPayload) (res *Task, err error)
	// Get submission evaluation data for a task by its ID
	GetTaskSubmEvalData(context.Context, *GetTaskSubmEvalDataPayload) (res *TaskSubmEvalData, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "proglv"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "tasks"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"listTasks", "getTask", "getTaskSubmEvalData"}

// Represents an example for a task
type Example struct {
	// Example input
	Input string
	// Example output
	Output string
	// Markdown note for the example
	MdNote *string
}

// GetTaskPayload is the payload type of the tasks service getTask method.
type GetTaskPayload struct {
	// ID of the task
	TaskID string
}

// GetTaskSubmEvalDataPayload is the payload type of the tasks service
// getTaskSubmEvalData method.
type GetTaskSubmEvalDataPayload struct {
	// ID of the task
	TaskID string
}

// Represents a markdown statement for a task
type MarkdownStatement struct {
	// Story section of the markdown statement
	Story string
	// Input section of the markdown statement
	Input string
	// Output section of the markdown statement
	Output string
	// Notes section of the markdown statement
	Notes *string
	// Scoring section of the markdown statement
	Scoring *string
}

// Represents subtask inputs for a task
type StInputs struct {
	// Subtask number
	Subtask int
	// Inputs for the subtask
	Inputs []string
}

// Task is the result type of the tasks service getTask method.
type Task struct {
	// ID of the published task
	PublishedTaskID string
	// Full name of the task
	TaskFullName string
	// Memory limit in megabytes
	MemoryLimitMegabytes int
	// CPU time limit in seconds
	CPUTimeLimitSeconds float64
	// Origin olympiad of the task
	OriginOlympiad string
	// URL of the illustration image
	IllustrationImgURL *string
	// Difficulty rating of the task
	DifficultyRating int
	// Default markdown statement of the task
	DefaultMdStatement *MarkdownStatement
	// Examples for the task
	Examples []*Example
	// URL of the default PDF statement
	DefaultPdfStatementURL *string
	// Origin notes for the task
	OriginNotes map[string]string
	// Visible input subtasks
	VisibleInputSubtasks []*StInputs
}

type TaskEvalSubtaskScore struct {
	// Subtask ID
	SubtaskID int
	// Score for the subtask
	Score int
}

type TaskEvalTestGroupInformation struct {
	// Test group ID
	TestGroupID int
	// Score for the test group
	Score int
	// Subtask that the test group is part of
	Subtask int
}

type TaskEvalTestInformation struct {
	// Test ID
	TestID int
	// Full input S3 URI
	FullInputS3URI string
	// SHA256 of the input
	InputSha256 string
	// Full answer S3 URI
	FullAnswerS3URI string
	// SHA256 of the answer
	AnswerSha256 string
	// Subtasks that the test is part of
	Subtasks []int
	// Test group that the test is part of
	TestGroup *int
}

// Task not found
type TaskNotFound string

// TaskSubmEvalData is the result type of the tasks service getTaskSubmEvalData
// method.
type TaskSubmEvalData struct {
	// ID of the published task
	PublishedTaskID string
	// Full name of the task
	TaskFullName string
	// Memory limit in megabytes
	MemoryLimitMegabytes int
	// CPU time limit in seconds
	CPUTimeLimitSeconds float64
	// Tests for submission evaluation
	Tests []*TaskEvalTestInformation
	// C++ code of testlib.h checker
	TestlibCheckerCode string
	// Subtask scores
	SubtaskScores []*TaskEvalSubtaskScore
	// Test group information
	TestGroupInformation []*TaskEvalTestGroupInformation
}

// Error returns an error description.
func (e TaskNotFound) Error() string {
	return "Task not found"
}

// ErrorName returns "TaskNotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e TaskNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "TaskNotFound".
func (e TaskNotFound) GoaErrorName() string {
	return "TaskNotFound"
}
