//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EvaluationSubtasks = newEvaluationSubtasksTable("public", "evaluation_subtasks", "")

type evaluationSubtasksTable struct {
	postgres.Table

	// Columns
	EvalUUID      postgres.ColumnString
	SubtaskID     postgres.ColumnInteger
	SubtaskPoints postgres.ColumnInteger
	Accepted      postgres.ColumnInteger
	Wrong         postgres.ColumnInteger
	Untested      postgres.ColumnInteger
	Description   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationSubtasksTable struct {
	evaluationSubtasksTable

	EXCLUDED evaluationSubtasksTable
}

// AS creates new EvaluationSubtasksTable with assigned alias
func (a EvaluationSubtasksTable) AS(alias string) *EvaluationSubtasksTable {
	return newEvaluationSubtasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationSubtasksTable with assigned schema name
func (a EvaluationSubtasksTable) FromSchema(schemaName string) *EvaluationSubtasksTable {
	return newEvaluationSubtasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationSubtasksTable with assigned table prefix
func (a EvaluationSubtasksTable) WithPrefix(prefix string) *EvaluationSubtasksTable {
	return newEvaluationSubtasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationSubtasksTable with assigned table suffix
func (a EvaluationSubtasksTable) WithSuffix(suffix string) *EvaluationSubtasksTable {
	return newEvaluationSubtasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationSubtasksTable(schemaName, tableName, alias string) *EvaluationSubtasksTable {
	return &EvaluationSubtasksTable{
		evaluationSubtasksTable: newEvaluationSubtasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newEvaluationSubtasksTableImpl("", "excluded", ""),
	}
}

func newEvaluationSubtasksTableImpl(schemaName, tableName, alias string) evaluationSubtasksTable {
	var (
		EvalUUIDColumn      = postgres.StringColumn("eval_uuid")
		SubtaskIDColumn     = postgres.IntegerColumn("subtask_id")
		SubtaskPointsColumn = postgres.IntegerColumn("subtask_points")
		AcceptedColumn      = postgres.IntegerColumn("accepted")
		WrongColumn         = postgres.IntegerColumn("wrong")
		UntestedColumn      = postgres.IntegerColumn("untested")
		DescriptionColumn   = postgres.StringColumn("description")
		allColumns          = postgres.ColumnList{EvalUUIDColumn, SubtaskIDColumn, SubtaskPointsColumn, AcceptedColumn, WrongColumn, UntestedColumn, DescriptionColumn}
		mutableColumns      = postgres.ColumnList{SubtaskPointsColumn, AcceptedColumn, WrongColumn, UntestedColumn, DescriptionColumn}
	)

	return evaluationSubtasksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EvalUUID:      EvalUUIDColumn,
		SubtaskID:     SubtaskIDColumn,
		SubtaskPoints: SubtaskPointsColumn,
		Accepted:      AcceptedColumn,
		Wrong:         WrongColumn,
		Untested:      UntestedColumn,
		Description:   DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
