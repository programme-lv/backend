//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EvaluationTests = newEvaluationTestsTable("public", "evaluation_tests", "")

type evaluationTestsTable struct {
	postgres.Table

	// Columns
	EvalUUID         postgres.ColumnString
	TestID           postgres.ColumnInteger
	FullInputS3URL   postgres.ColumnString
	FullAnswerS3URL  postgres.ColumnString
	Reached          postgres.ColumnBool
	Ignored          postgres.ColumnBool
	Finished         postgres.ColumnBool
	InputTrimmed     postgres.ColumnString
	AnswerTrimmed    postgres.ColumnString
	Subtasks         postgres.ColumnString
	Testgroups       postgres.ColumnString
	CheckerRuntimeID postgres.ColumnInteger
	SubmRuntimeID    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationTestsTable struct {
	evaluationTestsTable

	EXCLUDED evaluationTestsTable
}

// AS creates new EvaluationTestsTable with assigned alias
func (a EvaluationTestsTable) AS(alias string) *EvaluationTestsTable {
	return newEvaluationTestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationTestsTable with assigned schema name
func (a EvaluationTestsTable) FromSchema(schemaName string) *EvaluationTestsTable {
	return newEvaluationTestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationTestsTable with assigned table prefix
func (a EvaluationTestsTable) WithPrefix(prefix string) *EvaluationTestsTable {
	return newEvaluationTestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationTestsTable with assigned table suffix
func (a EvaluationTestsTable) WithSuffix(suffix string) *EvaluationTestsTable {
	return newEvaluationTestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationTestsTable(schemaName, tableName, alias string) *EvaluationTestsTable {
	return &EvaluationTestsTable{
		evaluationTestsTable: newEvaluationTestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newEvaluationTestsTableImpl("", "excluded", ""),
	}
}

func newEvaluationTestsTableImpl(schemaName, tableName, alias string) evaluationTestsTable {
	var (
		EvalUUIDColumn         = postgres.StringColumn("eval_uuid")
		TestIDColumn           = postgres.IntegerColumn("test_id")
		FullInputS3URLColumn   = postgres.StringColumn("full_input_s3_url")
		FullAnswerS3URLColumn  = postgres.StringColumn("full_answer_s3_url")
		ReachedColumn          = postgres.BoolColumn("reached")
		IgnoredColumn          = postgres.BoolColumn("ignored")
		FinishedColumn         = postgres.BoolColumn("finished")
		InputTrimmedColumn     = postgres.StringColumn("input_trimmed")
		AnswerTrimmedColumn    = postgres.StringColumn("answer_trimmed")
		SubtasksColumn         = postgres.StringColumn("subtasks")
		TestgroupsColumn       = postgres.StringColumn("testgroups")
		CheckerRuntimeIDColumn = postgres.IntegerColumn("checker_runtime_id")
		SubmRuntimeIDColumn    = postgres.IntegerColumn("subm_runtime_id")
		allColumns             = postgres.ColumnList{EvalUUIDColumn, TestIDColumn, FullInputS3URLColumn, FullAnswerS3URLColumn, ReachedColumn, IgnoredColumn, FinishedColumn, InputTrimmedColumn, AnswerTrimmedColumn, SubtasksColumn, TestgroupsColumn, CheckerRuntimeIDColumn, SubmRuntimeIDColumn}
		mutableColumns         = postgres.ColumnList{FullInputS3URLColumn, FullAnswerS3URLColumn, ReachedColumn, IgnoredColumn, FinishedColumn, InputTrimmedColumn, AnswerTrimmedColumn, SubtasksColumn, TestgroupsColumn, CheckerRuntimeIDColumn, SubmRuntimeIDColumn}
	)

	return evaluationTestsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EvalUUID:         EvalUUIDColumn,
		TestID:           TestIDColumn,
		FullInputS3URL:   FullInputS3URLColumn,
		FullAnswerS3URL:  FullAnswerS3URLColumn,
		Reached:          ReachedColumn,
		Ignored:          IgnoredColumn,
		Finished:         FinishedColumn,
		InputTrimmed:     InputTrimmedColumn,
		AnswerTrimmed:    AnswerTrimmedColumn,
		Subtasks:         SubtasksColumn,
		Testgroups:       TestgroupsColumn,
		CheckerRuntimeID: CheckerRuntimeIDColumn,
		SubmRuntimeID:    SubmRuntimeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
