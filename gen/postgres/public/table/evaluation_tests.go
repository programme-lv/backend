//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EvaluationTests = newEvaluationTestsTable("public", "evaluation_tests", "")

type evaluationTestsTable struct {
	postgres.Table

	// Columns
	EvalUUID                 postgres.ColumnString
	TestID                   postgres.ColumnInteger
	FullInputS3URL           postgres.ColumnString
	FullAnswerS3URL          postgres.ColumnString
	Reached                  postgres.ColumnBool
	Ignored                  postgres.ColumnBool
	Finished                 postgres.ColumnBool
	InputTrimmed             postgres.ColumnString
	AnswerTrimmed            postgres.ColumnString
	CheckerStdout            postgres.ColumnString
	CheckerStderr            postgres.ColumnString
	CheckerExitCode          postgres.ColumnInteger
	CheckerCPUTimeMillis     postgres.ColumnInteger
	CheckerWallTimeMillis    postgres.ColumnInteger
	CheckerMemoryKibiBytes   postgres.ColumnInteger
	CheckerCtxSwitchesForced postgres.ColumnInteger
	CheckerExitSignal        postgres.ColumnInteger
	CheckerIsolateStatus     postgres.ColumnString
	SubmStdout               postgres.ColumnString
	SubmStderr               postgres.ColumnString
	SubmExitCode             postgres.ColumnInteger
	SubmCPUTimeMillis        postgres.ColumnInteger
	SubmWallTimeMillis       postgres.ColumnInteger
	SubmMemoryKibiBytes      postgres.ColumnInteger
	SubmCtxSwitchesForced    postgres.ColumnInteger
	SubmExitSignal           postgres.ColumnInteger
	SubmIsolateStatus        postgres.ColumnString
	Subtasks                 postgres.ColumnString
	Testgroups               postgres.ColumnString
	CreatedAt                postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationTestsTable struct {
	evaluationTestsTable

	EXCLUDED evaluationTestsTable
}

// AS creates new EvaluationTestsTable with assigned alias
func (a EvaluationTestsTable) AS(alias string) *EvaluationTestsTable {
	return newEvaluationTestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationTestsTable with assigned schema name
func (a EvaluationTestsTable) FromSchema(schemaName string) *EvaluationTestsTable {
	return newEvaluationTestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationTestsTable with assigned table prefix
func (a EvaluationTestsTable) WithPrefix(prefix string) *EvaluationTestsTable {
	return newEvaluationTestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationTestsTable with assigned table suffix
func (a EvaluationTestsTable) WithSuffix(suffix string) *EvaluationTestsTable {
	return newEvaluationTestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationTestsTable(schemaName, tableName, alias string) *EvaluationTestsTable {
	return &EvaluationTestsTable{
		evaluationTestsTable: newEvaluationTestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newEvaluationTestsTableImpl("", "excluded", ""),
	}
}

func newEvaluationTestsTableImpl(schemaName, tableName, alias string) evaluationTestsTable {
	var (
		EvalUUIDColumn                 = postgres.StringColumn("eval_uuid")
		TestIDColumn                   = postgres.IntegerColumn("test_id")
		FullInputS3URLColumn           = postgres.StringColumn("full_input_s3_url")
		FullAnswerS3URLColumn          = postgres.StringColumn("full_answer_s3_url")
		ReachedColumn                  = postgres.BoolColumn("reached")
		IgnoredColumn                  = postgres.BoolColumn("ignored")
		FinishedColumn                 = postgres.BoolColumn("finished")
		InputTrimmedColumn             = postgres.StringColumn("input_trimmed")
		AnswerTrimmedColumn            = postgres.StringColumn("answer_trimmed")
		CheckerStdoutColumn            = postgres.StringColumn("checker_stdout")
		CheckerStderrColumn            = postgres.StringColumn("checker_stderr")
		CheckerExitCodeColumn          = postgres.IntegerColumn("checker_exit_code")
		CheckerCPUTimeMillisColumn     = postgres.IntegerColumn("checker_cpu_time_millis")
		CheckerWallTimeMillisColumn    = postgres.IntegerColumn("checker_wall_time_millis")
		CheckerMemoryKibiBytesColumn   = postgres.IntegerColumn("checker_memory_kibi_bytes")
		CheckerCtxSwitchesForcedColumn = postgres.IntegerColumn("checker_ctx_switches_forced")
		CheckerExitSignalColumn        = postgres.IntegerColumn("checker_exit_signal")
		CheckerIsolateStatusColumn     = postgres.StringColumn("checker_isolate_status")
		SubmStdoutColumn               = postgres.StringColumn("subm_stdout")
		SubmStderrColumn               = postgres.StringColumn("subm_stderr")
		SubmExitCodeColumn             = postgres.IntegerColumn("subm_exit_code")
		SubmCPUTimeMillisColumn        = postgres.IntegerColumn("subm_cpu_time_millis")
		SubmWallTimeMillisColumn       = postgres.IntegerColumn("subm_wall_time_millis")
		SubmMemoryKibiBytesColumn      = postgres.IntegerColumn("subm_memory_kibi_bytes")
		SubmCtxSwitchesForcedColumn    = postgres.IntegerColumn("subm_ctx_switches_forced")
		SubmExitSignalColumn           = postgres.IntegerColumn("subm_exit_signal")
		SubmIsolateStatusColumn        = postgres.StringColumn("subm_isolate_status")
		SubtasksColumn                 = postgres.StringColumn("subtasks")
		TestgroupsColumn               = postgres.StringColumn("testgroups")
		CreatedAtColumn                = postgres.TimestampzColumn("created_at")
		allColumns                     = postgres.ColumnList{EvalUUIDColumn, TestIDColumn, FullInputS3URLColumn, FullAnswerS3URLColumn, ReachedColumn, IgnoredColumn, FinishedColumn, InputTrimmedColumn, AnswerTrimmedColumn, CheckerStdoutColumn, CheckerStderrColumn, CheckerExitCodeColumn, CheckerCPUTimeMillisColumn, CheckerWallTimeMillisColumn, CheckerMemoryKibiBytesColumn, CheckerCtxSwitchesForcedColumn, CheckerExitSignalColumn, CheckerIsolateStatusColumn, SubmStdoutColumn, SubmStderrColumn, SubmExitCodeColumn, SubmCPUTimeMillisColumn, SubmWallTimeMillisColumn, SubmMemoryKibiBytesColumn, SubmCtxSwitchesForcedColumn, SubmExitSignalColumn, SubmIsolateStatusColumn, SubtasksColumn, TestgroupsColumn, CreatedAtColumn}
		mutableColumns                 = postgres.ColumnList{FullInputS3URLColumn, FullAnswerS3URLColumn, ReachedColumn, IgnoredColumn, FinishedColumn, InputTrimmedColumn, AnswerTrimmedColumn, CheckerStdoutColumn, CheckerStderrColumn, CheckerExitCodeColumn, CheckerCPUTimeMillisColumn, CheckerWallTimeMillisColumn, CheckerMemoryKibiBytesColumn, CheckerCtxSwitchesForcedColumn, CheckerExitSignalColumn, CheckerIsolateStatusColumn, SubmStdoutColumn, SubmStderrColumn, SubmExitCodeColumn, SubmCPUTimeMillisColumn, SubmWallTimeMillisColumn, SubmMemoryKibiBytesColumn, SubmCtxSwitchesForcedColumn, SubmExitSignalColumn, SubmIsolateStatusColumn, SubtasksColumn, TestgroupsColumn, CreatedAtColumn}
	)

	return evaluationTestsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EvalUUID:                 EvalUUIDColumn,
		TestID:                   TestIDColumn,
		FullInputS3URL:           FullInputS3URLColumn,
		FullAnswerS3URL:          FullAnswerS3URLColumn,
		Reached:                  ReachedColumn,
		Ignored:                  IgnoredColumn,
		Finished:                 FinishedColumn,
		InputTrimmed:             InputTrimmedColumn,
		AnswerTrimmed:            AnswerTrimmedColumn,
		CheckerStdout:            CheckerStdoutColumn,
		CheckerStderr:            CheckerStderrColumn,
		CheckerExitCode:          CheckerExitCodeColumn,
		CheckerCPUTimeMillis:     CheckerCPUTimeMillisColumn,
		CheckerWallTimeMillis:    CheckerWallTimeMillisColumn,
		CheckerMemoryKibiBytes:   CheckerMemoryKibiBytesColumn,
		CheckerCtxSwitchesForced: CheckerCtxSwitchesForcedColumn,
		CheckerExitSignal:        CheckerExitSignalColumn,
		CheckerIsolateStatus:     CheckerIsolateStatusColumn,
		SubmStdout:               SubmStdoutColumn,
		SubmStderr:               SubmStderrColumn,
		SubmExitCode:             SubmExitCodeColumn,
		SubmCPUTimeMillis:        SubmCPUTimeMillisColumn,
		SubmWallTimeMillis:       SubmWallTimeMillisColumn,
		SubmMemoryKibiBytes:      SubmMemoryKibiBytesColumn,
		SubmCtxSwitchesForced:    SubmCtxSwitchesForcedColumn,
		SubmExitSignal:           SubmExitSignalColumn,
		SubmIsolateStatus:        SubmIsolateStatusColumn,
		Subtasks:                 SubtasksColumn,
		Testgroups:               TestgroupsColumn,
		CreatedAt:                CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
