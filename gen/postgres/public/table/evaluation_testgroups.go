//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EvaluationTestgroups = newEvaluationTestgroupsTable("public", "evaluation_testgroups", "")

type evaluationTestgroupsTable struct {
	postgres.Table

	// Columns
	EvalUUID          postgres.ColumnString
	TestgroupID       postgres.ColumnInteger
	StatementSubtasks postgres.ColumnString
	TestgroupPoints   postgres.ColumnInteger
	Accepted          postgres.ColumnInteger
	Wrong             postgres.ColumnInteger
	Untested          postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationTestgroupsTable struct {
	evaluationTestgroupsTable

	EXCLUDED evaluationTestgroupsTable
}

// AS creates new EvaluationTestgroupsTable with assigned alias
func (a EvaluationTestgroupsTable) AS(alias string) *EvaluationTestgroupsTable {
	return newEvaluationTestgroupsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationTestgroupsTable with assigned schema name
func (a EvaluationTestgroupsTable) FromSchema(schemaName string) *EvaluationTestgroupsTable {
	return newEvaluationTestgroupsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationTestgroupsTable with assigned table prefix
func (a EvaluationTestgroupsTable) WithPrefix(prefix string) *EvaluationTestgroupsTable {
	return newEvaluationTestgroupsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationTestgroupsTable with assigned table suffix
func (a EvaluationTestgroupsTable) WithSuffix(suffix string) *EvaluationTestgroupsTable {
	return newEvaluationTestgroupsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationTestgroupsTable(schemaName, tableName, alias string) *EvaluationTestgroupsTable {
	return &EvaluationTestgroupsTable{
		evaluationTestgroupsTable: newEvaluationTestgroupsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newEvaluationTestgroupsTableImpl("", "excluded", ""),
	}
}

func newEvaluationTestgroupsTableImpl(schemaName, tableName, alias string) evaluationTestgroupsTable {
	var (
		EvalUUIDColumn          = postgres.StringColumn("eval_uuid")
		TestgroupIDColumn       = postgres.IntegerColumn("testgroup_id")
		StatementSubtasksColumn = postgres.StringColumn("statement_subtasks")
		TestgroupPointsColumn   = postgres.IntegerColumn("testgroup_points")
		AcceptedColumn          = postgres.IntegerColumn("accepted")
		WrongColumn             = postgres.IntegerColumn("wrong")
		UntestedColumn          = postgres.IntegerColumn("untested")
		allColumns              = postgres.ColumnList{EvalUUIDColumn, TestgroupIDColumn, StatementSubtasksColumn, TestgroupPointsColumn, AcceptedColumn, WrongColumn, UntestedColumn}
		mutableColumns          = postgres.ColumnList{StatementSubtasksColumn, TestgroupPointsColumn, AcceptedColumn, WrongColumn, UntestedColumn}
	)

	return evaluationTestgroupsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EvalUUID:          EvalUUIDColumn,
		TestgroupID:       TestgroupIDColumn,
		StatementSubtasks: StatementSubtasksColumn,
		TestgroupPoints:   TestgroupPointsColumn,
		Accepted:          AcceptedColumn,
		Wrong:             WrongColumn,
		Untested:          UntestedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
