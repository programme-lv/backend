//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EvaluationScoringTestgroups = newEvaluationScoringTestgroupsTable("public", "evaluation_scoring_testgroups", "")

type evaluationScoringTestgroupsTable struct {
	postgres.Table

	// Columns
	EvalUUID          postgres.ColumnString
	TestgroupID       postgres.ColumnInteger
	StatementSubtasks postgres.ColumnString
	TestgroupPoints   postgres.ColumnInteger
	Accepted          postgres.ColumnInteger
	Wrong             postgres.ColumnInteger
	Untested          postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationScoringTestgroupsTable struct {
	evaluationScoringTestgroupsTable

	EXCLUDED evaluationScoringTestgroupsTable
}

// AS creates new EvaluationScoringTestgroupsTable with assigned alias
func (a EvaluationScoringTestgroupsTable) AS(alias string) *EvaluationScoringTestgroupsTable {
	return newEvaluationScoringTestgroupsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationScoringTestgroupsTable with assigned schema name
func (a EvaluationScoringTestgroupsTable) FromSchema(schemaName string) *EvaluationScoringTestgroupsTable {
	return newEvaluationScoringTestgroupsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationScoringTestgroupsTable with assigned table prefix
func (a EvaluationScoringTestgroupsTable) WithPrefix(prefix string) *EvaluationScoringTestgroupsTable {
	return newEvaluationScoringTestgroupsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationScoringTestgroupsTable with assigned table suffix
func (a EvaluationScoringTestgroupsTable) WithSuffix(suffix string) *EvaluationScoringTestgroupsTable {
	return newEvaluationScoringTestgroupsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationScoringTestgroupsTable(schemaName, tableName, alias string) *EvaluationScoringTestgroupsTable {
	return &EvaluationScoringTestgroupsTable{
		evaluationScoringTestgroupsTable: newEvaluationScoringTestgroupsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                         newEvaluationScoringTestgroupsTableImpl("", "excluded", ""),
	}
}

func newEvaluationScoringTestgroupsTableImpl(schemaName, tableName, alias string) evaluationScoringTestgroupsTable {
	var (
		EvalUUIDColumn          = postgres.StringColumn("eval_uuid")
		TestgroupIDColumn       = postgres.IntegerColumn("testgroup_id")
		StatementSubtasksColumn = postgres.StringColumn("statement_subtasks")
		TestgroupPointsColumn   = postgres.IntegerColumn("testgroup_points")
		AcceptedColumn          = postgres.IntegerColumn("accepted")
		WrongColumn             = postgres.IntegerColumn("wrong")
		UntestedColumn          = postgres.IntegerColumn("untested")
		allColumns              = postgres.ColumnList{EvalUUIDColumn, TestgroupIDColumn, StatementSubtasksColumn, TestgroupPointsColumn, AcceptedColumn, WrongColumn, UntestedColumn}
		mutableColumns          = postgres.ColumnList{StatementSubtasksColumn, TestgroupPointsColumn, AcceptedColumn, WrongColumn, UntestedColumn}
	)

	return evaluationScoringTestgroupsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EvalUUID:          EvalUUIDColumn,
		TestgroupID:       TestgroupIDColumn,
		StatementSubtasks: StatementSubtasksColumn,
		TestgroupPoints:   TestgroupPointsColumn,
		Accepted:          AcceptedColumn,
		Wrong:             WrongColumn,
		Untested:          UntestedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
