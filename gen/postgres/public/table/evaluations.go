//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Evaluations = newEvaluationsTable("public", "evaluations", "")

type evaluationsTable struct {
	postgres.Table

	// Columns
	EvalUUID                      postgres.ColumnString
	SubmUUID                      postgres.ColumnString
	EvaluationStage               postgres.ColumnString
	ScoringMethod                 postgres.ColumnString
	CPUTimeLimitMillis            postgres.ColumnInteger
	MemLimitKibiBytes             postgres.ColumnInteger
	ErrorMessage                  postgres.ColumnString
	TestlibCheckerCode            postgres.ColumnString
	SystemInformation             postgres.ColumnString
	SubmCompileStdout             postgres.ColumnString
	SubmCompileStderr             postgres.ColumnString
	SubmCompileExitCode           postgres.ColumnInteger
	SubmCompileCPUTimeMillis      postgres.ColumnInteger
	SubmCompileWallTimeMillis     postgres.ColumnInteger
	SubmCompileMemoryKibiBytes    postgres.ColumnInteger
	SubmCompileCtxSwitchesForced  postgres.ColumnInteger
	SubmCompileExitSignal         postgres.ColumnInteger
	SubmCompileIsolateStatus      postgres.ColumnString
	ProgrammingLangID             postgres.ColumnString
	ProgrammingLangDisplayName    postgres.ColumnString
	ProgrammingLangSubmCodeFname  postgres.ColumnString
	ProgrammingLangCompileCommand postgres.ColumnString
	ProgrammingLangCompiledFname  postgres.ColumnString
	ProgrammingLangExecCommand    postgres.ColumnString
	CreatedAt                     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationsTable struct {
	evaluationsTable

	EXCLUDED evaluationsTable
}

// AS creates new EvaluationsTable with assigned alias
func (a EvaluationsTable) AS(alias string) *EvaluationsTable {
	return newEvaluationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationsTable with assigned schema name
func (a EvaluationsTable) FromSchema(schemaName string) *EvaluationsTable {
	return newEvaluationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationsTable with assigned table prefix
func (a EvaluationsTable) WithPrefix(prefix string) *EvaluationsTable {
	return newEvaluationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationsTable with assigned table suffix
func (a EvaluationsTable) WithSuffix(suffix string) *EvaluationsTable {
	return newEvaluationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationsTable(schemaName, tableName, alias string) *EvaluationsTable {
	return &EvaluationsTable{
		evaluationsTable: newEvaluationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newEvaluationsTableImpl("", "excluded", ""),
	}
}

func newEvaluationsTableImpl(schemaName, tableName, alias string) evaluationsTable {
	var (
		EvalUUIDColumn                      = postgres.StringColumn("eval_uuid")
		SubmUUIDColumn                      = postgres.StringColumn("subm_uuid")
		EvaluationStageColumn               = postgres.StringColumn("evaluation_stage")
		ScoringMethodColumn                 = postgres.StringColumn("scoring_method")
		CPUTimeLimitMillisColumn            = postgres.IntegerColumn("cpu_time_limit_millis")
		MemLimitKibiBytesColumn             = postgres.IntegerColumn("mem_limit_kibi_bytes")
		ErrorMessageColumn                  = postgres.StringColumn("error_message")
		TestlibCheckerCodeColumn            = postgres.StringColumn("testlib_checker_code")
		SystemInformationColumn             = postgres.StringColumn("system_information")
		SubmCompileStdoutColumn             = postgres.StringColumn("subm_compile_stdout")
		SubmCompileStderrColumn             = postgres.StringColumn("subm_compile_stderr")
		SubmCompileExitCodeColumn           = postgres.IntegerColumn("subm_compile_exit_code")
		SubmCompileCPUTimeMillisColumn      = postgres.IntegerColumn("subm_compile_cpu_time_millis")
		SubmCompileWallTimeMillisColumn     = postgres.IntegerColumn("subm_compile_wall_time_millis")
		SubmCompileMemoryKibiBytesColumn    = postgres.IntegerColumn("subm_compile_memory_kibi_bytes")
		SubmCompileCtxSwitchesForcedColumn  = postgres.IntegerColumn("subm_compile_ctx_switches_forced")
		SubmCompileExitSignalColumn         = postgres.IntegerColumn("subm_compile_exit_signal")
		SubmCompileIsolateStatusColumn      = postgres.StringColumn("subm_compile_isolate_status")
		ProgrammingLangIDColumn             = postgres.StringColumn("programming_lang_id")
		ProgrammingLangDisplayNameColumn    = postgres.StringColumn("programming_lang_display_name")
		ProgrammingLangSubmCodeFnameColumn  = postgres.StringColumn("programming_lang_subm_code_fname")
		ProgrammingLangCompileCommandColumn = postgres.StringColumn("programming_lang_compile_command")
		ProgrammingLangCompiledFnameColumn  = postgres.StringColumn("programming_lang_compiled_fname")
		ProgrammingLangExecCommandColumn    = postgres.StringColumn("programming_lang_exec_command")
		CreatedAtColumn                     = postgres.TimestampzColumn("created_at")
		allColumns                          = postgres.ColumnList{EvalUUIDColumn, SubmUUIDColumn, EvaluationStageColumn, ScoringMethodColumn, CPUTimeLimitMillisColumn, MemLimitKibiBytesColumn, ErrorMessageColumn, TestlibCheckerCodeColumn, SystemInformationColumn, SubmCompileStdoutColumn, SubmCompileStderrColumn, SubmCompileExitCodeColumn, SubmCompileCPUTimeMillisColumn, SubmCompileWallTimeMillisColumn, SubmCompileMemoryKibiBytesColumn, SubmCompileCtxSwitchesForcedColumn, SubmCompileExitSignalColumn, SubmCompileIsolateStatusColumn, ProgrammingLangIDColumn, ProgrammingLangDisplayNameColumn, ProgrammingLangSubmCodeFnameColumn, ProgrammingLangCompileCommandColumn, ProgrammingLangCompiledFnameColumn, ProgrammingLangExecCommandColumn, CreatedAtColumn}
		mutableColumns                      = postgres.ColumnList{SubmUUIDColumn, EvaluationStageColumn, ScoringMethodColumn, CPUTimeLimitMillisColumn, MemLimitKibiBytesColumn, ErrorMessageColumn, TestlibCheckerCodeColumn, SystemInformationColumn, SubmCompileStdoutColumn, SubmCompileStderrColumn, SubmCompileExitCodeColumn, SubmCompileCPUTimeMillisColumn, SubmCompileWallTimeMillisColumn, SubmCompileMemoryKibiBytesColumn, SubmCompileCtxSwitchesForcedColumn, SubmCompileExitSignalColumn, SubmCompileIsolateStatusColumn, ProgrammingLangIDColumn, ProgrammingLangDisplayNameColumn, ProgrammingLangSubmCodeFnameColumn, ProgrammingLangCompileCommandColumn, ProgrammingLangCompiledFnameColumn, ProgrammingLangExecCommandColumn, CreatedAtColumn}
	)

	return evaluationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EvalUUID:                      EvalUUIDColumn,
		SubmUUID:                      SubmUUIDColumn,
		EvaluationStage:               EvaluationStageColumn,
		ScoringMethod:                 ScoringMethodColumn,
		CPUTimeLimitMillis:            CPUTimeLimitMillisColumn,
		MemLimitKibiBytes:             MemLimitKibiBytesColumn,
		ErrorMessage:                  ErrorMessageColumn,
		TestlibCheckerCode:            TestlibCheckerCodeColumn,
		SystemInformation:             SystemInformationColumn,
		SubmCompileStdout:             SubmCompileStdoutColumn,
		SubmCompileStderr:             SubmCompileStderrColumn,
		SubmCompileExitCode:           SubmCompileExitCodeColumn,
		SubmCompileCPUTimeMillis:      SubmCompileCPUTimeMillisColumn,
		SubmCompileWallTimeMillis:     SubmCompileWallTimeMillisColumn,
		SubmCompileMemoryKibiBytes:    SubmCompileMemoryKibiBytesColumn,
		SubmCompileCtxSwitchesForced:  SubmCompileCtxSwitchesForcedColumn,
		SubmCompileExitSignal:         SubmCompileExitSignalColumn,
		SubmCompileIsolateStatus:      SubmCompileIsolateStatusColumn,
		ProgrammingLangID:             ProgrammingLangIDColumn,
		ProgrammingLangDisplayName:    ProgrammingLangDisplayNameColumn,
		ProgrammingLangSubmCodeFname:  ProgrammingLangSubmCodeFnameColumn,
		ProgrammingLangCompileCommand: ProgrammingLangCompileCommandColumn,
		ProgrammingLangCompiledFname:  ProgrammingLangCompiledFnameColumn,
		ProgrammingLangExecCommand:    ProgrammingLangExecCommandColumn,
		CreatedAt:                     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
