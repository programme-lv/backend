//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RuntimeData = newRuntimeDataTable("public", "runtime_data", "")

type runtimeDataTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	Stdout            postgres.ColumnString
	Stderr            postgres.ColumnString
	ExitCode          postgres.ColumnInteger
	CPUTimeMillis     postgres.ColumnInteger
	WallTimeMillis    postgres.ColumnInteger
	MemoryKibiBytes   postgres.ColumnInteger
	CtxSwitchesForced postgres.ColumnInteger
	ExitSignal        postgres.ColumnInteger
	IsolateStatus     postgres.ColumnString
	CreatedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RuntimeDataTable struct {
	runtimeDataTable

	EXCLUDED runtimeDataTable
}

// AS creates new RuntimeDataTable with assigned alias
func (a RuntimeDataTable) AS(alias string) *RuntimeDataTable {
	return newRuntimeDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RuntimeDataTable with assigned schema name
func (a RuntimeDataTable) FromSchema(schemaName string) *RuntimeDataTable {
	return newRuntimeDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RuntimeDataTable with assigned table prefix
func (a RuntimeDataTable) WithPrefix(prefix string) *RuntimeDataTable {
	return newRuntimeDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RuntimeDataTable with assigned table suffix
func (a RuntimeDataTable) WithSuffix(suffix string) *RuntimeDataTable {
	return newRuntimeDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRuntimeDataTable(schemaName, tableName, alias string) *RuntimeDataTable {
	return &RuntimeDataTable{
		runtimeDataTable: newRuntimeDataTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newRuntimeDataTableImpl("", "excluded", ""),
	}
}

func newRuntimeDataTableImpl(schemaName, tableName, alias string) runtimeDataTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		StdoutColumn            = postgres.StringColumn("stdout")
		StderrColumn            = postgres.StringColumn("stderr")
		ExitCodeColumn          = postgres.IntegerColumn("exit_code")
		CPUTimeMillisColumn     = postgres.IntegerColumn("cpu_time_millis")
		WallTimeMillisColumn    = postgres.IntegerColumn("wall_time_millis")
		MemoryKibiBytesColumn   = postgres.IntegerColumn("memory_kibi_bytes")
		CtxSwitchesForcedColumn = postgres.IntegerColumn("ctx_switches_forced")
		ExitSignalColumn        = postgres.IntegerColumn("exit_signal")
		IsolateStatusColumn     = postgres.StringColumn("isolate_status")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		allColumns              = postgres.ColumnList{IDColumn, StdoutColumn, StderrColumn, ExitCodeColumn, CPUTimeMillisColumn, WallTimeMillisColumn, MemoryKibiBytesColumn, CtxSwitchesForcedColumn, ExitSignalColumn, IsolateStatusColumn, CreatedAtColumn}
		mutableColumns          = postgres.ColumnList{StdoutColumn, StderrColumn, ExitCodeColumn, CPUTimeMillisColumn, WallTimeMillisColumn, MemoryKibiBytesColumn, CtxSwitchesForcedColumn, ExitSignalColumn, IsolateStatusColumn, CreatedAtColumn}
	)

	return runtimeDataTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Stdout:            StdoutColumn,
		Stderr:            StderrColumn,
		ExitCode:          ExitCodeColumn,
		CPUTimeMillis:     CPUTimeMillisColumn,
		WallTimeMillis:    WallTimeMillisColumn,
		MemoryKibiBytes:   MemoryKibiBytesColumn,
		CtxSwitchesForced: CtxSwitchesForcedColumn,
		ExitSignal:        ExitSignalColumn,
		IsolateStatus:     IsolateStatusColumn,
		CreatedAt:         CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
