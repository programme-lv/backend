//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EvaluationScoringSubtasks = newEvaluationScoringSubtasksTable("public", "evaluation_scoring_subtasks", "")

type evaluationScoringSubtasksTable struct {
	postgres.Table

	// Columns
	EvalUUID      postgres.ColumnString
	SubtaskID     postgres.ColumnInteger
	SubtaskPoints postgres.ColumnInteger
	Accepted      postgres.ColumnInteger
	Wrong         postgres.ColumnInteger
	Untested      postgres.ColumnInteger
	CreatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationScoringSubtasksTable struct {
	evaluationScoringSubtasksTable

	EXCLUDED evaluationScoringSubtasksTable
}

// AS creates new EvaluationScoringSubtasksTable with assigned alias
func (a EvaluationScoringSubtasksTable) AS(alias string) *EvaluationScoringSubtasksTable {
	return newEvaluationScoringSubtasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationScoringSubtasksTable with assigned schema name
func (a EvaluationScoringSubtasksTable) FromSchema(schemaName string) *EvaluationScoringSubtasksTable {
	return newEvaluationScoringSubtasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationScoringSubtasksTable with assigned table prefix
func (a EvaluationScoringSubtasksTable) WithPrefix(prefix string) *EvaluationScoringSubtasksTable {
	return newEvaluationScoringSubtasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationScoringSubtasksTable with assigned table suffix
func (a EvaluationScoringSubtasksTable) WithSuffix(suffix string) *EvaluationScoringSubtasksTable {
	return newEvaluationScoringSubtasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationScoringSubtasksTable(schemaName, tableName, alias string) *EvaluationScoringSubtasksTable {
	return &EvaluationScoringSubtasksTable{
		evaluationScoringSubtasksTable: newEvaluationScoringSubtasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newEvaluationScoringSubtasksTableImpl("", "excluded", ""),
	}
}

func newEvaluationScoringSubtasksTableImpl(schemaName, tableName, alias string) evaluationScoringSubtasksTable {
	var (
		EvalUUIDColumn      = postgres.StringColumn("eval_uuid")
		SubtaskIDColumn     = postgres.IntegerColumn("subtask_id")
		SubtaskPointsColumn = postgres.IntegerColumn("subtask_points")
		AcceptedColumn      = postgres.IntegerColumn("accepted")
		WrongColumn         = postgres.IntegerColumn("wrong")
		UntestedColumn      = postgres.IntegerColumn("untested")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		allColumns          = postgres.ColumnList{EvalUUIDColumn, SubtaskIDColumn, SubtaskPointsColumn, AcceptedColumn, WrongColumn, UntestedColumn, CreatedAtColumn}
		mutableColumns      = postgres.ColumnList{SubtaskPointsColumn, AcceptedColumn, WrongColumn, UntestedColumn, CreatedAtColumn}
	)

	return evaluationScoringSubtasksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EvalUUID:      EvalUUIDColumn,
		SubtaskID:     SubtaskIDColumn,
		SubtaskPoints: SubtaskPointsColumn,
		Accepted:      AcceptedColumn,
		Wrong:         WrongColumn,
		Untested:      UntestedColumn,
		CreatedAt:     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
