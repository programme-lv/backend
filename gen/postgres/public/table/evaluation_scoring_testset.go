//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EvaluationScoringTestset = newEvaluationScoringTestsetTable("public", "evaluation_scoring_testset", "")

type evaluationScoringTestsetTable struct {
	postgres.Table

	// Columns
	EvalUUID postgres.ColumnString
	Accepted postgres.ColumnInteger
	Wrong    postgres.ColumnInteger
	Untested postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EvaluationScoringTestsetTable struct {
	evaluationScoringTestsetTable

	EXCLUDED evaluationScoringTestsetTable
}

// AS creates new EvaluationScoringTestsetTable with assigned alias
func (a EvaluationScoringTestsetTable) AS(alias string) *EvaluationScoringTestsetTable {
	return newEvaluationScoringTestsetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EvaluationScoringTestsetTable with assigned schema name
func (a EvaluationScoringTestsetTable) FromSchema(schemaName string) *EvaluationScoringTestsetTable {
	return newEvaluationScoringTestsetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EvaluationScoringTestsetTable with assigned table prefix
func (a EvaluationScoringTestsetTable) WithPrefix(prefix string) *EvaluationScoringTestsetTable {
	return newEvaluationScoringTestsetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EvaluationScoringTestsetTable with assigned table suffix
func (a EvaluationScoringTestsetTable) WithSuffix(suffix string) *EvaluationScoringTestsetTable {
	return newEvaluationScoringTestsetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEvaluationScoringTestsetTable(schemaName, tableName, alias string) *EvaluationScoringTestsetTable {
	return &EvaluationScoringTestsetTable{
		evaluationScoringTestsetTable: newEvaluationScoringTestsetTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newEvaluationScoringTestsetTableImpl("", "excluded", ""),
	}
}

func newEvaluationScoringTestsetTableImpl(schemaName, tableName, alias string) evaluationScoringTestsetTable {
	var (
		EvalUUIDColumn = postgres.StringColumn("eval_uuid")
		AcceptedColumn = postgres.IntegerColumn("accepted")
		WrongColumn    = postgres.IntegerColumn("wrong")
		UntestedColumn = postgres.IntegerColumn("untested")
		allColumns     = postgres.ColumnList{EvalUUIDColumn, AcceptedColumn, WrongColumn, UntestedColumn}
		mutableColumns = postgres.ColumnList{AcceptedColumn, WrongColumn, UntestedColumn}
	)

	return evaluationScoringTestsetTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EvalUUID: EvalUUIDColumn,
		Accepted: AcceptedColumn,
		Wrong:    WrongColumn,
		Untested: UntestedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
