//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TestlibChecker = newTestlibCheckerTable("public", "testlib_checker", "")

type testlibCheckerTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	CheckerCode postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TestlibCheckerTable struct {
	testlibCheckerTable

	EXCLUDED testlibCheckerTable
}

// AS creates new TestlibCheckerTable with assigned alias
func (a TestlibCheckerTable) AS(alias string) *TestlibCheckerTable {
	return newTestlibCheckerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TestlibCheckerTable with assigned schema name
func (a TestlibCheckerTable) FromSchema(schemaName string) *TestlibCheckerTable {
	return newTestlibCheckerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TestlibCheckerTable with assigned table prefix
func (a TestlibCheckerTable) WithPrefix(prefix string) *TestlibCheckerTable {
	return newTestlibCheckerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TestlibCheckerTable with assigned table suffix
func (a TestlibCheckerTable) WithSuffix(suffix string) *TestlibCheckerTable {
	return newTestlibCheckerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTestlibCheckerTable(schemaName, tableName, alias string) *TestlibCheckerTable {
	return &TestlibCheckerTable{
		testlibCheckerTable: newTestlibCheckerTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newTestlibCheckerTableImpl("", "excluded", ""),
	}
}

func newTestlibCheckerTableImpl(schemaName, tableName, alias string) testlibCheckerTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		CheckerCodeColumn = postgres.StringColumn("checker_code")
		allColumns        = postgres.ColumnList{IDColumn, CheckerCodeColumn}
		mutableColumns    = postgres.ColumnList{CheckerCodeColumn}
	)

	return testlibCheckerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CheckerCode: CheckerCodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
